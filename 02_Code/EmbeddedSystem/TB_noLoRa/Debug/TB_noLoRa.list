
TB_noLoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08008868  08008868  00018868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac8  08008ac8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ad0  08008ad0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000070  08008b48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08008b48  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117e7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002225  00000000  00000000  0003187f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159be  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ac7  00000000  00000000  0004afce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085686  00000000  00000000  0005ca95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e211b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000e216c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008850 	.word	0x08008850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08008850 	.word	0x08008850

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f827 	bl	800146c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff77 	bl	800131c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f819 	bl	800146c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f80f 	bl	800146c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff9f 	bl	80013a0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff95 	bl	80013a0 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	0008      	movs	r0, r1
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f834 	bl	8000520 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_lmul>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	46ce      	mov	lr, r9
 80004c8:	4647      	mov	r7, r8
 80004ca:	b580      	push	{r7, lr}
 80004cc:	0007      	movs	r7, r0
 80004ce:	4699      	mov	r9, r3
 80004d0:	0c3b      	lsrs	r3, r7, #16
 80004d2:	469c      	mov	ip, r3
 80004d4:	0413      	lsls	r3, r2, #16
 80004d6:	0c1b      	lsrs	r3, r3, #16
 80004d8:	001d      	movs	r5, r3
 80004da:	000e      	movs	r6, r1
 80004dc:	4661      	mov	r1, ip
 80004de:	0400      	lsls	r0, r0, #16
 80004e0:	0c14      	lsrs	r4, r2, #16
 80004e2:	0c00      	lsrs	r0, r0, #16
 80004e4:	4345      	muls	r5, r0
 80004e6:	434b      	muls	r3, r1
 80004e8:	4360      	muls	r0, r4
 80004ea:	4361      	muls	r1, r4
 80004ec:	18c0      	adds	r0, r0, r3
 80004ee:	0c2c      	lsrs	r4, r5, #16
 80004f0:	1820      	adds	r0, r4, r0
 80004f2:	468c      	mov	ip, r1
 80004f4:	4283      	cmp	r3, r0
 80004f6:	d903      	bls.n	8000500 <__aeabi_lmul+0x3c>
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	025b      	lsls	r3, r3, #9
 80004fc:	4698      	mov	r8, r3
 80004fe:	44c4      	add	ip, r8
 8000500:	4649      	mov	r1, r9
 8000502:	4379      	muls	r1, r7
 8000504:	4372      	muls	r2, r6
 8000506:	0c03      	lsrs	r3, r0, #16
 8000508:	4463      	add	r3, ip
 800050a:	042d      	lsls	r5, r5, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	18c9      	adds	r1, r1, r3
 8000510:	0400      	lsls	r0, r0, #16
 8000512:	1940      	adds	r0, r0, r5
 8000514:	1889      	adds	r1, r1, r2
 8000516:	bcc0      	pop	{r6, r7}
 8000518:	46b9      	mov	r9, r7
 800051a:	46b0      	mov	r8, r6
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__udivmoddi4>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	4657      	mov	r7, sl
 8000524:	464e      	mov	r6, r9
 8000526:	4645      	mov	r5, r8
 8000528:	46de      	mov	lr, fp
 800052a:	b5e0      	push	{r5, r6, r7, lr}
 800052c:	0004      	movs	r4, r0
 800052e:	000d      	movs	r5, r1
 8000530:	4692      	mov	sl, r2
 8000532:	4699      	mov	r9, r3
 8000534:	b083      	sub	sp, #12
 8000536:	428b      	cmp	r3, r1
 8000538:	d830      	bhi.n	800059c <__udivmoddi4+0x7c>
 800053a:	d02d      	beq.n	8000598 <__udivmoddi4+0x78>
 800053c:	4649      	mov	r1, r9
 800053e:	4650      	mov	r0, sl
 8000540:	f001 fe98 	bl	8002274 <__clzdi2>
 8000544:	0029      	movs	r1, r5
 8000546:	0006      	movs	r6, r0
 8000548:	0020      	movs	r0, r4
 800054a:	f001 fe93 	bl	8002274 <__clzdi2>
 800054e:	1a33      	subs	r3, r6, r0
 8000550:	4698      	mov	r8, r3
 8000552:	3b20      	subs	r3, #32
 8000554:	469b      	mov	fp, r3
 8000556:	d433      	bmi.n	80005c0 <__udivmoddi4+0xa0>
 8000558:	465a      	mov	r2, fp
 800055a:	4653      	mov	r3, sl
 800055c:	4093      	lsls	r3, r2
 800055e:	4642      	mov	r2, r8
 8000560:	001f      	movs	r7, r3
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001e      	movs	r6, r3
 8000568:	42af      	cmp	r7, r5
 800056a:	d83a      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 800056c:	42af      	cmp	r7, r5
 800056e:	d100      	bne.n	8000572 <__udivmoddi4+0x52>
 8000570:	e078      	b.n	8000664 <__udivmoddi4+0x144>
 8000572:	465b      	mov	r3, fp
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	41bd      	sbcs	r5, r7
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <__udivmoddi4+0x5e>
 800057c:	e075      	b.n	800066a <__udivmoddi4+0x14a>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	465a      	mov	r2, fp
 800058a:	4093      	lsls	r3, r2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	4642      	mov	r2, r8
 8000592:	4093      	lsls	r3, r2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e028      	b.n	80005ea <__udivmoddi4+0xca>
 8000598:	4282      	cmp	r2, r0
 800059a:	d9cf      	bls.n	800053c <__udivmoddi4+0x1c>
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <__udivmoddi4+0x8e>
 80005aa:	601c      	str	r4, [r3, #0]
 80005ac:	605d      	str	r5, [r3, #4]
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	b003      	add	sp, #12
 80005b4:	bcf0      	pop	{r4, r5, r6, r7}
 80005b6:	46bb      	mov	fp, r7
 80005b8:	46b2      	mov	sl, r6
 80005ba:	46a9      	mov	r9, r5
 80005bc:	46a0      	mov	r8, r4
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	4652      	mov	r2, sl
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	4641      	mov	r1, r8
 80005cc:	0013      	movs	r3, r2
 80005ce:	464a      	mov	r2, r9
 80005d0:	408a      	lsls	r2, r1
 80005d2:	0017      	movs	r7, r2
 80005d4:	4642      	mov	r2, r8
 80005d6:	431f      	orrs	r7, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	4093      	lsls	r3, r2
 80005dc:	001e      	movs	r6, r3
 80005de:	42af      	cmp	r7, r5
 80005e0:	d9c4      	bls.n	800056c <__udivmoddi4+0x4c>
 80005e2:	2200      	movs	r2, #0
 80005e4:	2300      	movs	r3, #0
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0d9      	beq.n	80005a4 <__udivmoddi4+0x84>
 80005f0:	07fb      	lsls	r3, r7, #31
 80005f2:	0872      	lsrs	r2, r6, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4646      	mov	r6, r8
 80005f8:	087b      	lsrs	r3, r7, #1
 80005fa:	e00e      	b.n	800061a <__udivmoddi4+0xfa>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d101      	bne.n	8000604 <__udivmoddi4+0xe4>
 8000600:	42a2      	cmp	r2, r4
 8000602:	d80c      	bhi.n	800061e <__udivmoddi4+0xfe>
 8000604:	1aa4      	subs	r4, r4, r2
 8000606:	419d      	sbcs	r5, r3
 8000608:	2001      	movs	r0, #1
 800060a:	1924      	adds	r4, r4, r4
 800060c:	416d      	adcs	r5, r5
 800060e:	2100      	movs	r1, #0
 8000610:	3e01      	subs	r6, #1
 8000612:	1824      	adds	r4, r4, r0
 8000614:	414d      	adcs	r5, r1
 8000616:	2e00      	cmp	r6, #0
 8000618:	d006      	beq.n	8000628 <__udivmoddi4+0x108>
 800061a:	42ab      	cmp	r3, r5
 800061c:	d9ee      	bls.n	80005fc <__udivmoddi4+0xdc>
 800061e:	3e01      	subs	r6, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2e00      	cmp	r6, #0
 8000626:	d1f8      	bne.n	800061a <__udivmoddi4+0xfa>
 8000628:	9800      	ldr	r0, [sp, #0]
 800062a:	9901      	ldr	r1, [sp, #4]
 800062c:	465b      	mov	r3, fp
 800062e:	1900      	adds	r0, r0, r4
 8000630:	4169      	adcs	r1, r5
 8000632:	2b00      	cmp	r3, #0
 8000634:	db24      	blt.n	8000680 <__udivmoddi4+0x160>
 8000636:	002b      	movs	r3, r5
 8000638:	465a      	mov	r2, fp
 800063a:	4644      	mov	r4, r8
 800063c:	40d3      	lsrs	r3, r2
 800063e:	002a      	movs	r2, r5
 8000640:	40e2      	lsrs	r2, r4
 8000642:	001c      	movs	r4, r3
 8000644:	465b      	mov	r3, fp
 8000646:	0015      	movs	r5, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	db2a      	blt.n	80006a2 <__udivmoddi4+0x182>
 800064c:	0026      	movs	r6, r4
 800064e:	409e      	lsls	r6, r3
 8000650:	0033      	movs	r3, r6
 8000652:	0026      	movs	r6, r4
 8000654:	4647      	mov	r7, r8
 8000656:	40be      	lsls	r6, r7
 8000658:	0032      	movs	r2, r6
 800065a:	1a80      	subs	r0, r0, r2
 800065c:	4199      	sbcs	r1, r3
 800065e:	9000      	str	r0, [sp, #0]
 8000660:	9101      	str	r1, [sp, #4]
 8000662:	e79f      	b.n	80005a4 <__udivmoddi4+0x84>
 8000664:	42a3      	cmp	r3, r4
 8000666:	d8bc      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 8000668:	e783      	b.n	8000572 <__udivmoddi4+0x52>
 800066a:	4642      	mov	r2, r8
 800066c:	2320      	movs	r3, #32
 800066e:	2100      	movs	r1, #0
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	9100      	str	r1, [sp, #0]
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	40da      	lsrs	r2, r3
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	e786      	b.n	800058e <__udivmoddi4+0x6e>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	4646      	mov	r6, r8
 800068a:	409a      	lsls	r2, r3
 800068c:	0023      	movs	r3, r4
 800068e:	40f3      	lsrs	r3, r6
 8000690:	4644      	mov	r4, r8
 8000692:	4313      	orrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	40e2      	lsrs	r2, r4
 8000698:	001c      	movs	r4, r3
 800069a:	465b      	mov	r3, fp
 800069c:	0015      	movs	r5, r2
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dad4      	bge.n	800064c <__udivmoddi4+0x12c>
 80006a2:	4642      	mov	r2, r8
 80006a4:	002f      	movs	r7, r5
 80006a6:	2320      	movs	r3, #32
 80006a8:	0026      	movs	r6, r4
 80006aa:	4097      	lsls	r7, r2
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	40de      	lsrs	r6, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	4333      	orrs	r3, r6
 80006b4:	e7cd      	b.n	8000652 <__udivmoddi4+0x132>
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_dadd>:
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	464f      	mov	r7, r9
 80006bc:	4646      	mov	r6, r8
 80006be:	46d6      	mov	lr, sl
 80006c0:	000d      	movs	r5, r1
 80006c2:	0004      	movs	r4, r0
 80006c4:	b5c0      	push	{r6, r7, lr}
 80006c6:	001f      	movs	r7, r3
 80006c8:	0011      	movs	r1, r2
 80006ca:	0328      	lsls	r0, r5, #12
 80006cc:	0f62      	lsrs	r2, r4, #29
 80006ce:	0a40      	lsrs	r0, r0, #9
 80006d0:	4310      	orrs	r0, r2
 80006d2:	007a      	lsls	r2, r7, #1
 80006d4:	0d52      	lsrs	r2, r2, #21
 80006d6:	00e3      	lsls	r3, r4, #3
 80006d8:	033c      	lsls	r4, r7, #12
 80006da:	4691      	mov	r9, r2
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	0ffa      	lsrs	r2, r7, #31
 80006e0:	0f4f      	lsrs	r7, r1, #29
 80006e2:	006e      	lsls	r6, r5, #1
 80006e4:	4327      	orrs	r7, r4
 80006e6:	4692      	mov	sl, r2
 80006e8:	46b8      	mov	r8, r7
 80006ea:	0d76      	lsrs	r6, r6, #21
 80006ec:	0fed      	lsrs	r5, r5, #31
 80006ee:	00c9      	lsls	r1, r1, #3
 80006f0:	4295      	cmp	r5, r2
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x3e>
 80006f4:	e099      	b.n	800082a <__aeabi_dadd+0x172>
 80006f6:	464c      	mov	r4, r9
 80006f8:	1b34      	subs	r4, r6, r4
 80006fa:	46a4      	mov	ip, r4
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_dadd+0x4a>
 8000700:	e07c      	b.n	80007fc <__aeabi_dadd+0x144>
 8000702:	464a      	mov	r2, r9
 8000704:	2a00      	cmp	r2, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x52>
 8000708:	e0b8      	b.n	800087c <__aeabi_dadd+0x1c4>
 800070a:	4ac5      	ldr	r2, [pc, #788]	; (8000a20 <__aeabi_dadd+0x368>)
 800070c:	4296      	cmp	r6, r2
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x5a>
 8000710:	e11c      	b.n	800094c <__aeabi_dadd+0x294>
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	003c      	movs	r4, r7
 8000716:	0412      	lsls	r2, r2, #16
 8000718:	4314      	orrs	r4, r2
 800071a:	46a0      	mov	r8, r4
 800071c:	4662      	mov	r2, ip
 800071e:	2a38      	cmp	r2, #56	; 0x38
 8000720:	dd00      	ble.n	8000724 <__aeabi_dadd+0x6c>
 8000722:	e161      	b.n	80009e8 <__aeabi_dadd+0x330>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x72>
 8000728:	e1cc      	b.n	8000ac4 <__aeabi_dadd+0x40c>
 800072a:	4664      	mov	r4, ip
 800072c:	2220      	movs	r2, #32
 800072e:	1b12      	subs	r2, r2, r4
 8000730:	4644      	mov	r4, r8
 8000732:	4094      	lsls	r4, r2
 8000734:	000f      	movs	r7, r1
 8000736:	46a1      	mov	r9, r4
 8000738:	4664      	mov	r4, ip
 800073a:	4091      	lsls	r1, r2
 800073c:	40e7      	lsrs	r7, r4
 800073e:	464c      	mov	r4, r9
 8000740:	1e4a      	subs	r2, r1, #1
 8000742:	4191      	sbcs	r1, r2
 8000744:	433c      	orrs	r4, r7
 8000746:	4642      	mov	r2, r8
 8000748:	4321      	orrs	r1, r4
 800074a:	4664      	mov	r4, ip
 800074c:	40e2      	lsrs	r2, r4
 800074e:	1a80      	subs	r0, r0, r2
 8000750:	1a5c      	subs	r4, r3, r1
 8000752:	42a3      	cmp	r3, r4
 8000754:	419b      	sbcs	r3, r3
 8000756:	425f      	negs	r7, r3
 8000758:	1bc7      	subs	r7, r0, r7
 800075a:	023b      	lsls	r3, r7, #8
 800075c:	d400      	bmi.n	8000760 <__aeabi_dadd+0xa8>
 800075e:	e0d0      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000760:	027f      	lsls	r7, r7, #9
 8000762:	0a7f      	lsrs	r7, r7, #9
 8000764:	2f00      	cmp	r7, #0
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0xb2>
 8000768:	e0ff      	b.n	800096a <__aeabi_dadd+0x2b2>
 800076a:	0038      	movs	r0, r7
 800076c:	f001 fd64 	bl	8002238 <__clzsi2>
 8000770:	0001      	movs	r1, r0
 8000772:	3908      	subs	r1, #8
 8000774:	2320      	movs	r3, #32
 8000776:	0022      	movs	r2, r4
 8000778:	1a5b      	subs	r3, r3, r1
 800077a:	408f      	lsls	r7, r1
 800077c:	40da      	lsrs	r2, r3
 800077e:	408c      	lsls	r4, r1
 8000780:	4317      	orrs	r7, r2
 8000782:	42b1      	cmp	r1, r6
 8000784:	da00      	bge.n	8000788 <__aeabi_dadd+0xd0>
 8000786:	e0ff      	b.n	8000988 <__aeabi_dadd+0x2d0>
 8000788:	1b89      	subs	r1, r1, r6
 800078a:	1c4b      	adds	r3, r1, #1
 800078c:	2b1f      	cmp	r3, #31
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0xda>
 8000790:	e0a8      	b.n	80008e4 <__aeabi_dadd+0x22c>
 8000792:	2220      	movs	r2, #32
 8000794:	0039      	movs	r1, r7
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	0020      	movs	r0, r4
 800079a:	4094      	lsls	r4, r2
 800079c:	4091      	lsls	r1, r2
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	40df      	lsrs	r7, r3
 80007a6:	2600      	movs	r6, #0
 80007a8:	4301      	orrs	r1, r0
 80007aa:	430c      	orrs	r4, r1
 80007ac:	0763      	lsls	r3, r4, #29
 80007ae:	d009      	beq.n	80007c4 <__aeabi_dadd+0x10c>
 80007b0:	230f      	movs	r3, #15
 80007b2:	4023      	ands	r3, r4
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d005      	beq.n	80007c4 <__aeabi_dadd+0x10c>
 80007b8:	1d23      	adds	r3, r4, #4
 80007ba:	42a3      	cmp	r3, r4
 80007bc:	41a4      	sbcs	r4, r4
 80007be:	4264      	negs	r4, r4
 80007c0:	193f      	adds	r7, r7, r4
 80007c2:	001c      	movs	r4, r3
 80007c4:	023b      	lsls	r3, r7, #8
 80007c6:	d400      	bmi.n	80007ca <__aeabi_dadd+0x112>
 80007c8:	e09e      	b.n	8000908 <__aeabi_dadd+0x250>
 80007ca:	4b95      	ldr	r3, [pc, #596]	; (8000a20 <__aeabi_dadd+0x368>)
 80007cc:	3601      	adds	r6, #1
 80007ce:	429e      	cmp	r6, r3
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x11c>
 80007d2:	e0b7      	b.n	8000944 <__aeabi_dadd+0x28c>
 80007d4:	4a93      	ldr	r2, [pc, #588]	; (8000a24 <__aeabi_dadd+0x36c>)
 80007d6:	08e4      	lsrs	r4, r4, #3
 80007d8:	4017      	ands	r7, r2
 80007da:	077b      	lsls	r3, r7, #29
 80007dc:	0571      	lsls	r1, r6, #21
 80007de:	027f      	lsls	r7, r7, #9
 80007e0:	4323      	orrs	r3, r4
 80007e2:	0b3f      	lsrs	r7, r7, #12
 80007e4:	0d4a      	lsrs	r2, r1, #21
 80007e6:	0512      	lsls	r2, r2, #20
 80007e8:	433a      	orrs	r2, r7
 80007ea:	07ed      	lsls	r5, r5, #31
 80007ec:	432a      	orrs	r2, r5
 80007ee:	0018      	movs	r0, r3
 80007f0:	0011      	movs	r1, r2
 80007f2:	bce0      	pop	{r5, r6, r7}
 80007f4:	46ba      	mov	sl, r7
 80007f6:	46b1      	mov	r9, r6
 80007f8:	46a8      	mov	r8, r5
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d04b      	beq.n	8000898 <__aeabi_dadd+0x1e0>
 8000800:	464c      	mov	r4, r9
 8000802:	1ba4      	subs	r4, r4, r6
 8000804:	46a4      	mov	ip, r4
 8000806:	2e00      	cmp	r6, #0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x154>
 800080a:	e123      	b.n	8000a54 <__aeabi_dadd+0x39c>
 800080c:	0004      	movs	r4, r0
 800080e:	431c      	orrs	r4, r3
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x15c>
 8000812:	e1af      	b.n	8000b74 <__aeabi_dadd+0x4bc>
 8000814:	4662      	mov	r2, ip
 8000816:	1e54      	subs	r4, r2, #1
 8000818:	2a01      	cmp	r2, #1
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x166>
 800081c:	e215      	b.n	8000c4a <__aeabi_dadd+0x592>
 800081e:	4d80      	ldr	r5, [pc, #512]	; (8000a20 <__aeabi_dadd+0x368>)
 8000820:	45ac      	cmp	ip, r5
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x16e>
 8000824:	e1c8      	b.n	8000bb8 <__aeabi_dadd+0x500>
 8000826:	46a4      	mov	ip, r4
 8000828:	e11b      	b.n	8000a62 <__aeabi_dadd+0x3aa>
 800082a:	464a      	mov	r2, r9
 800082c:	1ab2      	subs	r2, r6, r2
 800082e:	4694      	mov	ip, r2
 8000830:	2a00      	cmp	r2, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_dadd+0x17e>
 8000834:	e0ac      	b.n	8000990 <__aeabi_dadd+0x2d8>
 8000836:	464a      	mov	r2, r9
 8000838:	2a00      	cmp	r2, #0
 800083a:	d043      	beq.n	80008c4 <__aeabi_dadd+0x20c>
 800083c:	4a78      	ldr	r2, [pc, #480]	; (8000a20 <__aeabi_dadd+0x368>)
 800083e:	4296      	cmp	r6, r2
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x18c>
 8000842:	e1af      	b.n	8000ba4 <__aeabi_dadd+0x4ec>
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	003c      	movs	r4, r7
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4314      	orrs	r4, r2
 800084c:	46a0      	mov	r8, r4
 800084e:	4662      	mov	r2, ip
 8000850:	2a38      	cmp	r2, #56	; 0x38
 8000852:	dc67      	bgt.n	8000924 <__aeabi_dadd+0x26c>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x1a2>
 8000858:	e15f      	b.n	8000b1a <__aeabi_dadd+0x462>
 800085a:	4647      	mov	r7, r8
 800085c:	3a20      	subs	r2, #32
 800085e:	40d7      	lsrs	r7, r2
 8000860:	4662      	mov	r2, ip
 8000862:	2a20      	cmp	r2, #32
 8000864:	d005      	beq.n	8000872 <__aeabi_dadd+0x1ba>
 8000866:	4664      	mov	r4, ip
 8000868:	2240      	movs	r2, #64	; 0x40
 800086a:	1b12      	subs	r2, r2, r4
 800086c:	4644      	mov	r4, r8
 800086e:	4094      	lsls	r4, r2
 8000870:	4321      	orrs	r1, r4
 8000872:	1e4a      	subs	r2, r1, #1
 8000874:	4191      	sbcs	r1, r2
 8000876:	000c      	movs	r4, r1
 8000878:	433c      	orrs	r4, r7
 800087a:	e057      	b.n	800092c <__aeabi_dadd+0x274>
 800087c:	003a      	movs	r2, r7
 800087e:	430a      	orrs	r2, r1
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x1cc>
 8000882:	e105      	b.n	8000a90 <__aeabi_dadd+0x3d8>
 8000884:	0022      	movs	r2, r4
 8000886:	3a01      	subs	r2, #1
 8000888:	2c01      	cmp	r4, #1
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x1d6>
 800088c:	e182      	b.n	8000b94 <__aeabi_dadd+0x4dc>
 800088e:	4c64      	ldr	r4, [pc, #400]	; (8000a20 <__aeabi_dadd+0x368>)
 8000890:	45a4      	cmp	ip, r4
 8000892:	d05b      	beq.n	800094c <__aeabi_dadd+0x294>
 8000894:	4694      	mov	ip, r2
 8000896:	e741      	b.n	800071c <__aeabi_dadd+0x64>
 8000898:	4c63      	ldr	r4, [pc, #396]	; (8000a28 <__aeabi_dadd+0x370>)
 800089a:	1c77      	adds	r7, r6, #1
 800089c:	4227      	tst	r7, r4
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x1ea>
 80008a0:	e0c4      	b.n	8000a2c <__aeabi_dadd+0x374>
 80008a2:	0004      	movs	r4, r0
 80008a4:	431c      	orrs	r4, r3
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_dadd+0x1f4>
 80008aa:	e169      	b.n	8000b80 <__aeabi_dadd+0x4c8>
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1fa>
 80008b0:	e1bf      	b.n	8000c32 <__aeabi_dadd+0x57a>
 80008b2:	4644      	mov	r4, r8
 80008b4:	430c      	orrs	r4, r1
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x202>
 80008b8:	e1d0      	b.n	8000c5c <__aeabi_dadd+0x5a4>
 80008ba:	0742      	lsls	r2, r0, #29
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	4313      	orrs	r3, r2
 80008c0:	08c0      	lsrs	r0, r0, #3
 80008c2:	e029      	b.n	8000918 <__aeabi_dadd+0x260>
 80008c4:	003a      	movs	r2, r7
 80008c6:	430a      	orrs	r2, r1
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x214>
 80008ca:	e170      	b.n	8000bae <__aeabi_dadd+0x4f6>
 80008cc:	4662      	mov	r2, ip
 80008ce:	4664      	mov	r4, ip
 80008d0:	3a01      	subs	r2, #1
 80008d2:	2c01      	cmp	r4, #1
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x220>
 80008d6:	e0e0      	b.n	8000a9a <__aeabi_dadd+0x3e2>
 80008d8:	4c51      	ldr	r4, [pc, #324]	; (8000a20 <__aeabi_dadd+0x368>)
 80008da:	45a4      	cmp	ip, r4
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x228>
 80008de:	e161      	b.n	8000ba4 <__aeabi_dadd+0x4ec>
 80008e0:	4694      	mov	ip, r2
 80008e2:	e7b4      	b.n	800084e <__aeabi_dadd+0x196>
 80008e4:	003a      	movs	r2, r7
 80008e6:	391f      	subs	r1, #31
 80008e8:	40ca      	lsrs	r2, r1
 80008ea:	0011      	movs	r1, r2
 80008ec:	2b20      	cmp	r3, #32
 80008ee:	d003      	beq.n	80008f8 <__aeabi_dadd+0x240>
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	409f      	lsls	r7, r3
 80008f6:	433c      	orrs	r4, r7
 80008f8:	1e63      	subs	r3, r4, #1
 80008fa:	419c      	sbcs	r4, r3
 80008fc:	2700      	movs	r7, #0
 80008fe:	2600      	movs	r6, #0
 8000900:	430c      	orrs	r4, r1
 8000902:	0763      	lsls	r3, r4, #29
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x250>
 8000906:	e753      	b.n	80007b0 <__aeabi_dadd+0xf8>
 8000908:	46b4      	mov	ip, r6
 800090a:	08e4      	lsrs	r4, r4, #3
 800090c:	077b      	lsls	r3, r7, #29
 800090e:	4323      	orrs	r3, r4
 8000910:	08f8      	lsrs	r0, r7, #3
 8000912:	4a43      	ldr	r2, [pc, #268]	; (8000a20 <__aeabi_dadd+0x368>)
 8000914:	4594      	cmp	ip, r2
 8000916:	d01d      	beq.n	8000954 <__aeabi_dadd+0x29c>
 8000918:	4662      	mov	r2, ip
 800091a:	0307      	lsls	r7, r0, #12
 800091c:	0552      	lsls	r2, r2, #21
 800091e:	0b3f      	lsrs	r7, r7, #12
 8000920:	0d52      	lsrs	r2, r2, #21
 8000922:	e760      	b.n	80007e6 <__aeabi_dadd+0x12e>
 8000924:	4644      	mov	r4, r8
 8000926:	430c      	orrs	r4, r1
 8000928:	1e62      	subs	r2, r4, #1
 800092a:	4194      	sbcs	r4, r2
 800092c:	18e4      	adds	r4, r4, r3
 800092e:	429c      	cmp	r4, r3
 8000930:	419b      	sbcs	r3, r3
 8000932:	425f      	negs	r7, r3
 8000934:	183f      	adds	r7, r7, r0
 8000936:	023b      	lsls	r3, r7, #8
 8000938:	d5e3      	bpl.n	8000902 <__aeabi_dadd+0x24a>
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <__aeabi_dadd+0x368>)
 800093c:	3601      	adds	r6, #1
 800093e:	429e      	cmp	r6, r3
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x28c>
 8000942:	e0b5      	b.n	8000ab0 <__aeabi_dadd+0x3f8>
 8000944:	0032      	movs	r2, r6
 8000946:	2700      	movs	r7, #0
 8000948:	2300      	movs	r3, #0
 800094a:	e74c      	b.n	80007e6 <__aeabi_dadd+0x12e>
 800094c:	0742      	lsls	r2, r0, #29
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	4313      	orrs	r3, r2
 8000952:	08c0      	lsrs	r0, r0, #3
 8000954:	001a      	movs	r2, r3
 8000956:	4302      	orrs	r2, r0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x2a4>
 800095a:	e1e1      	b.n	8000d20 <__aeabi_dadd+0x668>
 800095c:	2780      	movs	r7, #128	; 0x80
 800095e:	033f      	lsls	r7, r7, #12
 8000960:	4307      	orrs	r7, r0
 8000962:	033f      	lsls	r7, r7, #12
 8000964:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <__aeabi_dadd+0x368>)
 8000966:	0b3f      	lsrs	r7, r7, #12
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x12e>
 800096a:	0020      	movs	r0, r4
 800096c:	f001 fc64 	bl	8002238 <__clzsi2>
 8000970:	0001      	movs	r1, r0
 8000972:	3118      	adds	r1, #24
 8000974:	291f      	cmp	r1, #31
 8000976:	dc00      	bgt.n	800097a <__aeabi_dadd+0x2c2>
 8000978:	e6fc      	b.n	8000774 <__aeabi_dadd+0xbc>
 800097a:	3808      	subs	r0, #8
 800097c:	4084      	lsls	r4, r0
 800097e:	0027      	movs	r7, r4
 8000980:	2400      	movs	r4, #0
 8000982:	42b1      	cmp	r1, r6
 8000984:	db00      	blt.n	8000988 <__aeabi_dadd+0x2d0>
 8000986:	e6ff      	b.n	8000788 <__aeabi_dadd+0xd0>
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <__aeabi_dadd+0x36c>)
 800098a:	1a76      	subs	r6, r6, r1
 800098c:	4017      	ands	r7, r2
 800098e:	e70d      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000990:	2a00      	cmp	r2, #0
 8000992:	d02f      	beq.n	80009f4 <__aeabi_dadd+0x33c>
 8000994:	464a      	mov	r2, r9
 8000996:	1b92      	subs	r2, r2, r6
 8000998:	4694      	mov	ip, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x2e8>
 800099e:	e0ad      	b.n	8000afc <__aeabi_dadd+0x444>
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <__aeabi_dadd+0x368>)
 80009a2:	4591      	cmp	r9, r2
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x2f0>
 80009a6:	e10f      	b.n	8000bc8 <__aeabi_dadd+0x510>
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	4310      	orrs	r0, r2
 80009ae:	4662      	mov	r2, ip
 80009b0:	2a38      	cmp	r2, #56	; 0x38
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0x2fe>
 80009b4:	e10f      	b.n	8000bd6 <__aeabi_dadd+0x51e>
 80009b6:	2a1f      	cmp	r2, #31
 80009b8:	dd00      	ble.n	80009bc <__aeabi_dadd+0x304>
 80009ba:	e180      	b.n	8000cbe <__aeabi_dadd+0x606>
 80009bc:	4664      	mov	r4, ip
 80009be:	2220      	movs	r2, #32
 80009c0:	001e      	movs	r6, r3
 80009c2:	1b12      	subs	r2, r2, r4
 80009c4:	4667      	mov	r7, ip
 80009c6:	0004      	movs	r4, r0
 80009c8:	4093      	lsls	r3, r2
 80009ca:	4094      	lsls	r4, r2
 80009cc:	40fe      	lsrs	r6, r7
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	4193      	sbcs	r3, r2
 80009d2:	40f8      	lsrs	r0, r7
 80009d4:	4334      	orrs	r4, r6
 80009d6:	431c      	orrs	r4, r3
 80009d8:	4480      	add	r8, r0
 80009da:	1864      	adds	r4, r4, r1
 80009dc:	428c      	cmp	r4, r1
 80009de:	41bf      	sbcs	r7, r7
 80009e0:	427f      	negs	r7, r7
 80009e2:	464e      	mov	r6, r9
 80009e4:	4447      	add	r7, r8
 80009e6:	e7a6      	b.n	8000936 <__aeabi_dadd+0x27e>
 80009e8:	4642      	mov	r2, r8
 80009ea:	430a      	orrs	r2, r1
 80009ec:	0011      	movs	r1, r2
 80009ee:	1e4a      	subs	r2, r1, #1
 80009f0:	4191      	sbcs	r1, r2
 80009f2:	e6ad      	b.n	8000750 <__aeabi_dadd+0x98>
 80009f4:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__aeabi_dadd+0x370>)
 80009f6:	1c72      	adds	r2, r6, #1
 80009f8:	4222      	tst	r2, r4
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x346>
 80009fc:	e0a1      	b.n	8000b42 <__aeabi_dadd+0x48a>
 80009fe:	0002      	movs	r2, r0
 8000a00:	431a      	orrs	r2, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x350>
 8000a06:	e0fa      	b.n	8000bfe <__aeabi_dadd+0x546>
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0x356>
 8000a0c:	e145      	b.n	8000c9a <__aeabi_dadd+0x5e2>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	430a      	orrs	r2, r1
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x35e>
 8000a14:	e146      	b.n	8000ca4 <__aeabi_dadd+0x5ec>
 8000a16:	0742      	lsls	r2, r0, #29
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	08c0      	lsrs	r0, r0, #3
 8000a1e:	e77b      	b.n	8000918 <__aeabi_dadd+0x260>
 8000a20:	000007ff 	.word	0x000007ff
 8000a24:	ff7fffff 	.word	0xff7fffff
 8000a28:	000007fe 	.word	0x000007fe
 8000a2c:	4647      	mov	r7, r8
 8000a2e:	1a5c      	subs	r4, r3, r1
 8000a30:	1bc2      	subs	r2, r0, r7
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	41bf      	sbcs	r7, r7
 8000a36:	427f      	negs	r7, r7
 8000a38:	46b9      	mov	r9, r7
 8000a3a:	0017      	movs	r7, r2
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1abf      	subs	r7, r7, r2
 8000a40:	023a      	lsls	r2, r7, #8
 8000a42:	d500      	bpl.n	8000a46 <__aeabi_dadd+0x38e>
 8000a44:	e08d      	b.n	8000b62 <__aeabi_dadd+0x4aa>
 8000a46:	0023      	movs	r3, r4
 8000a48:	433b      	orrs	r3, r7
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x396>
 8000a4c:	e68a      	b.n	8000764 <__aeabi_dadd+0xac>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e761      	b.n	8000918 <__aeabi_dadd+0x260>
 8000a54:	4cb4      	ldr	r4, [pc, #720]	; (8000d28 <__aeabi_dadd+0x670>)
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x3a4>
 8000a5a:	e0ad      	b.n	8000bb8 <__aeabi_dadd+0x500>
 8000a5c:	2480      	movs	r4, #128	; 0x80
 8000a5e:	0424      	lsls	r4, r4, #16
 8000a60:	4320      	orrs	r0, r4
 8000a62:	4664      	mov	r4, ip
 8000a64:	2c38      	cmp	r4, #56	; 0x38
 8000a66:	dc3d      	bgt.n	8000ae4 <__aeabi_dadd+0x42c>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	2c1f      	cmp	r4, #31
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_dadd+0x3b8>
 8000a6e:	e0b7      	b.n	8000be0 <__aeabi_dadd+0x528>
 8000a70:	2520      	movs	r5, #32
 8000a72:	001e      	movs	r6, r3
 8000a74:	1b2d      	subs	r5, r5, r4
 8000a76:	0004      	movs	r4, r0
 8000a78:	40ab      	lsls	r3, r5
 8000a7a:	40ac      	lsls	r4, r5
 8000a7c:	40d6      	lsrs	r6, r2
 8000a7e:	40d0      	lsrs	r0, r2
 8000a80:	4642      	mov	r2, r8
 8000a82:	1e5d      	subs	r5, r3, #1
 8000a84:	41ab      	sbcs	r3, r5
 8000a86:	4334      	orrs	r4, r6
 8000a88:	1a12      	subs	r2, r2, r0
 8000a8a:	4690      	mov	r8, r2
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	e02c      	b.n	8000aea <__aeabi_dadd+0x432>
 8000a90:	0742      	lsls	r2, r0, #29
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	08c0      	lsrs	r0, r0, #3
 8000a98:	e73b      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000a9a:	185c      	adds	r4, r3, r1
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	419b      	sbcs	r3, r3
 8000aa0:	4440      	add	r0, r8
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	18c7      	adds	r7, r0, r3
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	023b      	lsls	r3, r7, #8
 8000aaa:	d400      	bmi.n	8000aae <__aeabi_dadd+0x3f6>
 8000aac:	e729      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000aae:	2602      	movs	r6, #2
 8000ab0:	4a9e      	ldr	r2, [pc, #632]	; (8000d2c <__aeabi_dadd+0x674>)
 8000ab2:	0863      	lsrs	r3, r4, #1
 8000ab4:	4017      	ands	r7, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4014      	ands	r4, r2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	07fb      	lsls	r3, r7, #31
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	087f      	lsrs	r7, r7, #1
 8000ac2:	e673      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	3a20      	subs	r2, #32
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	4662      	mov	r2, ip
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d005      	beq.n	8000adc <__aeabi_dadd+0x424>
 8000ad0:	4667      	mov	r7, ip
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	1bd2      	subs	r2, r2, r7
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	4097      	lsls	r7, r2
 8000ada:	4339      	orrs	r1, r7
 8000adc:	1e4a      	subs	r2, r1, #1
 8000ade:	4191      	sbcs	r1, r2
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	e635      	b.n	8000750 <__aeabi_dadd+0x98>
 8000ae4:	4303      	orrs	r3, r0
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4183      	sbcs	r3, r0
 8000aea:	1acc      	subs	r4, r1, r3
 8000aec:	42a1      	cmp	r1, r4
 8000aee:	41bf      	sbcs	r7, r7
 8000af0:	4643      	mov	r3, r8
 8000af2:	427f      	negs	r7, r7
 8000af4:	4655      	mov	r5, sl
 8000af6:	464e      	mov	r6, r9
 8000af8:	1bdf      	subs	r7, r3, r7
 8000afa:	e62e      	b.n	800075a <__aeabi_dadd+0xa2>
 8000afc:	0002      	movs	r2, r0
 8000afe:	431a      	orrs	r2, r3
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dadd+0x44c>
 8000b02:	e0bd      	b.n	8000c80 <__aeabi_dadd+0x5c8>
 8000b04:	4662      	mov	r2, ip
 8000b06:	4664      	mov	r4, ip
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	2c01      	cmp	r4, #1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x458>
 8000b0e:	e0e5      	b.n	8000cdc <__aeabi_dadd+0x624>
 8000b10:	4c85      	ldr	r4, [pc, #532]	; (8000d28 <__aeabi_dadd+0x670>)
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d058      	beq.n	8000bc8 <__aeabi_dadd+0x510>
 8000b16:	4694      	mov	ip, r2
 8000b18:	e749      	b.n	80009ae <__aeabi_dadd+0x2f6>
 8000b1a:	4664      	mov	r4, ip
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	1b12      	subs	r2, r2, r4
 8000b20:	4644      	mov	r4, r8
 8000b22:	4094      	lsls	r4, r2
 8000b24:	000f      	movs	r7, r1
 8000b26:	46a1      	mov	r9, r4
 8000b28:	4664      	mov	r4, ip
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	40e7      	lsrs	r7, r4
 8000b2e:	464c      	mov	r4, r9
 8000b30:	1e4a      	subs	r2, r1, #1
 8000b32:	4191      	sbcs	r1, r2
 8000b34:	433c      	orrs	r4, r7
 8000b36:	4642      	mov	r2, r8
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	4661      	mov	r1, ip
 8000b3c:	40ca      	lsrs	r2, r1
 8000b3e:	1880      	adds	r0, r0, r2
 8000b40:	e6f4      	b.n	800092c <__aeabi_dadd+0x274>
 8000b42:	4c79      	ldr	r4, [pc, #484]	; (8000d28 <__aeabi_dadd+0x670>)
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x492>
 8000b48:	e6fd      	b.n	8000946 <__aeabi_dadd+0x28e>
 8000b4a:	1859      	adds	r1, r3, r1
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	419b      	sbcs	r3, r3
 8000b50:	4440      	add	r0, r8
 8000b52:	425f      	negs	r7, r3
 8000b54:	19c7      	adds	r7, r0, r7
 8000b56:	07fc      	lsls	r4, r7, #31
 8000b58:	0849      	lsrs	r1, r1, #1
 8000b5a:	0016      	movs	r6, r2
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	087f      	lsrs	r7, r7, #1
 8000b60:	e6cf      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000b62:	1acc      	subs	r4, r1, r3
 8000b64:	42a1      	cmp	r1, r4
 8000b66:	41bf      	sbcs	r7, r7
 8000b68:	4643      	mov	r3, r8
 8000b6a:	427f      	negs	r7, r7
 8000b6c:	1a18      	subs	r0, r3, r0
 8000b6e:	4655      	mov	r5, sl
 8000b70:	1bc7      	subs	r7, r0, r7
 8000b72:	e5f7      	b.n	8000764 <__aeabi_dadd+0xac>
 8000b74:	08c9      	lsrs	r1, r1, #3
 8000b76:	077b      	lsls	r3, r7, #29
 8000b78:	4655      	mov	r5, sl
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	08f8      	lsrs	r0, r7, #3
 8000b7e:	e6c8      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d000      	beq.n	8000b86 <__aeabi_dadd+0x4ce>
 8000b84:	e081      	b.n	8000c8a <__aeabi_dadd+0x5d2>
 8000b86:	4643      	mov	r3, r8
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	d115      	bne.n	8000bb8 <__aeabi_dadd+0x500>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	2500      	movs	r5, #0
 8000b90:	0300      	lsls	r0, r0, #12
 8000b92:	e6e3      	b.n	800095c <__aeabi_dadd+0x2a4>
 8000b94:	1a5c      	subs	r4, r3, r1
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	419b      	sbcs	r3, r3
 8000b9a:	1bc7      	subs	r7, r0, r7
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	1aff      	subs	r7, r7, r3
 8000ba2:	e5da      	b.n	800075a <__aeabi_dadd+0xa2>
 8000ba4:	0742      	lsls	r2, r0, #29
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	08c0      	lsrs	r0, r0, #3
 8000bac:	e6d2      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bae:	0742      	lsls	r2, r0, #29
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	e6ac      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000bb8:	4643      	mov	r3, r8
 8000bba:	4642      	mov	r2, r8
 8000bbc:	08c9      	lsrs	r1, r1, #3
 8000bbe:	075b      	lsls	r3, r3, #29
 8000bc0:	4655      	mov	r5, sl
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	08d0      	lsrs	r0, r2, #3
 8000bc6:	e6c5      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bc8:	4643      	mov	r3, r8
 8000bca:	4642      	mov	r2, r8
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	08d0      	lsrs	r0, r2, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bd6:	4303      	orrs	r3, r0
 8000bd8:	001c      	movs	r4, r3
 8000bda:	1e63      	subs	r3, r4, #1
 8000bdc:	419c      	sbcs	r4, r3
 8000bde:	e6fc      	b.n	80009da <__aeabi_dadd+0x322>
 8000be0:	0002      	movs	r2, r0
 8000be2:	3c20      	subs	r4, #32
 8000be4:	40e2      	lsrs	r2, r4
 8000be6:	0014      	movs	r4, r2
 8000be8:	4662      	mov	r2, ip
 8000bea:	2a20      	cmp	r2, #32
 8000bec:	d003      	beq.n	8000bf6 <__aeabi_dadd+0x53e>
 8000bee:	2540      	movs	r5, #64	; 0x40
 8000bf0:	1aad      	subs	r5, r5, r2
 8000bf2:	40a8      	lsls	r0, r5
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	1e58      	subs	r0, r3, #1
 8000bf8:	4183      	sbcs	r3, r0
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	e775      	b.n	8000aea <__aeabi_dadd+0x432>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d0e2      	beq.n	8000bc8 <__aeabi_dadd+0x510>
 8000c02:	003a      	movs	r2, r7
 8000c04:	430a      	orrs	r2, r1
 8000c06:	d0cd      	beq.n	8000ba4 <__aeabi_dadd+0x4ec>
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	08c0      	lsrs	r0, r0, #3
 8000c12:	0312      	lsls	r2, r2, #12
 8000c14:	4210      	tst	r0, r2
 8000c16:	d006      	beq.n	8000c26 <__aeabi_dadd+0x56e>
 8000c18:	08fc      	lsrs	r4, r7, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d103      	bne.n	8000c26 <__aeabi_dadd+0x56e>
 8000c1e:	0020      	movs	r0, r4
 8000c20:	08cb      	lsrs	r3, r1, #3
 8000c22:	077a      	lsls	r2, r7, #29
 8000c24:	4313      	orrs	r3, r2
 8000c26:	0f5a      	lsrs	r2, r3, #29
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	0752      	lsls	r2, r2, #29
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	e690      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000c32:	4643      	mov	r3, r8
 8000c34:	430b      	orrs	r3, r1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x582>
 8000c38:	e709      	b.n	8000a4e <__aeabi_dadd+0x396>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	08c9      	lsrs	r1, r1, #3
 8000c40:	075b      	lsls	r3, r3, #29
 8000c42:	4655      	mov	r5, sl
 8000c44:	430b      	orrs	r3, r1
 8000c46:	08d0      	lsrs	r0, r2, #3
 8000c48:	e666      	b.n	8000918 <__aeabi_dadd+0x260>
 8000c4a:	1acc      	subs	r4, r1, r3
 8000c4c:	42a1      	cmp	r1, r4
 8000c4e:	4189      	sbcs	r1, r1
 8000c50:	1a3f      	subs	r7, r7, r0
 8000c52:	4249      	negs	r1, r1
 8000c54:	4655      	mov	r5, sl
 8000c56:	2601      	movs	r6, #1
 8000c58:	1a7f      	subs	r7, r7, r1
 8000c5a:	e57e      	b.n	800075a <__aeabi_dadd+0xa2>
 8000c5c:	4642      	mov	r2, r8
 8000c5e:	1a5c      	subs	r4, r3, r1
 8000c60:	1a87      	subs	r7, r0, r2
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	4192      	sbcs	r2, r2
 8000c66:	4252      	negs	r2, r2
 8000c68:	1abf      	subs	r7, r7, r2
 8000c6a:	023a      	lsls	r2, r7, #8
 8000c6c:	d53d      	bpl.n	8000cea <__aeabi_dadd+0x632>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	4643      	mov	r3, r8
 8000c76:	4249      	negs	r1, r1
 8000c78:	1a1f      	subs	r7, r3, r0
 8000c7a:	4655      	mov	r5, sl
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e595      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000c80:	077b      	lsls	r3, r7, #29
 8000c82:	08c9      	lsrs	r1, r1, #3
 8000c84:	430b      	orrs	r3, r1
 8000c86:	08f8      	lsrs	r0, r7, #3
 8000c88:	e643      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000c8a:	4644      	mov	r4, r8
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	430c      	orrs	r4, r1
 8000c90:	d130      	bne.n	8000cf4 <__aeabi_dadd+0x63c>
 8000c92:	0742      	lsls	r2, r0, #29
 8000c94:	4313      	orrs	r3, r2
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	e65c      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000c9a:	077b      	lsls	r3, r7, #29
 8000c9c:	08c9      	lsrs	r1, r1, #3
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	08f8      	lsrs	r0, r7, #3
 8000ca2:	e639      	b.n	8000918 <__aeabi_dadd+0x260>
 8000ca4:	185c      	adds	r4, r3, r1
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	419b      	sbcs	r3, r3
 8000caa:	4440      	add	r0, r8
 8000cac:	425b      	negs	r3, r3
 8000cae:	18c7      	adds	r7, r0, r3
 8000cb0:	023b      	lsls	r3, r7, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x5fe>
 8000cb4:	e625      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <__aeabi_dadd+0x674>)
 8000cb8:	2601      	movs	r6, #1
 8000cba:	401f      	ands	r7, r3
 8000cbc:	e621      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cbe:	0004      	movs	r4, r0
 8000cc0:	3a20      	subs	r2, #32
 8000cc2:	40d4      	lsrs	r4, r2
 8000cc4:	4662      	mov	r2, ip
 8000cc6:	2a20      	cmp	r2, #32
 8000cc8:	d004      	beq.n	8000cd4 <__aeabi_dadd+0x61c>
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	4666      	mov	r6, ip
 8000cce:	1b92      	subs	r2, r2, r6
 8000cd0:	4090      	lsls	r0, r2
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	4193      	sbcs	r3, r2
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	e67e      	b.n	80009da <__aeabi_dadd+0x322>
 8000cdc:	185c      	adds	r4, r3, r1
 8000cde:	428c      	cmp	r4, r1
 8000ce0:	4189      	sbcs	r1, r1
 8000ce2:	4440      	add	r0, r8
 8000ce4:	4249      	negs	r1, r1
 8000ce6:	1847      	adds	r7, r0, r1
 8000ce8:	e6dd      	b.n	8000aa6 <__aeabi_dadd+0x3ee>
 8000cea:	0023      	movs	r3, r4
 8000cec:	433b      	orrs	r3, r7
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x63a>
 8000cf0:	e6ad      	b.n	8000a4e <__aeabi_dadd+0x396>
 8000cf2:	e606      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cf4:	0744      	lsls	r4, r0, #29
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	2480      	movs	r4, #128	; 0x80
 8000cfa:	08c0      	lsrs	r0, r0, #3
 8000cfc:	0324      	lsls	r4, r4, #12
 8000cfe:	4220      	tst	r0, r4
 8000d00:	d008      	beq.n	8000d14 <__aeabi_dadd+0x65c>
 8000d02:	4642      	mov	r2, r8
 8000d04:	08d6      	lsrs	r6, r2, #3
 8000d06:	4226      	tst	r6, r4
 8000d08:	d104      	bne.n	8000d14 <__aeabi_dadd+0x65c>
 8000d0a:	4655      	mov	r5, sl
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	08cb      	lsrs	r3, r1, #3
 8000d10:	0751      	lsls	r1, r2, #29
 8000d12:	430b      	orrs	r3, r1
 8000d14:	0f5a      	lsrs	r2, r3, #29
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0752      	lsls	r2, r2, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	e619      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000d20:	2300      	movs	r3, #0
 8000d22:	4a01      	ldr	r2, [pc, #4]	; (8000d28 <__aeabi_dadd+0x670>)
 8000d24:	001f      	movs	r7, r3
 8000d26:	e55e      	b.n	80007e6 <__aeabi_dadd+0x12e>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	ff7fffff 	.word	0xff7fffff

08000d30 <__aeabi_ddiv>:
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	4657      	mov	r7, sl
 8000d34:	464e      	mov	r6, r9
 8000d36:	4645      	mov	r5, r8
 8000d38:	46de      	mov	lr, fp
 8000d3a:	b5e0      	push	{r5, r6, r7, lr}
 8000d3c:	4681      	mov	r9, r0
 8000d3e:	0005      	movs	r5, r0
 8000d40:	030c      	lsls	r4, r1, #12
 8000d42:	0048      	lsls	r0, r1, #1
 8000d44:	4692      	mov	sl, r2
 8000d46:	001f      	movs	r7, r3
 8000d48:	b085      	sub	sp, #20
 8000d4a:	0b24      	lsrs	r4, r4, #12
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	0fce      	lsrs	r6, r1, #31
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x26>
 8000d54:	e156      	b.n	8001004 <__aeabi_ddiv+0x2d4>
 8000d56:	4bd4      	ldr	r3, [pc, #848]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000d58:	4298      	cmp	r0, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0x2e>
 8000d5c:	e172      	b.n	8001044 <__aeabi_ddiv+0x314>
 8000d5e:	0f6b      	lsrs	r3, r5, #29
 8000d60:	00e4      	lsls	r4, r4, #3
 8000d62:	431c      	orrs	r4, r3
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	4323      	orrs	r3, r4
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4bcf      	ldr	r3, [pc, #828]	; (80010ac <__aeabi_ddiv+0x37c>)
 8000d6e:	00ed      	lsls	r5, r5, #3
 8000d70:	469b      	mov	fp, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	4699      	mov	r9, r3
 8000d76:	4483      	add	fp, r0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	033c      	lsls	r4, r7, #12
 8000d7c:	007b      	lsls	r3, r7, #1
 8000d7e:	4650      	mov	r0, sl
 8000d80:	0b24      	lsrs	r4, r4, #12
 8000d82:	0d5b      	lsrs	r3, r3, #21
 8000d84:	0fff      	lsrs	r7, r7, #31
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x5c>
 8000d8a:	e11f      	b.n	8000fcc <__aeabi_ddiv+0x29c>
 8000d8c:	4ac6      	ldr	r2, [pc, #792]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x64>
 8000d92:	e162      	b.n	800105a <__aeabi_ddiv+0x32a>
 8000d94:	49c5      	ldr	r1, [pc, #788]	; (80010ac <__aeabi_ddiv+0x37c>)
 8000d96:	0f42      	lsrs	r2, r0, #29
 8000d98:	468c      	mov	ip, r1
 8000d9a:	00e4      	lsls	r4, r4, #3
 8000d9c:	4659      	mov	r1, fp
 8000d9e:	4314      	orrs	r4, r2
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4463      	add	r3, ip
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	4314      	orrs	r4, r2
 8000daa:	469b      	mov	fp, r3
 8000dac:	00c2      	lsls	r2, r0, #3
 8000dae:	2000      	movs	r0, #0
 8000db0:	0033      	movs	r3, r6
 8000db2:	407b      	eors	r3, r7
 8000db4:	469a      	mov	sl, r3
 8000db6:	464b      	mov	r3, r9
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d827      	bhi.n	8000e0c <__aeabi_ddiv+0xdc>
 8000dbc:	49bc      	ldr	r1, [pc, #752]	; (80010b0 <__aeabi_ddiv+0x380>)
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	58cb      	ldr	r3, [r1, r3]
 8000dc2:	469f      	mov	pc, r3
 8000dc4:	46b2      	mov	sl, r6
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d016      	beq.n	8000dfa <__aeabi_ddiv+0xca>
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0xa2>
 8000dd0:	e28e      	b.n	80012f0 <__aeabi_ddiv+0x5c0>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_ddiv+0xa8>
 8000dd6:	e0d9      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2400      	movs	r4, #0
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4652      	mov	r2, sl
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07d2      	lsls	r2, r2, #31
 8000de6:	4313      	orrs	r3, r2
 8000de8:	0028      	movs	r0, r5
 8000dea:	0019      	movs	r1, r3
 8000dec:	b005      	add	sp, #20
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	4baa      	ldr	r3, [pc, #680]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000e00:	e7ed      	b.n	8000dde <__aeabi_ddiv+0xae>
 8000e02:	46ba      	mov	sl, r7
 8000e04:	46a0      	mov	r8, r4
 8000e06:	0015      	movs	r5, r2
 8000e08:	9000      	str	r0, [sp, #0]
 8000e0a:	e7dc      	b.n	8000dc6 <__aeabi_ddiv+0x96>
 8000e0c:	4544      	cmp	r4, r8
 8000e0e:	d200      	bcs.n	8000e12 <__aeabi_ddiv+0xe2>
 8000e10:	e1c7      	b.n	80011a2 <__aeabi_ddiv+0x472>
 8000e12:	d100      	bne.n	8000e16 <__aeabi_ddiv+0xe6>
 8000e14:	e1c2      	b.n	800119c <__aeabi_ddiv+0x46c>
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	002e      	movs	r6, r5
 8000e1e:	4640      	mov	r0, r8
 8000e20:	2500      	movs	r5, #0
 8000e22:	44e3      	add	fp, ip
 8000e24:	0223      	lsls	r3, r4, #8
 8000e26:	0e14      	lsrs	r4, r2, #24
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	0423      	lsls	r3, r4, #16
 8000e30:	0c1f      	lsrs	r7, r3, #16
 8000e32:	0212      	lsls	r2, r2, #8
 8000e34:	4649      	mov	r1, r9
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	9701      	str	r7, [sp, #4]
 8000e3a:	f7ff f9f5 	bl	8000228 <__aeabi_uidivmod>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	437a      	muls	r2, r7
 8000e42:	040b      	lsls	r3, r1, #16
 8000e44:	0c31      	lsrs	r1, r6, #16
 8000e46:	4680      	mov	r8, r0
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	d907      	bls.n	8000e5e <__aeabi_ddiv+0x12e>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	425b      	negs	r3, r3
 8000e52:	469c      	mov	ip, r3
 8000e54:	1909      	adds	r1, r1, r4
 8000e56:	44e0      	add	r8, ip
 8000e58:	428c      	cmp	r4, r1
 8000e5a:	d800      	bhi.n	8000e5e <__aeabi_ddiv+0x12e>
 8000e5c:	e207      	b.n	800126e <__aeabi_ddiv+0x53e>
 8000e5e:	1a88      	subs	r0, r1, r2
 8000e60:	4649      	mov	r1, r9
 8000e62:	f7ff f9e1 	bl	8000228 <__aeabi_uidivmod>
 8000e66:	0409      	lsls	r1, r1, #16
 8000e68:	468c      	mov	ip, r1
 8000e6a:	0431      	lsls	r1, r6, #16
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	0c09      	lsrs	r1, r1, #16
 8000e72:	4342      	muls	r2, r0
 8000e74:	0003      	movs	r3, r0
 8000e76:	4331      	orrs	r1, r6
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d904      	bls.n	8000e86 <__aeabi_ddiv+0x156>
 8000e7c:	1909      	adds	r1, r1, r4
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	428c      	cmp	r4, r1
 8000e82:	d800      	bhi.n	8000e86 <__aeabi_ddiv+0x156>
 8000e84:	e1ed      	b.n	8001262 <__aeabi_ddiv+0x532>
 8000e86:	1a88      	subs	r0, r1, r2
 8000e88:	4642      	mov	r2, r8
 8000e8a:	0412      	lsls	r2, r2, #16
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	4690      	mov	r8, r2
 8000e90:	4641      	mov	r1, r8
 8000e92:	9b00      	ldr	r3, [sp, #0]
 8000e94:	040e      	lsls	r6, r1, #16
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	001f      	movs	r7, r3
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	9b00      	ldr	r3, [sp, #0]
 8000e9e:	0c36      	lsrs	r6, r6, #16
 8000ea0:	041b      	lsls	r3, r3, #16
 8000ea2:	0c19      	lsrs	r1, r3, #16
 8000ea4:	000b      	movs	r3, r1
 8000ea6:	4373      	muls	r3, r6
 8000ea8:	0c12      	lsrs	r2, r2, #16
 8000eaa:	437e      	muls	r6, r7
 8000eac:	9103      	str	r1, [sp, #12]
 8000eae:	4351      	muls	r1, r2
 8000eb0:	437a      	muls	r2, r7
 8000eb2:	0c1f      	lsrs	r7, r3, #16
 8000eb4:	46bc      	mov	ip, r7
 8000eb6:	1876      	adds	r6, r6, r1
 8000eb8:	4466      	add	r6, ip
 8000eba:	42b1      	cmp	r1, r6
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_ddiv+0x196>
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	4462      	add	r2, ip
 8000ec6:	0c31      	lsrs	r1, r6, #16
 8000ec8:	188a      	adds	r2, r1, r2
 8000eca:	0431      	lsls	r1, r6, #16
 8000ecc:	041e      	lsls	r6, r3, #16
 8000ece:	0c36      	lsrs	r6, r6, #16
 8000ed0:	198e      	adds	r6, r1, r6
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d302      	bcc.n	8000edc <__aeabi_ddiv+0x1ac>
 8000ed6:	d112      	bne.n	8000efe <__aeabi_ddiv+0x1ce>
 8000ed8:	42b5      	cmp	r5, r6
 8000eda:	d210      	bcs.n	8000efe <__aeabi_ddiv+0x1ce>
 8000edc:	4643      	mov	r3, r8
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	4465      	add	r5, ip
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	429d      	cmp	r5, r3
 8000eea:	419b      	sbcs	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	191b      	adds	r3, r3, r4
 8000ef0:	18c0      	adds	r0, r0, r3
 8000ef2:	4284      	cmp	r4, r0
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x1c8>
 8000ef6:	e1a0      	b.n	800123a <__aeabi_ddiv+0x50a>
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x1cc>
 8000efa:	e19b      	b.n	8001234 <__aeabi_ddiv+0x504>
 8000efc:	4688      	mov	r8, r1
 8000efe:	1bae      	subs	r6, r5, r6
 8000f00:	42b5      	cmp	r5, r6
 8000f02:	41ad      	sbcs	r5, r5
 8000f04:	1a80      	subs	r0, r0, r2
 8000f06:	426d      	negs	r5, r5
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x1e0>
 8000f0e:	e1d5      	b.n	80012bc <__aeabi_ddiv+0x58c>
 8000f10:	4649      	mov	r1, r9
 8000f12:	f7ff f989 	bl	8000228 <__aeabi_uidivmod>
 8000f16:	9a01      	ldr	r2, [sp, #4]
 8000f18:	040b      	lsls	r3, r1, #16
 8000f1a:	4342      	muls	r2, r0
 8000f1c:	0c31      	lsrs	r1, r6, #16
 8000f1e:	0005      	movs	r5, r0
 8000f20:	4319      	orrs	r1, r3
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d900      	bls.n	8000f28 <__aeabi_ddiv+0x1f8>
 8000f26:	e16c      	b.n	8001202 <__aeabi_ddiv+0x4d2>
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	f7ff f97c 	bl	8000228 <__aeabi_uidivmod>
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	0436      	lsls	r6, r6, #16
 8000f34:	4342      	muls	r2, r0
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	0c36      	lsrs	r6, r6, #16
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	430e      	orrs	r6, r1
 8000f3e:	42b2      	cmp	r2, r6
 8000f40:	d900      	bls.n	8000f44 <__aeabi_ddiv+0x214>
 8000f42:	e153      	b.n	80011ec <__aeabi_ddiv+0x4bc>
 8000f44:	9803      	ldr	r0, [sp, #12]
 8000f46:	1ab6      	subs	r6, r6, r2
 8000f48:	0002      	movs	r2, r0
 8000f4a:	042d      	lsls	r5, r5, #16
 8000f4c:	431d      	orrs	r5, r3
 8000f4e:	9f02      	ldr	r7, [sp, #8]
 8000f50:	042b      	lsls	r3, r5, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	435a      	muls	r2, r3
 8000f56:	437b      	muls	r3, r7
 8000f58:	469c      	mov	ip, r3
 8000f5a:	0c29      	lsrs	r1, r5, #16
 8000f5c:	4348      	muls	r0, r1
 8000f5e:	0c13      	lsrs	r3, r2, #16
 8000f60:	4484      	add	ip, r0
 8000f62:	4463      	add	r3, ip
 8000f64:	4379      	muls	r1, r7
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d903      	bls.n	8000f72 <__aeabi_ddiv+0x242>
 8000f6a:	2080      	movs	r0, #128	; 0x80
 8000f6c:	0240      	lsls	r0, r0, #9
 8000f6e:	4684      	mov	ip, r0
 8000f70:	4461      	add	r1, ip
 8000f72:	0c18      	lsrs	r0, r3, #16
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	1841      	adds	r1, r0, r1
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x254>
 8000f82:	e0ff      	b.n	8001184 <__aeabi_ddiv+0x454>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x258>
 8000f86:	e0fa      	b.n	800117e <__aeabi_ddiv+0x44e>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <__aeabi_ddiv+0x384>)
 8000f8e:	445a      	add	r2, fp
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x266>
 8000f94:	e0aa      	b.n	80010ec <__aeabi_ddiv+0x3bc>
 8000f96:	076b      	lsls	r3, r5, #29
 8000f98:	d000      	beq.n	8000f9c <__aeabi_ddiv+0x26c>
 8000f9a:	e13d      	b.n	8001218 <__aeabi_ddiv+0x4e8>
 8000f9c:	08ed      	lsrs	r5, r5, #3
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	01db      	lsls	r3, r3, #7
 8000fa2:	d506      	bpl.n	8000fb2 <__aeabi_ddiv+0x282>
 8000fa4:	4642      	mov	r2, r8
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <__aeabi_ddiv+0x388>)
 8000fa8:	401a      	ands	r2, r3
 8000faa:	4690      	mov	r8, r2
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	00d2      	lsls	r2, r2, #3
 8000fb0:	445a      	add	r2, fp
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <__aeabi_ddiv+0x38c>)
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_ddiv+0x28a>
 8000fb8:	e71f      	b.n	8000dfa <__aeabi_ddiv+0xca>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	075b      	lsls	r3, r3, #29
 8000fbe:	431d      	orrs	r5, r3
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	0552      	lsls	r2, r2, #21
 8000fc4:	025c      	lsls	r4, r3, #9
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	0d53      	lsrs	r3, r2, #21
 8000fca:	e708      	b.n	8000dde <__aeabi_ddiv+0xae>
 8000fcc:	4652      	mov	r2, sl
 8000fce:	4322      	orrs	r2, r4
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_ddiv+0x2a4>
 8000fd2:	e07b      	b.n	80010cc <__aeabi_ddiv+0x39c>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x2aa>
 8000fd8:	e0fa      	b.n	80011d0 <__aeabi_ddiv+0x4a0>
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f001 f92c 	bl	8002238 <__clzsi2>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	3a0b      	subs	r2, #11
 8000fe4:	231d      	movs	r3, #29
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	3908      	subs	r1, #8
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	408c      	lsls	r4, r1
 8000ff2:	4314      	orrs	r4, r2
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	408a      	lsls	r2, r1
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <__aeabi_ddiv+0x390>)
 8000ffa:	4458      	add	r0, fp
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	4483      	add	fp, r0
 8001000:	2000      	movs	r0, #0
 8001002:	e6d5      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001004:	464b      	mov	r3, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d044      	beq.n	8001096 <__aeabi_ddiv+0x366>
 800100c:	2c00      	cmp	r4, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x2e2>
 8001010:	e0ce      	b.n	80011b0 <__aeabi_ddiv+0x480>
 8001012:	0020      	movs	r0, r4
 8001014:	f001 f910 	bl	8002238 <__clzsi2>
 8001018:	0001      	movs	r1, r0
 800101a:	0002      	movs	r2, r0
 800101c:	390b      	subs	r1, #11
 800101e:	231d      	movs	r3, #29
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	4649      	mov	r1, r9
 8001024:	0010      	movs	r0, r2
 8001026:	40d9      	lsrs	r1, r3
 8001028:	3808      	subs	r0, #8
 800102a:	4084      	lsls	r4, r0
 800102c:	000b      	movs	r3, r1
 800102e:	464d      	mov	r5, r9
 8001030:	4323      	orrs	r3, r4
 8001032:	4698      	mov	r8, r3
 8001034:	4085      	lsls	r5, r0
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <__aeabi_ddiv+0x394>)
 8001038:	1a83      	subs	r3, r0, r2
 800103a:	469b      	mov	fp, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4699      	mov	r9, r3
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	e69a      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 8001044:	464b      	mov	r3, r9
 8001046:	4323      	orrs	r3, r4
 8001048:	4698      	mov	r8, r3
 800104a:	d11d      	bne.n	8001088 <__aeabi_ddiv+0x358>
 800104c:	2308      	movs	r3, #8
 800104e:	4699      	mov	r9, r3
 8001050:	3b06      	subs	r3, #6
 8001052:	2500      	movs	r5, #0
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e68f      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 800105a:	4652      	mov	r2, sl
 800105c:	4322      	orrs	r2, r4
 800105e:	d109      	bne.n	8001074 <__aeabi_ddiv+0x344>
 8001060:	2302      	movs	r3, #2
 8001062:	4649      	mov	r1, r9
 8001064:	4319      	orrs	r1, r3
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <__aeabi_ddiv+0x398>)
 8001068:	4689      	mov	r9, r1
 800106a:	469c      	mov	ip, r3
 800106c:	2400      	movs	r4, #0
 800106e:	2002      	movs	r0, #2
 8001070:	44e3      	add	fp, ip
 8001072:	e69d      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001074:	2303      	movs	r3, #3
 8001076:	464a      	mov	r2, r9
 8001078:	431a      	orrs	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <__aeabi_ddiv+0x398>)
 800107c:	4691      	mov	r9, r2
 800107e:	469c      	mov	ip, r3
 8001080:	4652      	mov	r2, sl
 8001082:	2003      	movs	r0, #3
 8001084:	44e3      	add	fp, ip
 8001086:	e693      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001088:	230c      	movs	r3, #12
 800108a:	4699      	mov	r9, r3
 800108c:	3b09      	subs	r3, #9
 800108e:	46a0      	mov	r8, r4
 8001090:	4683      	mov	fp, r0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e671      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 8001096:	2304      	movs	r3, #4
 8001098:	4699      	mov	r9, r3
 800109a:	2300      	movs	r3, #0
 800109c:	469b      	mov	fp, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	2500      	movs	r5, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	e669      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	fffffc01 	.word	0xfffffc01
 80010b0:	08008974 	.word	0x08008974
 80010b4:	000003ff 	.word	0x000003ff
 80010b8:	feffffff 	.word	0xfeffffff
 80010bc:	000007fe 	.word	0x000007fe
 80010c0:	000003f3 	.word	0x000003f3
 80010c4:	fffffc0d 	.word	0xfffffc0d
 80010c8:	fffff801 	.word	0xfffff801
 80010cc:	4649      	mov	r1, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	4319      	orrs	r1, r3
 80010d2:	4689      	mov	r9, r1
 80010d4:	2400      	movs	r4, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e66a      	b.n	8000db0 <__aeabi_ddiv+0x80>
 80010da:	2300      	movs	r3, #0
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	469a      	mov	sl, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4b8a      	ldr	r3, [pc, #552]	; (800130c <__aeabi_ddiv+0x5dc>)
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	e67a      	b.n	8000dde <__aeabi_ddiv+0xae>
 80010e8:	2501      	movs	r5, #1
 80010ea:	426d      	negs	r5, r5
 80010ec:	2301      	movs	r3, #1
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	2b38      	cmp	r3, #56	; 0x38
 80010f2:	dd00      	ble.n	80010f6 <__aeabi_ddiv+0x3c6>
 80010f4:	e670      	b.n	8000dd8 <__aeabi_ddiv+0xa8>
 80010f6:	2b1f      	cmp	r3, #31
 80010f8:	dc00      	bgt.n	80010fc <__aeabi_ddiv+0x3cc>
 80010fa:	e0bf      	b.n	800127c <__aeabi_ddiv+0x54c>
 80010fc:	211f      	movs	r1, #31
 80010fe:	4249      	negs	r1, r1
 8001100:	1a8a      	subs	r2, r1, r2
 8001102:	4641      	mov	r1, r8
 8001104:	40d1      	lsrs	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	2b20      	cmp	r3, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_ddiv+0x3e6>
 800110c:	4641      	mov	r1, r8
 800110e:	4b80      	ldr	r3, [pc, #512]	; (8001310 <__aeabi_ddiv+0x5e0>)
 8001110:	445b      	add	r3, fp
 8001112:	4099      	lsls	r1, r3
 8001114:	430d      	orrs	r5, r1
 8001116:	1e6b      	subs	r3, r5, #1
 8001118:	419d      	sbcs	r5, r3
 800111a:	2307      	movs	r3, #7
 800111c:	432a      	orrs	r2, r5
 800111e:	001d      	movs	r5, r3
 8001120:	2400      	movs	r4, #0
 8001122:	4015      	ands	r5, r2
 8001124:	4213      	tst	r3, r2
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x3fa>
 8001128:	e0d4      	b.n	80012d4 <__aeabi_ddiv+0x5a4>
 800112a:	210f      	movs	r1, #15
 800112c:	2300      	movs	r3, #0
 800112e:	4011      	ands	r1, r2
 8001130:	2904      	cmp	r1, #4
 8001132:	d100      	bne.n	8001136 <__aeabi_ddiv+0x406>
 8001134:	e0cb      	b.n	80012ce <__aeabi_ddiv+0x59e>
 8001136:	1d11      	adds	r1, r2, #4
 8001138:	4291      	cmp	r1, r2
 800113a:	4192      	sbcs	r2, r2
 800113c:	4252      	negs	r2, r2
 800113e:	189b      	adds	r3, r3, r2
 8001140:	000a      	movs	r2, r1
 8001142:	0219      	lsls	r1, r3, #8
 8001144:	d400      	bmi.n	8001148 <__aeabi_ddiv+0x418>
 8001146:	e0c2      	b.n	80012ce <__aeabi_ddiv+0x59e>
 8001148:	2301      	movs	r3, #1
 800114a:	2400      	movs	r4, #0
 800114c:	2500      	movs	r5, #0
 800114e:	e646      	b.n	8000dde <__aeabi_ddiv+0xae>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	4641      	mov	r1, r8
 8001154:	031b      	lsls	r3, r3, #12
 8001156:	4219      	tst	r1, r3
 8001158:	d008      	beq.n	800116c <__aeabi_ddiv+0x43c>
 800115a:	421c      	tst	r4, r3
 800115c:	d106      	bne.n	800116c <__aeabi_ddiv+0x43c>
 800115e:	431c      	orrs	r4, r3
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	46ba      	mov	sl, r7
 8001164:	0015      	movs	r5, r2
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <__aeabi_ddiv+0x5dc>)
 8001168:	0b24      	lsrs	r4, r4, #12
 800116a:	e638      	b.n	8000dde <__aeabi_ddiv+0xae>
 800116c:	2480      	movs	r4, #128	; 0x80
 800116e:	4643      	mov	r3, r8
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	431c      	orrs	r4, r3
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	46b2      	mov	sl, r6
 8001178:	4b64      	ldr	r3, [pc, #400]	; (800130c <__aeabi_ddiv+0x5dc>)
 800117a:	0b24      	lsrs	r4, r4, #12
 800117c:	e62f      	b.n	8000dde <__aeabi_ddiv+0xae>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x454>
 8001182:	e703      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 8001184:	19a6      	adds	r6, r4, r6
 8001186:	1e68      	subs	r0, r5, #1
 8001188:	42a6      	cmp	r6, r4
 800118a:	d200      	bcs.n	800118e <__aeabi_ddiv+0x45e>
 800118c:	e08d      	b.n	80012aa <__aeabi_ddiv+0x57a>
 800118e:	428e      	cmp	r6, r1
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x464>
 8001192:	e0a3      	b.n	80012dc <__aeabi_ddiv+0x5ac>
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x468>
 8001196:	e0b3      	b.n	8001300 <__aeabi_ddiv+0x5d0>
 8001198:	0005      	movs	r5, r0
 800119a:	e6f5      	b.n	8000f88 <__aeabi_ddiv+0x258>
 800119c:	42aa      	cmp	r2, r5
 800119e:	d900      	bls.n	80011a2 <__aeabi_ddiv+0x472>
 80011a0:	e639      	b.n	8000e16 <__aeabi_ddiv+0xe6>
 80011a2:	4643      	mov	r3, r8
 80011a4:	07de      	lsls	r6, r3, #31
 80011a6:	0858      	lsrs	r0, r3, #1
 80011a8:	086b      	lsrs	r3, r5, #1
 80011aa:	431e      	orrs	r6, r3
 80011ac:	07ed      	lsls	r5, r5, #31
 80011ae:	e639      	b.n	8000e24 <__aeabi_ddiv+0xf4>
 80011b0:	4648      	mov	r0, r9
 80011b2:	f001 f841 	bl	8002238 <__clzsi2>
 80011b6:	0001      	movs	r1, r0
 80011b8:	0002      	movs	r2, r0
 80011ba:	3115      	adds	r1, #21
 80011bc:	3220      	adds	r2, #32
 80011be:	291c      	cmp	r1, #28
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_ddiv+0x494>
 80011c2:	e72c      	b.n	800101e <__aeabi_ddiv+0x2ee>
 80011c4:	464b      	mov	r3, r9
 80011c6:	3808      	subs	r0, #8
 80011c8:	4083      	lsls	r3, r0
 80011ca:	2500      	movs	r5, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	e732      	b.n	8001036 <__aeabi_ddiv+0x306>
 80011d0:	f001 f832 	bl	8002238 <__clzsi2>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	3215      	adds	r2, #21
 80011da:	3020      	adds	r0, #32
 80011dc:	2a1c      	cmp	r2, #28
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x4b2>
 80011e0:	e700      	b.n	8000fe4 <__aeabi_ddiv+0x2b4>
 80011e2:	4654      	mov	r4, sl
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	409c      	lsls	r4, r3
 80011ea:	e705      	b.n	8000ff8 <__aeabi_ddiv+0x2c8>
 80011ec:	1936      	adds	r6, r6, r4
 80011ee:	3b01      	subs	r3, #1
 80011f0:	42b4      	cmp	r4, r6
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x4c6>
 80011f4:	e6a6      	b.n	8000f44 <__aeabi_ddiv+0x214>
 80011f6:	42b2      	cmp	r2, r6
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x4cc>
 80011fa:	e6a3      	b.n	8000f44 <__aeabi_ddiv+0x214>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	1936      	adds	r6, r6, r4
 8001200:	e6a0      	b.n	8000f44 <__aeabi_ddiv+0x214>
 8001202:	1909      	adds	r1, r1, r4
 8001204:	3d01      	subs	r5, #1
 8001206:	428c      	cmp	r4, r1
 8001208:	d900      	bls.n	800120c <__aeabi_ddiv+0x4dc>
 800120a:	e68d      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 800120c:	428a      	cmp	r2, r1
 800120e:	d800      	bhi.n	8001212 <__aeabi_ddiv+0x4e2>
 8001210:	e68a      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 8001212:	1e85      	subs	r5, r0, #2
 8001214:	1909      	adds	r1, r1, r4
 8001216:	e687      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 8001218:	230f      	movs	r3, #15
 800121a:	402b      	ands	r3, r5
 800121c:	2b04      	cmp	r3, #4
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x4f2>
 8001220:	e6bc      	b.n	8000f9c <__aeabi_ddiv+0x26c>
 8001222:	2305      	movs	r3, #5
 8001224:	425b      	negs	r3, r3
 8001226:	42ab      	cmp	r3, r5
 8001228:	419b      	sbcs	r3, r3
 800122a:	3504      	adds	r5, #4
 800122c:	425b      	negs	r3, r3
 800122e:	08ed      	lsrs	r5, r5, #3
 8001230:	4498      	add	r8, r3
 8001232:	e6b4      	b.n	8000f9e <__aeabi_ddiv+0x26e>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x50a>
 8001238:	e660      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 800123a:	4282      	cmp	r2, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x518>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x512>
 8001240:	e65c      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x518>
 8001246:	e659      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64d      	b.n	8000efe <__aeabi_ddiv+0x1ce>
 8001262:	428a      	cmp	r2, r1
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x538>
 8001266:	e60e      	b.n	8000e86 <__aeabi_ddiv+0x156>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1909      	adds	r1, r1, r4
 800126c:	e60b      	b.n	8000e86 <__aeabi_ddiv+0x156>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x544>
 8001272:	e5f4      	b.n	8000e5e <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f0      	b.n	8000e5e <__aeabi_ddiv+0x12e>
 800127c:	4925      	ldr	r1, [pc, #148]	; (8001314 <__aeabi_ddiv+0x5e4>)
 800127e:	0028      	movs	r0, r5
 8001280:	4459      	add	r1, fp
 8001282:	408d      	lsls	r5, r1
 8001284:	4642      	mov	r2, r8
 8001286:	408a      	lsls	r2, r1
 8001288:	1e69      	subs	r1, r5, #1
 800128a:	418d      	sbcs	r5, r1
 800128c:	4641      	mov	r1, r8
 800128e:	40d8      	lsrs	r0, r3
 8001290:	40d9      	lsrs	r1, r3
 8001292:	4302      	orrs	r2, r0
 8001294:	432a      	orrs	r2, r5
 8001296:	000b      	movs	r3, r1
 8001298:	0751      	lsls	r1, r2, #29
 800129a:	d100      	bne.n	800129e <__aeabi_ddiv+0x56e>
 800129c:	e751      	b.n	8001142 <__aeabi_ddiv+0x412>
 800129e:	210f      	movs	r1, #15
 80012a0:	4011      	ands	r1, r2
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d000      	beq.n	80012a8 <__aeabi_ddiv+0x578>
 80012a6:	e746      	b.n	8001136 <__aeabi_ddiv+0x406>
 80012a8:	e74b      	b.n	8001142 <__aeabi_ddiv+0x412>
 80012aa:	0005      	movs	r5, r0
 80012ac:	428e      	cmp	r6, r1
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x582>
 80012b0:	e66a      	b.n	8000f88 <__aeabi_ddiv+0x258>
 80012b2:	9a00      	ldr	r2, [sp, #0]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d000      	beq.n	80012ba <__aeabi_ddiv+0x58a>
 80012b8:	e666      	b.n	8000f88 <__aeabi_ddiv+0x258>
 80012ba:	e667      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <__aeabi_ddiv+0x5e8>)
 80012be:	445a      	add	r2, fp
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x596>
 80012c4:	e710      	b.n	80010e8 <__aeabi_ddiv+0x3b8>
 80012c6:	2301      	movs	r3, #1
 80012c8:	2500      	movs	r5, #0
 80012ca:	4498      	add	r8, r3
 80012cc:	e667      	b.n	8000f9e <__aeabi_ddiv+0x26e>
 80012ce:	075d      	lsls	r5, r3, #29
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	0b1c      	lsrs	r4, r3, #12
 80012d4:	08d2      	lsrs	r2, r2, #3
 80012d6:	2300      	movs	r3, #0
 80012d8:	4315      	orrs	r5, r2
 80012da:	e580      	b.n	8000dde <__aeabi_ddiv+0xae>
 80012dc:	9800      	ldr	r0, [sp, #0]
 80012de:	3d02      	subs	r5, #2
 80012e0:	0042      	lsls	r2, r0, #1
 80012e2:	4282      	cmp	r2, r0
 80012e4:	41bf      	sbcs	r7, r7
 80012e6:	427f      	negs	r7, r7
 80012e8:	193c      	adds	r4, r7, r4
 80012ea:	1936      	adds	r6, r6, r4
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	e7dd      	b.n	80012ac <__aeabi_ddiv+0x57c>
 80012f0:	2480      	movs	r4, #128	; 0x80
 80012f2:	4643      	mov	r3, r8
 80012f4:	0324      	lsls	r4, r4, #12
 80012f6:	431c      	orrs	r4, r3
 80012f8:	0324      	lsls	r4, r4, #12
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <__aeabi_ddiv+0x5dc>)
 80012fc:	0b24      	lsrs	r4, r4, #12
 80012fe:	e56e      	b.n	8000dde <__aeabi_ddiv+0xae>
 8001300:	9a00      	ldr	r2, [sp, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3ea      	bcc.n	80012dc <__aeabi_ddiv+0x5ac>
 8001306:	0005      	movs	r5, r0
 8001308:	e7d3      	b.n	80012b2 <__aeabi_ddiv+0x582>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff
 8001310:	0000043e 	.word	0x0000043e
 8001314:	0000041e 	.word	0x0000041e
 8001318:	000003ff 	.word	0x000003ff

0800131c <__eqdf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	464e      	mov	r6, r9
 8001320:	4645      	mov	r5, r8
 8001322:	46de      	mov	lr, fp
 8001324:	4657      	mov	r7, sl
 8001326:	4690      	mov	r8, r2
 8001328:	b5e0      	push	{r5, r6, r7, lr}
 800132a:	0017      	movs	r7, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	0005      	movs	r5, r0
 8001332:	4684      	mov	ip, r0
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <__eqdf2+0x80>)
 8001336:	030e      	lsls	r6, r1, #12
 8001338:	004c      	lsls	r4, r1, #1
 800133a:	4691      	mov	r9, r2
 800133c:	005a      	lsls	r2, r3, #1
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	469b      	mov	fp, r3
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	4284      	cmp	r4, r0
 800134c:	d019      	beq.n	8001382 <__eqdf2+0x66>
 800134e:	4282      	cmp	r2, r0
 8001350:	d010      	beq.n	8001374 <__eqdf2+0x58>
 8001352:	2001      	movs	r0, #1
 8001354:	4294      	cmp	r4, r2
 8001356:	d10e      	bne.n	8001376 <__eqdf2+0x5a>
 8001358:	454e      	cmp	r6, r9
 800135a:	d10c      	bne.n	8001376 <__eqdf2+0x5a>
 800135c:	2001      	movs	r0, #1
 800135e:	45c4      	cmp	ip, r8
 8001360:	d109      	bne.n	8001376 <__eqdf2+0x5a>
 8001362:	4559      	cmp	r1, fp
 8001364:	d017      	beq.n	8001396 <__eqdf2+0x7a>
 8001366:	2c00      	cmp	r4, #0
 8001368:	d105      	bne.n	8001376 <__eqdf2+0x5a>
 800136a:	0030      	movs	r0, r6
 800136c:	4328      	orrs	r0, r5
 800136e:	1e43      	subs	r3, r0, #1
 8001370:	4198      	sbcs	r0, r3
 8001372:	e000      	b.n	8001376 <__eqdf2+0x5a>
 8001374:	2001      	movs	r0, #1
 8001376:	bcf0      	pop	{r4, r5, r6, r7}
 8001378:	46bb      	mov	fp, r7
 800137a:	46b2      	mov	sl, r6
 800137c:	46a9      	mov	r9, r5
 800137e:	46a0      	mov	r8, r4
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	0033      	movs	r3, r6
 8001384:	2001      	movs	r0, #1
 8001386:	432b      	orrs	r3, r5
 8001388:	d1f5      	bne.n	8001376 <__eqdf2+0x5a>
 800138a:	42a2      	cmp	r2, r4
 800138c:	d1f3      	bne.n	8001376 <__eqdf2+0x5a>
 800138e:	464b      	mov	r3, r9
 8001390:	433b      	orrs	r3, r7
 8001392:	d1f0      	bne.n	8001376 <__eqdf2+0x5a>
 8001394:	e7e2      	b.n	800135c <__eqdf2+0x40>
 8001396:	2000      	movs	r0, #0
 8001398:	e7ed      	b.n	8001376 <__eqdf2+0x5a>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__gedf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4647      	mov	r7, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	0016      	movs	r6, r2
 80013ac:	031b      	lsls	r3, r3, #12
 80013ae:	0b1b      	lsrs	r3, r3, #12
 80013b0:	4d2d      	ldr	r5, [pc, #180]	; (8001468 <__gedf2+0xc8>)
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	b580      	push	{r7, lr}
 80013b8:	0043      	lsls	r3, r0, #1
 80013ba:	030f      	lsls	r7, r1, #12
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d021      	beq.n	8001412 <__gedf2+0x72>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d013      	beq.n	80013fa <__gedf2+0x5a>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d122      	bne.n	800141c <__gedf2+0x7c>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <__gedf2+0x42>
 80013dc:	464d      	mov	r5, r9
 80013de:	432e      	orrs	r6, r5
 80013e0:	d022      	beq.n	8001428 <__gedf2+0x88>
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d010      	beq.n	8001408 <__gedf2+0x68>
 80013e6:	4281      	cmp	r1, r0
 80013e8:	d022      	beq.n	8001430 <__gedf2+0x90>
 80013ea:	2002      	movs	r0, #2
 80013ec:	3901      	subs	r1, #1
 80013ee:	4008      	ands	r0, r1
 80013f0:	3801      	subs	r0, #1
 80013f2:	bcc0      	pop	{r6, r7}
 80013f4:	46b9      	mov	r9, r7
 80013f6:	46b0      	mov	r8, r6
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	464d      	mov	r5, r9
 80013fc:	432e      	orrs	r6, r5
 80013fe:	d129      	bne.n	8001454 <__gedf2+0xb4>
 8001400:	2a00      	cmp	r2, #0
 8001402:	d1f0      	bne.n	80013e6 <__gedf2+0x46>
 8001404:	433c      	orrs	r4, r7
 8001406:	d1ee      	bne.n	80013e6 <__gedf2+0x46>
 8001408:	2800      	cmp	r0, #0
 800140a:	d1f2      	bne.n	80013f2 <__gedf2+0x52>
 800140c:	2001      	movs	r0, #1
 800140e:	4240      	negs	r0, r0
 8001410:	e7ef      	b.n	80013f2 <__gedf2+0x52>
 8001412:	003d      	movs	r5, r7
 8001414:	4325      	orrs	r5, r4
 8001416:	d11d      	bne.n	8001454 <__gedf2+0xb4>
 8001418:	4293      	cmp	r3, r2
 800141a:	d0ee      	beq.n	80013fa <__gedf2+0x5a>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e2      	bne.n	80013e6 <__gedf2+0x46>
 8001420:	464c      	mov	r4, r9
 8001422:	4326      	orrs	r6, r4
 8001424:	d1df      	bne.n	80013e6 <__gedf2+0x46>
 8001426:	e7e0      	b.n	80013ea <__gedf2+0x4a>
 8001428:	2000      	movs	r0, #0
 800142a:	2c00      	cmp	r4, #0
 800142c:	d0e1      	beq.n	80013f2 <__gedf2+0x52>
 800142e:	e7dc      	b.n	80013ea <__gedf2+0x4a>
 8001430:	429a      	cmp	r2, r3
 8001432:	dc0a      	bgt.n	800144a <__gedf2+0xaa>
 8001434:	dbe8      	blt.n	8001408 <__gedf2+0x68>
 8001436:	454f      	cmp	r7, r9
 8001438:	d8d7      	bhi.n	80013ea <__gedf2+0x4a>
 800143a:	d00e      	beq.n	800145a <__gedf2+0xba>
 800143c:	2000      	movs	r0, #0
 800143e:	454f      	cmp	r7, r9
 8001440:	d2d7      	bcs.n	80013f2 <__gedf2+0x52>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0e2      	beq.n	800140c <__gedf2+0x6c>
 8001446:	0008      	movs	r0, r1
 8001448:	e7d3      	b.n	80013f2 <__gedf2+0x52>
 800144a:	4243      	negs	r3, r0
 800144c:	4158      	adcs	r0, r3
 800144e:	0040      	lsls	r0, r0, #1
 8001450:	3801      	subs	r0, #1
 8001452:	e7ce      	b.n	80013f2 <__gedf2+0x52>
 8001454:	2002      	movs	r0, #2
 8001456:	4240      	negs	r0, r0
 8001458:	e7cb      	b.n	80013f2 <__gedf2+0x52>
 800145a:	45c4      	cmp	ip, r8
 800145c:	d8c5      	bhi.n	80013ea <__gedf2+0x4a>
 800145e:	2000      	movs	r0, #0
 8001460:	45c4      	cmp	ip, r8
 8001462:	d2c6      	bcs.n	80013f2 <__gedf2+0x52>
 8001464:	e7ed      	b.n	8001442 <__gedf2+0xa2>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4647      	mov	r7, r8
 8001470:	46ce      	mov	lr, r9
 8001472:	0004      	movs	r4, r0
 8001474:	0018      	movs	r0, r3
 8001476:	0016      	movs	r6, r2
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	0b1b      	lsrs	r3, r3, #12
 800147c:	4d2c      	ldr	r5, [pc, #176]	; (8001530 <__ledf2+0xc4>)
 800147e:	004a      	lsls	r2, r1, #1
 8001480:	4699      	mov	r9, r3
 8001482:	b580      	push	{r7, lr}
 8001484:	0043      	lsls	r3, r0, #1
 8001486:	030f      	lsls	r7, r1, #12
 8001488:	46a4      	mov	ip, r4
 800148a:	46b0      	mov	r8, r6
 800148c:	0b3f      	lsrs	r7, r7, #12
 800148e:	0d52      	lsrs	r2, r2, #21
 8001490:	0fc9      	lsrs	r1, r1, #31
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fc0      	lsrs	r0, r0, #31
 8001496:	42aa      	cmp	r2, r5
 8001498:	d00d      	beq.n	80014b6 <__ledf2+0x4a>
 800149a:	42ab      	cmp	r3, r5
 800149c:	d010      	beq.n	80014c0 <__ledf2+0x54>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d127      	bne.n	80014f2 <__ledf2+0x86>
 80014a2:	433c      	orrs	r4, r7
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <__ledf2+0x60>
 80014a8:	464d      	mov	r5, r9
 80014aa:	432e      	orrs	r6, r5
 80014ac:	d10e      	bne.n	80014cc <__ledf2+0x60>
 80014ae:	2000      	movs	r0, #0
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d015      	beq.n	80014e0 <__ledf2+0x74>
 80014b4:	e00e      	b.n	80014d4 <__ledf2+0x68>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d110      	bne.n	80014de <__ledf2+0x72>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d118      	bne.n	80014f2 <__ledf2+0x86>
 80014c0:	464d      	mov	r5, r9
 80014c2:	432e      	orrs	r6, r5
 80014c4:	d10b      	bne.n	80014de <__ledf2+0x72>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d102      	bne.n	80014d0 <__ledf2+0x64>
 80014ca:	433c      	orrs	r4, r7
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d00b      	beq.n	80014e8 <__ledf2+0x7c>
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d014      	beq.n	80014fe <__ledf2+0x92>
 80014d4:	2002      	movs	r0, #2
 80014d6:	3901      	subs	r1, #1
 80014d8:	4008      	ands	r0, r1
 80014da:	3801      	subs	r0, #1
 80014dc:	e000      	b.n	80014e0 <__ledf2+0x74>
 80014de:	2002      	movs	r0, #2
 80014e0:	bcc0      	pop	{r6, r7}
 80014e2:	46b9      	mov	r9, r7
 80014e4:	46b0      	mov	r8, r6
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f9      	bne.n	80014e0 <__ledf2+0x74>
 80014ec:	2001      	movs	r0, #1
 80014ee:	4240      	negs	r0, r0
 80014f0:	e7f6      	b.n	80014e0 <__ledf2+0x74>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ec      	bne.n	80014d0 <__ledf2+0x64>
 80014f6:	464c      	mov	r4, r9
 80014f8:	4326      	orrs	r6, r4
 80014fa:	d1e9      	bne.n	80014d0 <__ledf2+0x64>
 80014fc:	e7ea      	b.n	80014d4 <__ledf2+0x68>
 80014fe:	429a      	cmp	r2, r3
 8001500:	dd04      	ble.n	800150c <__ledf2+0xa0>
 8001502:	4243      	negs	r3, r0
 8001504:	4158      	adcs	r0, r3
 8001506:	0040      	lsls	r0, r0, #1
 8001508:	3801      	subs	r0, #1
 800150a:	e7e9      	b.n	80014e0 <__ledf2+0x74>
 800150c:	429a      	cmp	r2, r3
 800150e:	dbeb      	blt.n	80014e8 <__ledf2+0x7c>
 8001510:	454f      	cmp	r7, r9
 8001512:	d8df      	bhi.n	80014d4 <__ledf2+0x68>
 8001514:	d006      	beq.n	8001524 <__ledf2+0xb8>
 8001516:	2000      	movs	r0, #0
 8001518:	454f      	cmp	r7, r9
 800151a:	d2e1      	bcs.n	80014e0 <__ledf2+0x74>
 800151c:	2900      	cmp	r1, #0
 800151e:	d0e5      	beq.n	80014ec <__ledf2+0x80>
 8001520:	0008      	movs	r0, r1
 8001522:	e7dd      	b.n	80014e0 <__ledf2+0x74>
 8001524:	45c4      	cmp	ip, r8
 8001526:	d8d5      	bhi.n	80014d4 <__ledf2+0x68>
 8001528:	2000      	movs	r0, #0
 800152a:	45c4      	cmp	ip, r8
 800152c:	d2d8      	bcs.n	80014e0 <__ledf2+0x74>
 800152e:	e7f5      	b.n	800151c <__ledf2+0xb0>
 8001530:	000007ff 	.word	0x000007ff

08001534 <__aeabi_dmul>:
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	4645      	mov	r5, r8
 800153c:	46de      	mov	lr, fp
 800153e:	b5e0      	push	{r5, r6, r7, lr}
 8001540:	4698      	mov	r8, r3
 8001542:	030c      	lsls	r4, r1, #12
 8001544:	004b      	lsls	r3, r1, #1
 8001546:	0006      	movs	r6, r0
 8001548:	4692      	mov	sl, r2
 800154a:	b087      	sub	sp, #28
 800154c:	0b24      	lsrs	r4, r4, #12
 800154e:	0d5b      	lsrs	r3, r3, #21
 8001550:	0fcf      	lsrs	r7, r1, #31
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <__aeabi_dmul+0x24>
 8001556:	e15c      	b.n	8001812 <__aeabi_dmul+0x2de>
 8001558:	4ad9      	ldr	r2, [pc, #868]	; (80018c0 <__aeabi_dmul+0x38c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d100      	bne.n	8001560 <__aeabi_dmul+0x2c>
 800155e:	e175      	b.n	800184c <__aeabi_dmul+0x318>
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	00e4      	lsls	r4, r4, #3
 8001564:	4314      	orrs	r4, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	4314      	orrs	r4, r2
 800156c:	4ad5      	ldr	r2, [pc, #852]	; (80018c4 <__aeabi_dmul+0x390>)
 800156e:	00c5      	lsls	r5, r0, #3
 8001570:	4694      	mov	ip, r2
 8001572:	4463      	add	r3, ip
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	4699      	mov	r9, r3
 800157a:	469b      	mov	fp, r3
 800157c:	4643      	mov	r3, r8
 800157e:	4642      	mov	r2, r8
 8001580:	031e      	lsls	r6, r3, #12
 8001582:	0fd2      	lsrs	r2, r2, #31
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4650      	mov	r0, sl
 8001588:	4690      	mov	r8, r2
 800158a:	0b36      	lsrs	r6, r6, #12
 800158c:	0d5b      	lsrs	r3, r3, #21
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x5e>
 8001590:	e120      	b.n	80017d4 <__aeabi_dmul+0x2a0>
 8001592:	4acb      	ldr	r2, [pc, #812]	; (80018c0 <__aeabi_dmul+0x38c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x66>
 8001598:	e162      	b.n	8001860 <__aeabi_dmul+0x32c>
 800159a:	49ca      	ldr	r1, [pc, #808]	; (80018c4 <__aeabi_dmul+0x390>)
 800159c:	0f42      	lsrs	r2, r0, #29
 800159e:	468c      	mov	ip, r1
 80015a0:	9900      	ldr	r1, [sp, #0]
 80015a2:	4463      	add	r3, ip
 80015a4:	00f6      	lsls	r6, r6, #3
 80015a6:	468c      	mov	ip, r1
 80015a8:	4316      	orrs	r6, r2
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	449c      	add	ip, r3
 80015ae:	0412      	lsls	r2, r2, #16
 80015b0:	4663      	mov	r3, ip
 80015b2:	4316      	orrs	r6, r2
 80015b4:	00c2      	lsls	r2, r0, #3
 80015b6:	2000      	movs	r0, #0
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	9900      	ldr	r1, [sp, #0]
 80015bc:	4643      	mov	r3, r8
 80015be:	3101      	adds	r1, #1
 80015c0:	468c      	mov	ip, r1
 80015c2:	4649      	mov	r1, r9
 80015c4:	407b      	eors	r3, r7
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	290f      	cmp	r1, #15
 80015ca:	d826      	bhi.n	800161a <__aeabi_dmul+0xe6>
 80015cc:	4bbe      	ldr	r3, [pc, #760]	; (80018c8 <__aeabi_dmul+0x394>)
 80015ce:	0089      	lsls	r1, r1, #2
 80015d0:	5859      	ldr	r1, [r3, r1]
 80015d2:	468f      	mov	pc, r1
 80015d4:	4643      	mov	r3, r8
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	0034      	movs	r4, r6
 80015da:	0015      	movs	r5, r2
 80015dc:	4683      	mov	fp, r0
 80015de:	465b      	mov	r3, fp
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d016      	beq.n	8001612 <__aeabi_dmul+0xde>
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0xb6>
 80015e8:	e203      	b.n	80019f2 <__aeabi_dmul+0x4be>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dmul+0xbc>
 80015ee:	e0cd      	b.n	800178c <__aeabi_dmul+0x258>
 80015f0:	2200      	movs	r2, #0
 80015f2:	2400      	movs	r4, #0
 80015f4:	2500      	movs	r5, #0
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	0512      	lsls	r2, r2, #20
 80015fa:	4322      	orrs	r2, r4
 80015fc:	07db      	lsls	r3, r3, #31
 80015fe:	431a      	orrs	r2, r3
 8001600:	0028      	movs	r0, r5
 8001602:	0011      	movs	r1, r2
 8001604:	b007      	add	sp, #28
 8001606:	bcf0      	pop	{r4, r5, r6, r7}
 8001608:	46bb      	mov	fp, r7
 800160a:	46b2      	mov	sl, r6
 800160c:	46a9      	mov	r9, r5
 800160e:	46a0      	mov	r8, r4
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	2400      	movs	r4, #0
 8001614:	2500      	movs	r5, #0
 8001616:	4aaa      	ldr	r2, [pc, #680]	; (80018c0 <__aeabi_dmul+0x38c>)
 8001618:	e7ed      	b.n	80015f6 <__aeabi_dmul+0xc2>
 800161a:	0c28      	lsrs	r0, r5, #16
 800161c:	042d      	lsls	r5, r5, #16
 800161e:	0c2d      	lsrs	r5, r5, #16
 8001620:	002b      	movs	r3, r5
 8001622:	0c11      	lsrs	r1, r2, #16
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	0c12      	lsrs	r2, r2, #16
 8001628:	4353      	muls	r3, r2
 800162a:	4698      	mov	r8, r3
 800162c:	0013      	movs	r3, r2
 800162e:	002f      	movs	r7, r5
 8001630:	4343      	muls	r3, r0
 8001632:	4699      	mov	r9, r3
 8001634:	434f      	muls	r7, r1
 8001636:	444f      	add	r7, r9
 8001638:	46bb      	mov	fp, r7
 800163a:	4647      	mov	r7, r8
 800163c:	000b      	movs	r3, r1
 800163e:	0c3f      	lsrs	r7, r7, #16
 8001640:	46ba      	mov	sl, r7
 8001642:	4343      	muls	r3, r0
 8001644:	44da      	add	sl, fp
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	45d1      	cmp	r9, sl
 800164a:	d904      	bls.n	8001656 <__aeabi_dmul+0x122>
 800164c:	2780      	movs	r7, #128	; 0x80
 800164e:	027f      	lsls	r7, r7, #9
 8001650:	46b9      	mov	r9, r7
 8001652:	444b      	add	r3, r9
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	4653      	mov	r3, sl
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	469b      	mov	fp, r3
 800165c:	4653      	mov	r3, sl
 800165e:	041f      	lsls	r7, r3, #16
 8001660:	4643      	mov	r3, r8
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	4698      	mov	r8, r3
 8001668:	003b      	movs	r3, r7
 800166a:	4443      	add	r3, r8
 800166c:	9304      	str	r3, [sp, #16]
 800166e:	0c33      	lsrs	r3, r6, #16
 8001670:	0436      	lsls	r6, r6, #16
 8001672:	0c36      	lsrs	r6, r6, #16
 8001674:	4698      	mov	r8, r3
 8001676:	0033      	movs	r3, r6
 8001678:	4343      	muls	r3, r0
 800167a:	4699      	mov	r9, r3
 800167c:	4643      	mov	r3, r8
 800167e:	4343      	muls	r3, r0
 8001680:	002f      	movs	r7, r5
 8001682:	469a      	mov	sl, r3
 8001684:	4643      	mov	r3, r8
 8001686:	4377      	muls	r7, r6
 8001688:	435d      	muls	r5, r3
 800168a:	0c38      	lsrs	r0, r7, #16
 800168c:	444d      	add	r5, r9
 800168e:	1945      	adds	r5, r0, r5
 8001690:	45a9      	cmp	r9, r5
 8001692:	d903      	bls.n	800169c <__aeabi_dmul+0x168>
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	4699      	mov	r9, r3
 800169a:	44ca      	add	sl, r9
 800169c:	043f      	lsls	r7, r7, #16
 800169e:	0c28      	lsrs	r0, r5, #16
 80016a0:	0c3f      	lsrs	r7, r7, #16
 80016a2:	042d      	lsls	r5, r5, #16
 80016a4:	19ed      	adds	r5, r5, r7
 80016a6:	0c27      	lsrs	r7, r4, #16
 80016a8:	0424      	lsls	r4, r4, #16
 80016aa:	0c24      	lsrs	r4, r4, #16
 80016ac:	0003      	movs	r3, r0
 80016ae:	0020      	movs	r0, r4
 80016b0:	4350      	muls	r0, r2
 80016b2:	437a      	muls	r2, r7
 80016b4:	4691      	mov	r9, r2
 80016b6:	003a      	movs	r2, r7
 80016b8:	4453      	add	r3, sl
 80016ba:	9305      	str	r3, [sp, #20]
 80016bc:	0c03      	lsrs	r3, r0, #16
 80016be:	469a      	mov	sl, r3
 80016c0:	434a      	muls	r2, r1
 80016c2:	4361      	muls	r1, r4
 80016c4:	4449      	add	r1, r9
 80016c6:	4451      	add	r1, sl
 80016c8:	44ab      	add	fp, r5
 80016ca:	4589      	cmp	r9, r1
 80016cc:	d903      	bls.n	80016d6 <__aeabi_dmul+0x1a2>
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	4699      	mov	r9, r3
 80016d4:	444a      	add	r2, r9
 80016d6:	0400      	lsls	r0, r0, #16
 80016d8:	0c0b      	lsrs	r3, r1, #16
 80016da:	0c00      	lsrs	r0, r0, #16
 80016dc:	0409      	lsls	r1, r1, #16
 80016de:	1809      	adds	r1, r1, r0
 80016e0:	0020      	movs	r0, r4
 80016e2:	4699      	mov	r9, r3
 80016e4:	4643      	mov	r3, r8
 80016e6:	4370      	muls	r0, r6
 80016e8:	435c      	muls	r4, r3
 80016ea:	437e      	muls	r6, r7
 80016ec:	435f      	muls	r7, r3
 80016ee:	0c03      	lsrs	r3, r0, #16
 80016f0:	4698      	mov	r8, r3
 80016f2:	19a4      	adds	r4, r4, r6
 80016f4:	4444      	add	r4, r8
 80016f6:	444a      	add	r2, r9
 80016f8:	9703      	str	r7, [sp, #12]
 80016fa:	42a6      	cmp	r6, r4
 80016fc:	d904      	bls.n	8001708 <__aeabi_dmul+0x1d4>
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	4698      	mov	r8, r3
 8001704:	4447      	add	r7, r8
 8001706:	9703      	str	r7, [sp, #12]
 8001708:	0423      	lsls	r3, r4, #16
 800170a:	9e02      	ldr	r6, [sp, #8]
 800170c:	469a      	mov	sl, r3
 800170e:	9b05      	ldr	r3, [sp, #20]
 8001710:	445e      	add	r6, fp
 8001712:	4698      	mov	r8, r3
 8001714:	42ae      	cmp	r6, r5
 8001716:	41ad      	sbcs	r5, r5
 8001718:	1876      	adds	r6, r6, r1
 800171a:	428e      	cmp	r6, r1
 800171c:	4189      	sbcs	r1, r1
 800171e:	0400      	lsls	r0, r0, #16
 8001720:	0c00      	lsrs	r0, r0, #16
 8001722:	4450      	add	r0, sl
 8001724:	4440      	add	r0, r8
 8001726:	426d      	negs	r5, r5
 8001728:	1947      	adds	r7, r0, r5
 800172a:	46b8      	mov	r8, r7
 800172c:	4693      	mov	fp, r2
 800172e:	4249      	negs	r1, r1
 8001730:	4689      	mov	r9, r1
 8001732:	44c3      	add	fp, r8
 8001734:	44d9      	add	r9, fp
 8001736:	4298      	cmp	r0, r3
 8001738:	4180      	sbcs	r0, r0
 800173a:	45a8      	cmp	r8, r5
 800173c:	41ad      	sbcs	r5, r5
 800173e:	4593      	cmp	fp, r2
 8001740:	4192      	sbcs	r2, r2
 8001742:	4589      	cmp	r9, r1
 8001744:	4189      	sbcs	r1, r1
 8001746:	426d      	negs	r5, r5
 8001748:	4240      	negs	r0, r0
 800174a:	4328      	orrs	r0, r5
 800174c:	0c24      	lsrs	r4, r4, #16
 800174e:	4252      	negs	r2, r2
 8001750:	4249      	negs	r1, r1
 8001752:	430a      	orrs	r2, r1
 8001754:	9b03      	ldr	r3, [sp, #12]
 8001756:	1900      	adds	r0, r0, r4
 8001758:	1880      	adds	r0, r0, r2
 800175a:	18c7      	adds	r7, r0, r3
 800175c:	464b      	mov	r3, r9
 800175e:	0ddc      	lsrs	r4, r3, #23
 8001760:	9b04      	ldr	r3, [sp, #16]
 8001762:	0275      	lsls	r5, r6, #9
 8001764:	431d      	orrs	r5, r3
 8001766:	1e6a      	subs	r2, r5, #1
 8001768:	4195      	sbcs	r5, r2
 800176a:	464b      	mov	r3, r9
 800176c:	0df6      	lsrs	r6, r6, #23
 800176e:	027f      	lsls	r7, r7, #9
 8001770:	4335      	orrs	r5, r6
 8001772:	025a      	lsls	r2, r3, #9
 8001774:	433c      	orrs	r4, r7
 8001776:	4315      	orrs	r5, r2
 8001778:	01fb      	lsls	r3, r7, #7
 800177a:	d400      	bmi.n	800177e <__aeabi_dmul+0x24a>
 800177c:	e11c      	b.n	80019b8 <__aeabi_dmul+0x484>
 800177e:	2101      	movs	r1, #1
 8001780:	086a      	lsrs	r2, r5, #1
 8001782:	400d      	ands	r5, r1
 8001784:	4315      	orrs	r5, r2
 8001786:	07e2      	lsls	r2, r4, #31
 8001788:	4315      	orrs	r5, r2
 800178a:	0864      	lsrs	r4, r4, #1
 800178c:	494f      	ldr	r1, [pc, #316]	; (80018cc <__aeabi_dmul+0x398>)
 800178e:	4461      	add	r1, ip
 8001790:	2900      	cmp	r1, #0
 8001792:	dc00      	bgt.n	8001796 <__aeabi_dmul+0x262>
 8001794:	e0b0      	b.n	80018f8 <__aeabi_dmul+0x3c4>
 8001796:	076b      	lsls	r3, r5, #29
 8001798:	d009      	beq.n	80017ae <__aeabi_dmul+0x27a>
 800179a:	220f      	movs	r2, #15
 800179c:	402a      	ands	r2, r5
 800179e:	2a04      	cmp	r2, #4
 80017a0:	d005      	beq.n	80017ae <__aeabi_dmul+0x27a>
 80017a2:	1d2a      	adds	r2, r5, #4
 80017a4:	42aa      	cmp	r2, r5
 80017a6:	41ad      	sbcs	r5, r5
 80017a8:	426d      	negs	r5, r5
 80017aa:	1964      	adds	r4, r4, r5
 80017ac:	0015      	movs	r5, r2
 80017ae:	01e3      	lsls	r3, r4, #7
 80017b0:	d504      	bpl.n	80017bc <__aeabi_dmul+0x288>
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <__aeabi_dmul+0x39c>)
 80017b6:	00c9      	lsls	r1, r1, #3
 80017b8:	4014      	ands	r4, r2
 80017ba:	4461      	add	r1, ip
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <__aeabi_dmul+0x3a0>)
 80017be:	4291      	cmp	r1, r2
 80017c0:	dd00      	ble.n	80017c4 <__aeabi_dmul+0x290>
 80017c2:	e726      	b.n	8001612 <__aeabi_dmul+0xde>
 80017c4:	0762      	lsls	r2, r4, #29
 80017c6:	08ed      	lsrs	r5, r5, #3
 80017c8:	0264      	lsls	r4, r4, #9
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	4315      	orrs	r5, r2
 80017ce:	0b24      	lsrs	r4, r4, #12
 80017d0:	0d4a      	lsrs	r2, r1, #21
 80017d2:	e710      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80017d4:	4652      	mov	r2, sl
 80017d6:	4332      	orrs	r2, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x2a8>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x3a8>
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ae>
 80017e0:	e0dc      	b.n	800199c <__aeabi_dmul+0x468>
 80017e2:	0030      	movs	r0, r6
 80017e4:	f000 fd28 	bl	8002238 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	3a0b      	subs	r2, #11
 80017ec:	231d      	movs	r3, #29
 80017ee:	0001      	movs	r1, r0
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	4652      	mov	r2, sl
 80017f4:	3908      	subs	r1, #8
 80017f6:	40da      	lsrs	r2, r3
 80017f8:	408e      	lsls	r6, r1
 80017fa:	4316      	orrs	r6, r2
 80017fc:	4652      	mov	r2, sl
 80017fe:	408a      	lsls	r2, r1
 8001800:	9b00      	ldr	r3, [sp, #0]
 8001802:	4935      	ldr	r1, [pc, #212]	; (80018d8 <__aeabi_dmul+0x3a4>)
 8001804:	1a18      	subs	r0, r3, r0
 8001806:	0003      	movs	r3, r0
 8001808:	468c      	mov	ip, r1
 800180a:	4463      	add	r3, ip
 800180c:	2000      	movs	r0, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	e6d3      	b.n	80015ba <__aeabi_dmul+0x86>
 8001812:	0025      	movs	r5, r4
 8001814:	4305      	orrs	r5, r0
 8001816:	d04a      	beq.n	80018ae <__aeabi_dmul+0x37a>
 8001818:	2c00      	cmp	r4, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x2ea>
 800181c:	e0b0      	b.n	8001980 <__aeabi_dmul+0x44c>
 800181e:	0020      	movs	r0, r4
 8001820:	f000 fd0a 	bl	8002238 <__clzsi2>
 8001824:	0001      	movs	r1, r0
 8001826:	0002      	movs	r2, r0
 8001828:	390b      	subs	r1, #11
 800182a:	231d      	movs	r3, #29
 800182c:	0010      	movs	r0, r2
 800182e:	1a5b      	subs	r3, r3, r1
 8001830:	0031      	movs	r1, r6
 8001832:	0035      	movs	r5, r6
 8001834:	3808      	subs	r0, #8
 8001836:	4084      	lsls	r4, r0
 8001838:	40d9      	lsrs	r1, r3
 800183a:	4085      	lsls	r5, r0
 800183c:	430c      	orrs	r4, r1
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <__aeabi_dmul+0x3a4>)
 8001840:	1a83      	subs	r3, r0, r2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	4699      	mov	r9, r3
 8001848:	469b      	mov	fp, r3
 800184a:	e697      	b.n	800157c <__aeabi_dmul+0x48>
 800184c:	0005      	movs	r5, r0
 800184e:	4325      	orrs	r5, r4
 8001850:	d126      	bne.n	80018a0 <__aeabi_dmul+0x36c>
 8001852:	2208      	movs	r2, #8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2302      	movs	r3, #2
 8001858:	2400      	movs	r4, #0
 800185a:	4691      	mov	r9, r2
 800185c:	469b      	mov	fp, r3
 800185e:	e68d      	b.n	800157c <__aeabi_dmul+0x48>
 8001860:	4652      	mov	r2, sl
 8001862:	9b00      	ldr	r3, [sp, #0]
 8001864:	4332      	orrs	r2, r6
 8001866:	d110      	bne.n	800188a <__aeabi_dmul+0x356>
 8001868:	4915      	ldr	r1, [pc, #84]	; (80018c0 <__aeabi_dmul+0x38c>)
 800186a:	2600      	movs	r6, #0
 800186c:	468c      	mov	ip, r1
 800186e:	4463      	add	r3, ip
 8001870:	4649      	mov	r1, r9
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2302      	movs	r3, #2
 8001876:	4319      	orrs	r1, r3
 8001878:	4689      	mov	r9, r1
 800187a:	2002      	movs	r0, #2
 800187c:	e69d      	b.n	80015ba <__aeabi_dmul+0x86>
 800187e:	465b      	mov	r3, fp
 8001880:	9701      	str	r7, [sp, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d000      	beq.n	8001888 <__aeabi_dmul+0x354>
 8001886:	e6ad      	b.n	80015e4 <__aeabi_dmul+0xb0>
 8001888:	e6c3      	b.n	8001612 <__aeabi_dmul+0xde>
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <__aeabi_dmul+0x38c>)
 800188c:	2003      	movs	r0, #3
 800188e:	4694      	mov	ip, r2
 8001890:	4463      	add	r3, ip
 8001892:	464a      	mov	r2, r9
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2303      	movs	r3, #3
 8001898:	431a      	orrs	r2, r3
 800189a:	4691      	mov	r9, r2
 800189c:	4652      	mov	r2, sl
 800189e:	e68c      	b.n	80015ba <__aeabi_dmul+0x86>
 80018a0:	220c      	movs	r2, #12
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2303      	movs	r3, #3
 80018a6:	0005      	movs	r5, r0
 80018a8:	4691      	mov	r9, r2
 80018aa:	469b      	mov	fp, r3
 80018ac:	e666      	b.n	800157c <__aeabi_dmul+0x48>
 80018ae:	2304      	movs	r3, #4
 80018b0:	4699      	mov	r9, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	2400      	movs	r4, #0
 80018ba:	469b      	mov	fp, r3
 80018bc:	e65e      	b.n	800157c <__aeabi_dmul+0x48>
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	000007ff 	.word	0x000007ff
 80018c4:	fffffc01 	.word	0xfffffc01
 80018c8:	080089b4 	.word	0x080089b4
 80018cc:	000003ff 	.word	0x000003ff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	000007fe 	.word	0x000007fe
 80018d8:	fffffc0d 	.word	0xfffffc0d
 80018dc:	4649      	mov	r1, r9
 80018de:	2301      	movs	r3, #1
 80018e0:	4319      	orrs	r1, r3
 80018e2:	4689      	mov	r9, r1
 80018e4:	2600      	movs	r6, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	e667      	b.n	80015ba <__aeabi_dmul+0x86>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2480      	movs	r4, #128	; 0x80
 80018ee:	2500      	movs	r5, #0
 80018f0:	4a43      	ldr	r2, [pc, #268]	; (8001a00 <__aeabi_dmul+0x4cc>)
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	e67e      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80018f8:	2001      	movs	r0, #1
 80018fa:	1a40      	subs	r0, r0, r1
 80018fc:	2838      	cmp	r0, #56	; 0x38
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dmul+0x3ce>
 8001900:	e676      	b.n	80015f0 <__aeabi_dmul+0xbc>
 8001902:	281f      	cmp	r0, #31
 8001904:	dd5b      	ble.n	80019be <__aeabi_dmul+0x48a>
 8001906:	221f      	movs	r2, #31
 8001908:	0023      	movs	r3, r4
 800190a:	4252      	negs	r2, r2
 800190c:	1a51      	subs	r1, r2, r1
 800190e:	40cb      	lsrs	r3, r1
 8001910:	0019      	movs	r1, r3
 8001912:	2820      	cmp	r0, #32
 8001914:	d003      	beq.n	800191e <__aeabi_dmul+0x3ea>
 8001916:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <__aeabi_dmul+0x4d0>)
 8001918:	4462      	add	r2, ip
 800191a:	4094      	lsls	r4, r2
 800191c:	4325      	orrs	r5, r4
 800191e:	1e6a      	subs	r2, r5, #1
 8001920:	4195      	sbcs	r5, r2
 8001922:	002a      	movs	r2, r5
 8001924:	430a      	orrs	r2, r1
 8001926:	2107      	movs	r1, #7
 8001928:	000d      	movs	r5, r1
 800192a:	2400      	movs	r4, #0
 800192c:	4015      	ands	r5, r2
 800192e:	4211      	tst	r1, r2
 8001930:	d05b      	beq.n	80019ea <__aeabi_dmul+0x4b6>
 8001932:	210f      	movs	r1, #15
 8001934:	2400      	movs	r4, #0
 8001936:	4011      	ands	r1, r2
 8001938:	2904      	cmp	r1, #4
 800193a:	d053      	beq.n	80019e4 <__aeabi_dmul+0x4b0>
 800193c:	1d11      	adds	r1, r2, #4
 800193e:	4291      	cmp	r1, r2
 8001940:	4192      	sbcs	r2, r2
 8001942:	4252      	negs	r2, r2
 8001944:	18a4      	adds	r4, r4, r2
 8001946:	000a      	movs	r2, r1
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d54b      	bpl.n	80019e4 <__aeabi_dmul+0x4b0>
 800194c:	2201      	movs	r2, #1
 800194e:	2400      	movs	r4, #0
 8001950:	2500      	movs	r5, #0
 8001952:	e650      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	031b      	lsls	r3, r3, #12
 8001958:	421c      	tst	r4, r3
 800195a:	d009      	beq.n	8001970 <__aeabi_dmul+0x43c>
 800195c:	421e      	tst	r6, r3
 800195e:	d107      	bne.n	8001970 <__aeabi_dmul+0x43c>
 8001960:	4333      	orrs	r3, r6
 8001962:	031c      	lsls	r4, r3, #12
 8001964:	4643      	mov	r3, r8
 8001966:	0015      	movs	r5, r2
 8001968:	0b24      	lsrs	r4, r4, #12
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <__aeabi_dmul+0x4cc>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	e642      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0312      	lsls	r2, r2, #12
 8001974:	4314      	orrs	r4, r2
 8001976:	0324      	lsls	r4, r4, #12
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <__aeabi_dmul+0x4cc>)
 800197a:	0b24      	lsrs	r4, r4, #12
 800197c:	9701      	str	r7, [sp, #4]
 800197e:	e63a      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001980:	f000 fc5a 	bl	8002238 <__clzsi2>
 8001984:	0001      	movs	r1, r0
 8001986:	0002      	movs	r2, r0
 8001988:	3115      	adds	r1, #21
 800198a:	3220      	adds	r2, #32
 800198c:	291c      	cmp	r1, #28
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dmul+0x45e>
 8001990:	e74b      	b.n	800182a <__aeabi_dmul+0x2f6>
 8001992:	0034      	movs	r4, r6
 8001994:	3808      	subs	r0, #8
 8001996:	2500      	movs	r5, #0
 8001998:	4084      	lsls	r4, r0
 800199a:	e750      	b.n	800183e <__aeabi_dmul+0x30a>
 800199c:	f000 fc4c 	bl	8002238 <__clzsi2>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	3215      	adds	r2, #21
 80019a6:	3020      	adds	r0, #32
 80019a8:	2a1c      	cmp	r2, #28
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dmul+0x47a>
 80019ac:	e71e      	b.n	80017ec <__aeabi_dmul+0x2b8>
 80019ae:	4656      	mov	r6, sl
 80019b0:	3b08      	subs	r3, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	409e      	lsls	r6, r3
 80019b6:	e723      	b.n	8001800 <__aeabi_dmul+0x2cc>
 80019b8:	9b00      	ldr	r3, [sp, #0]
 80019ba:	469c      	mov	ip, r3
 80019bc:	e6e6      	b.n	800178c <__aeabi_dmul+0x258>
 80019be:	4912      	ldr	r1, [pc, #72]	; (8001a08 <__aeabi_dmul+0x4d4>)
 80019c0:	0022      	movs	r2, r4
 80019c2:	4461      	add	r1, ip
 80019c4:	002e      	movs	r6, r5
 80019c6:	408d      	lsls	r5, r1
 80019c8:	408a      	lsls	r2, r1
 80019ca:	40c6      	lsrs	r6, r0
 80019cc:	1e69      	subs	r1, r5, #1
 80019ce:	418d      	sbcs	r5, r1
 80019d0:	4332      	orrs	r2, r6
 80019d2:	432a      	orrs	r2, r5
 80019d4:	40c4      	lsrs	r4, r0
 80019d6:	0753      	lsls	r3, r2, #29
 80019d8:	d0b6      	beq.n	8001948 <__aeabi_dmul+0x414>
 80019da:	210f      	movs	r1, #15
 80019dc:	4011      	ands	r1, r2
 80019de:	2904      	cmp	r1, #4
 80019e0:	d1ac      	bne.n	800193c <__aeabi_dmul+0x408>
 80019e2:	e7b1      	b.n	8001948 <__aeabi_dmul+0x414>
 80019e4:	0765      	lsls	r5, r4, #29
 80019e6:	0264      	lsls	r4, r4, #9
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	08d2      	lsrs	r2, r2, #3
 80019ec:	4315      	orrs	r5, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	e601      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	0312      	lsls	r2, r2, #12
 80019f6:	4314      	orrs	r4, r2
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	4a01      	ldr	r2, [pc, #4]	; (8001a00 <__aeabi_dmul+0x4cc>)
 80019fc:	0b24      	lsrs	r4, r4, #12
 80019fe:	e5fa      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	0000043e 	.word	0x0000043e
 8001a08:	0000041e 	.word	0x0000041e

08001a0c <__aeabi_dsub>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	4657      	mov	r7, sl
 8001a10:	464e      	mov	r6, r9
 8001a12:	4645      	mov	r5, r8
 8001a14:	46de      	mov	lr, fp
 8001a16:	b5e0      	push	{r5, r6, r7, lr}
 8001a18:	001e      	movs	r6, r3
 8001a1a:	0017      	movs	r7, r2
 8001a1c:	004a      	lsls	r2, r1, #1
 8001a1e:	030b      	lsls	r3, r1, #12
 8001a20:	0d52      	lsrs	r2, r2, #21
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	4690      	mov	r8, r2
 8001a26:	0f42      	lsrs	r2, r0, #29
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	0fcd      	lsrs	r5, r1, #31
 8001a2c:	4ccd      	ldr	r4, [pc, #820]	; (8001d64 <__aeabi_dsub+0x358>)
 8001a2e:	0331      	lsls	r1, r6, #12
 8001a30:	00c3      	lsls	r3, r0, #3
 8001a32:	4694      	mov	ip, r2
 8001a34:	0070      	lsls	r0, r6, #1
 8001a36:	0f7a      	lsrs	r2, r7, #29
 8001a38:	0a49      	lsrs	r1, r1, #9
 8001a3a:	00ff      	lsls	r7, r7, #3
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	46b9      	mov	r9, r7
 8001a40:	0d40      	lsrs	r0, r0, #21
 8001a42:	0ff6      	lsrs	r6, r6, #31
 8001a44:	4311      	orrs	r1, r2
 8001a46:	42a0      	cmp	r0, r4
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x40>
 8001a4a:	e0b1      	b.n	8001bb0 <__aeabi_dsub+0x1a4>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4056      	eors	r6, r2
 8001a50:	46b3      	mov	fp, r6
 8001a52:	42b5      	cmp	r5, r6
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x4c>
 8001a56:	e088      	b.n	8001b6a <__aeabi_dsub+0x15e>
 8001a58:	4642      	mov	r2, r8
 8001a5a:	1a12      	subs	r2, r2, r0
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	dc00      	bgt.n	8001a62 <__aeabi_dsub+0x56>
 8001a60:	e0ae      	b.n	8001bc0 <__aeabi_dsub+0x1b4>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x5c>
 8001a66:	e0c1      	b.n	8001bec <__aeabi_dsub+0x1e0>
 8001a68:	48be      	ldr	r0, [pc, #760]	; (8001d64 <__aeabi_dsub+0x358>)
 8001a6a:	4580      	cmp	r8, r0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x64>
 8001a6e:	e151      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	0400      	lsls	r0, r0, #16
 8001a74:	4301      	orrs	r1, r0
 8001a76:	2a38      	cmp	r2, #56	; 0x38
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0x70>
 8001a7a:	e17b      	b.n	8001d74 <__aeabi_dsub+0x368>
 8001a7c:	2a1f      	cmp	r2, #31
 8001a7e:	dd00      	ble.n	8001a82 <__aeabi_dsub+0x76>
 8001a80:	e1ee      	b.n	8001e60 <__aeabi_dsub+0x454>
 8001a82:	2020      	movs	r0, #32
 8001a84:	003e      	movs	r6, r7
 8001a86:	1a80      	subs	r0, r0, r2
 8001a88:	000c      	movs	r4, r1
 8001a8a:	40d6      	lsrs	r6, r2
 8001a8c:	40d1      	lsrs	r1, r2
 8001a8e:	4087      	lsls	r7, r0
 8001a90:	4662      	mov	r2, ip
 8001a92:	4084      	lsls	r4, r0
 8001a94:	1a52      	subs	r2, r2, r1
 8001a96:	1e78      	subs	r0, r7, #1
 8001a98:	4187      	sbcs	r7, r0
 8001a9a:	4694      	mov	ip, r2
 8001a9c:	4334      	orrs	r4, r6
 8001a9e:	4327      	orrs	r7, r4
 8001aa0:	1bdc      	subs	r4, r3, r7
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	419b      	sbcs	r3, r3
 8001aa6:	4662      	mov	r2, ip
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4699      	mov	r9, r3
 8001aae:	464b      	mov	r3, r9
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dsub+0xaa>
 8001ab4:	e118      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	0258      	lsls	r0, r3, #9
 8001aba:	0a43      	lsrs	r3, r0, #9
 8001abc:	4699      	mov	r9, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0xba>
 8001ac4:	e137      	b.n	8001d36 <__aeabi_dsub+0x32a>
 8001ac6:	4648      	mov	r0, r9
 8001ac8:	f000 fbb6 	bl	8002238 <__clzsi2>
 8001acc:	0001      	movs	r1, r0
 8001ace:	3908      	subs	r1, #8
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	0022      	movs	r2, r4
 8001ad4:	4648      	mov	r0, r9
 8001ad6:	1a5b      	subs	r3, r3, r1
 8001ad8:	40da      	lsrs	r2, r3
 8001ada:	4088      	lsls	r0, r1
 8001adc:	408c      	lsls	r4, r1
 8001ade:	4643      	mov	r3, r8
 8001ae0:	4310      	orrs	r0, r2
 8001ae2:	4588      	cmp	r8, r1
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_dsub+0xdc>
 8001ae6:	e136      	b.n	8001d56 <__aeabi_dsub+0x34a>
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	1c4b      	adds	r3, r1, #1
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_dsub+0xe6>
 8001af0:	e0ea      	b.n	8001cc8 <__aeabi_dsub+0x2bc>
 8001af2:	2220      	movs	r2, #32
 8001af4:	0026      	movs	r6, r4
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	0001      	movs	r1, r0
 8001afa:	4094      	lsls	r4, r2
 8001afc:	40de      	lsrs	r6, r3
 8001afe:	40d8      	lsrs	r0, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	4091      	lsls	r1, r2
 8001b04:	1e62      	subs	r2, r4, #1
 8001b06:	4194      	sbcs	r4, r2
 8001b08:	4681      	mov	r9, r0
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	4331      	orrs	r1, r6
 8001b0e:	430c      	orrs	r4, r1
 8001b10:	0763      	lsls	r3, r4, #29
 8001b12:	d009      	beq.n	8001b28 <__aeabi_dsub+0x11c>
 8001b14:	230f      	movs	r3, #15
 8001b16:	4023      	ands	r3, r4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d005      	beq.n	8001b28 <__aeabi_dsub+0x11c>
 8001b1c:	1d23      	adds	r3, r4, #4
 8001b1e:	42a3      	cmp	r3, r4
 8001b20:	41a4      	sbcs	r4, r4
 8001b22:	4264      	negs	r4, r4
 8001b24:	44a1      	add	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464b      	mov	r3, r9
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0x124>
 8001b2e:	e0de      	b.n	8001cee <__aeabi_dsub+0x2e2>
 8001b30:	4641      	mov	r1, r8
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <__aeabi_dsub+0x358>)
 8001b34:	3101      	adds	r1, #1
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x130>
 8001b3a:	e0e7      	b.n	8001d0c <__aeabi_dsub+0x300>
 8001b3c:	464b      	mov	r3, r9
 8001b3e:	488a      	ldr	r0, [pc, #552]	; (8001d68 <__aeabi_dsub+0x35c>)
 8001b40:	08e4      	lsrs	r4, r4, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	0018      	movs	r0, r3
 8001b46:	0549      	lsls	r1, r1, #21
 8001b48:	075b      	lsls	r3, r3, #29
 8001b4a:	0240      	lsls	r0, r0, #9
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	0d4a      	lsrs	r2, r1, #21
 8001b50:	0b04      	lsrs	r4, r0, #12
 8001b52:	0512      	lsls	r2, r2, #20
 8001b54:	07ed      	lsls	r5, r5, #31
 8001b56:	4322      	orrs	r2, r4
 8001b58:	432a      	orrs	r2, r5
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b60:	46bb      	mov	fp, r7
 8001b62:	46b2      	mov	sl, r6
 8001b64:	46a9      	mov	r9, r5
 8001b66:	46a0      	mov	r8, r4
 8001b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	1a12      	subs	r2, r2, r0
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	dd52      	ble.n	8001c18 <__aeabi_dsub+0x20c>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x16c>
 8001b76:	e09c      	b.n	8001cb2 <__aeabi_dsub+0x2a6>
 8001b78:	45a0      	cmp	r8, r4
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x172>
 8001b7c:	e0ca      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001b7e:	2080      	movs	r0, #128	; 0x80
 8001b80:	0400      	lsls	r0, r0, #16
 8001b82:	4301      	orrs	r1, r0
 8001b84:	2a38      	cmp	r2, #56	; 0x38
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dsub+0x17e>
 8001b88:	e149      	b.n	8001e1e <__aeabi_dsub+0x412>
 8001b8a:	2a1f      	cmp	r2, #31
 8001b8c:	dc00      	bgt.n	8001b90 <__aeabi_dsub+0x184>
 8001b8e:	e197      	b.n	8001ec0 <__aeabi_dsub+0x4b4>
 8001b90:	0010      	movs	r0, r2
 8001b92:	000e      	movs	r6, r1
 8001b94:	3820      	subs	r0, #32
 8001b96:	40c6      	lsrs	r6, r0
 8001b98:	2a20      	cmp	r2, #32
 8001b9a:	d004      	beq.n	8001ba6 <__aeabi_dsub+0x19a>
 8001b9c:	2040      	movs	r0, #64	; 0x40
 8001b9e:	1a82      	subs	r2, r0, r2
 8001ba0:	4091      	lsls	r1, r2
 8001ba2:	430f      	orrs	r7, r1
 8001ba4:	46b9      	mov	r9, r7
 8001ba6:	464c      	mov	r4, r9
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4334      	orrs	r4, r6
 8001bae:	e13a      	b.n	8001e26 <__aeabi_dsub+0x41a>
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	433a      	orrs	r2, r7
 8001bb4:	d028      	beq.n	8001c08 <__aeabi_dsub+0x1fc>
 8001bb6:	46b3      	mov	fp, r6
 8001bb8:	42b5      	cmp	r5, r6
 8001bba:	d02b      	beq.n	8001c14 <__aeabi_dsub+0x208>
 8001bbc:	4a6b      	ldr	r2, [pc, #428]	; (8001d6c <__aeabi_dsub+0x360>)
 8001bbe:	4442      	add	r2, r8
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	d05d      	beq.n	8001c80 <__aeabi_dsub+0x274>
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	4644      	mov	r4, r8
 8001bc8:	1a82      	subs	r2, r0, r2
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x1c4>
 8001bce:	e0f5      	b.n	8001dbc <__aeabi_dsub+0x3b0>
 8001bd0:	4665      	mov	r5, ip
 8001bd2:	431d      	orrs	r5, r3
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x1cc>
 8001bd6:	e19c      	b.n	8001f12 <__aeabi_dsub+0x506>
 8001bd8:	1e55      	subs	r5, r2, #1
 8001bda:	2a01      	cmp	r2, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x1d4>
 8001bde:	e1fb      	b.n	8001fd8 <__aeabi_dsub+0x5cc>
 8001be0:	4c60      	ldr	r4, [pc, #384]	; (8001d64 <__aeabi_dsub+0x358>)
 8001be2:	42a2      	cmp	r2, r4
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x1dc>
 8001be6:	e1bd      	b.n	8001f64 <__aeabi_dsub+0x558>
 8001be8:	002a      	movs	r2, r5
 8001bea:	e0f0      	b.n	8001dce <__aeabi_dsub+0x3c2>
 8001bec:	0008      	movs	r0, r1
 8001bee:	4338      	orrs	r0, r7
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x1e8>
 8001bf2:	e0c3      	b.n	8001d7c <__aeabi_dsub+0x370>
 8001bf4:	1e50      	subs	r0, r2, #1
 8001bf6:	2a01      	cmp	r2, #1
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1f0>
 8001bfa:	e1a8      	b.n	8001f4e <__aeabi_dsub+0x542>
 8001bfc:	4c59      	ldr	r4, [pc, #356]	; (8001d64 <__aeabi_dsub+0x358>)
 8001bfe:	42a2      	cmp	r2, r4
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1f8>
 8001c02:	e087      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001c04:	0002      	movs	r2, r0
 8001c06:	e736      	b.n	8001a76 <__aeabi_dsub+0x6a>
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4056      	eors	r6, r2
 8001c0c:	46b3      	mov	fp, r6
 8001c0e:	42b5      	cmp	r5, r6
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x208>
 8001c12:	e721      	b.n	8001a58 <__aeabi_dsub+0x4c>
 8001c14:	4a55      	ldr	r2, [pc, #340]	; (8001d6c <__aeabi_dsub+0x360>)
 8001c16:	4442      	add	r2, r8
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x212>
 8001c1c:	e0b5      	b.n	8001d8a <__aeabi_dsub+0x37e>
 8001c1e:	4642      	mov	r2, r8
 8001c20:	4644      	mov	r4, r8
 8001c22:	1a82      	subs	r2, r0, r2
 8001c24:	2c00      	cmp	r4, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x21e>
 8001c28:	e138      	b.n	8001e9c <__aeabi_dsub+0x490>
 8001c2a:	4e4e      	ldr	r6, [pc, #312]	; (8001d64 <__aeabi_dsub+0x358>)
 8001c2c:	42b0      	cmp	r0, r6
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x226>
 8001c30:	e1de      	b.n	8001ff0 <__aeabi_dsub+0x5e4>
 8001c32:	2680      	movs	r6, #128	; 0x80
 8001c34:	4664      	mov	r4, ip
 8001c36:	0436      	lsls	r6, r6, #16
 8001c38:	4334      	orrs	r4, r6
 8001c3a:	46a4      	mov	ip, r4
 8001c3c:	2a38      	cmp	r2, #56	; 0x38
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_dsub+0x236>
 8001c40:	e196      	b.n	8001f70 <__aeabi_dsub+0x564>
 8001c42:	2a1f      	cmp	r2, #31
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dsub+0x23c>
 8001c46:	e224      	b.n	8002092 <__aeabi_dsub+0x686>
 8001c48:	2620      	movs	r6, #32
 8001c4a:	1ab4      	subs	r4, r6, r2
 8001c4c:	46a2      	mov	sl, r4
 8001c4e:	4664      	mov	r4, ip
 8001c50:	4656      	mov	r6, sl
 8001c52:	40b4      	lsls	r4, r6
 8001c54:	46a1      	mov	r9, r4
 8001c56:	001c      	movs	r4, r3
 8001c58:	464e      	mov	r6, r9
 8001c5a:	40d4      	lsrs	r4, r2
 8001c5c:	4326      	orrs	r6, r4
 8001c5e:	0034      	movs	r4, r6
 8001c60:	4656      	mov	r6, sl
 8001c62:	40b3      	lsls	r3, r6
 8001c64:	1e5e      	subs	r6, r3, #1
 8001c66:	41b3      	sbcs	r3, r6
 8001c68:	431c      	orrs	r4, r3
 8001c6a:	4663      	mov	r3, ip
 8001c6c:	40d3      	lsrs	r3, r2
 8001c6e:	18c9      	adds	r1, r1, r3
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	42bc      	cmp	r4, r7
 8001c74:	41bf      	sbcs	r7, r7
 8001c76:	427f      	negs	r7, r7
 8001c78:	46b9      	mov	r9, r7
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	4489      	add	r9, r1
 8001c7e:	e0d8      	b.n	8001e32 <__aeabi_dsub+0x426>
 8001c80:	4640      	mov	r0, r8
 8001c82:	4c3b      	ldr	r4, [pc, #236]	; (8001d70 <__aeabi_dsub+0x364>)
 8001c84:	3001      	adds	r0, #1
 8001c86:	4220      	tst	r0, r4
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dsub+0x280>
 8001c8a:	e0b4      	b.n	8001df6 <__aeabi_dsub+0x3ea>
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x288>
 8001c92:	e144      	b.n	8001f1e <__aeabi_dsub+0x512>
 8001c94:	4660      	mov	r0, ip
 8001c96:	4318      	orrs	r0, r3
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x290>
 8001c9a:	e190      	b.n	8001fbe <__aeabi_dsub+0x5b2>
 8001c9c:	0008      	movs	r0, r1
 8001c9e:	4338      	orrs	r0, r7
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x298>
 8001ca2:	e1aa      	b.n	8001ffa <__aeabi_dsub+0x5ee>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	0749      	lsls	r1, r1, #29
 8001caa:	430b      	orrs	r3, r1
 8001cac:	4661      	mov	r1, ip
 8001cae:	08cc      	lsrs	r4, r1, #3
 8001cb0:	e027      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001cb2:	0008      	movs	r0, r1
 8001cb4:	4338      	orrs	r0, r7
 8001cb6:	d061      	beq.n	8001d7c <__aeabi_dsub+0x370>
 8001cb8:	1e50      	subs	r0, r2, #1
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x2b4>
 8001cbe:	e139      	b.n	8001f34 <__aeabi_dsub+0x528>
 8001cc0:	42a2      	cmp	r2, r4
 8001cc2:	d027      	beq.n	8001d14 <__aeabi_dsub+0x308>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	e75d      	b.n	8001b84 <__aeabi_dsub+0x178>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	391f      	subs	r1, #31
 8001ccc:	40ca      	lsrs	r2, r1
 8001cce:	0011      	movs	r1, r2
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d003      	beq.n	8001cdc <__aeabi_dsub+0x2d0>
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4098      	lsls	r0, r3
 8001cda:	4304      	orrs	r4, r0
 8001cdc:	1e63      	subs	r3, r4, #1
 8001cde:	419c      	sbcs	r4, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	4698      	mov	r8, r3
 8001ce6:	430c      	orrs	r4, r1
 8001ce8:	0763      	lsls	r3, r4, #29
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x2e2>
 8001cec:	e712      	b.n	8001b14 <__aeabi_dsub+0x108>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	464a      	mov	r2, r9
 8001cf2:	08e4      	lsrs	r4, r4, #3
 8001cf4:	075b      	lsls	r3, r3, #29
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	08d4      	lsrs	r4, r2, #3
 8001cfa:	4642      	mov	r2, r8
 8001cfc:	4919      	ldr	r1, [pc, #100]	; (8001d64 <__aeabi_dsub+0x358>)
 8001cfe:	428a      	cmp	r2, r1
 8001d00:	d00e      	beq.n	8001d20 <__aeabi_dsub+0x314>
 8001d02:	0324      	lsls	r4, r4, #12
 8001d04:	0552      	lsls	r2, r2, #21
 8001d06:	0b24      	lsrs	r4, r4, #12
 8001d08:	0d52      	lsrs	r2, r2, #21
 8001d0a:	e722      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	2400      	movs	r4, #0
 8001d10:	2300      	movs	r3, #0
 8001d12:	e71e      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	4662      	mov	r2, ip
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	08d4      	lsrs	r4, r2, #3
 8001d20:	001a      	movs	r2, r3
 8001d22:	4322      	orrs	r2, r4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x31c>
 8001d26:	e1fc      	b.n	8002122 <__aeabi_dsub+0x716>
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0312      	lsls	r2, r2, #12
 8001d2c:	4314      	orrs	r4, r2
 8001d2e:	0324      	lsls	r4, r4, #12
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <__aeabi_dsub+0x358>)
 8001d32:	0b24      	lsrs	r4, r4, #12
 8001d34:	e70d      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d36:	0020      	movs	r0, r4
 8001d38:	f000 fa7e 	bl	8002238 <__clzsi2>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	3118      	adds	r1, #24
 8001d40:	291f      	cmp	r1, #31
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dsub+0x33a>
 8001d44:	e6c4      	b.n	8001ad0 <__aeabi_dsub+0xc4>
 8001d46:	3808      	subs	r0, #8
 8001d48:	4084      	lsls	r4, r0
 8001d4a:	4643      	mov	r3, r8
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	2400      	movs	r4, #0
 8001d50:	4588      	cmp	r8, r1
 8001d52:	dc00      	bgt.n	8001d56 <__aeabi_dsub+0x34a>
 8001d54:	e6c8      	b.n	8001ae8 <__aeabi_dsub+0xdc>
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__aeabi_dsub+0x35c>)
 8001d58:	1a5b      	subs	r3, r3, r1
 8001d5a:	4010      	ands	r0, r2
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	4681      	mov	r9, r0
 8001d60:	e6d6      	b.n	8001b10 <__aeabi_dsub+0x104>
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000007ff 	.word	0x000007ff
 8001d68:	ff7fffff 	.word	0xff7fffff
 8001d6c:	fffff801 	.word	0xfffff801
 8001d70:	000007fe 	.word	0x000007fe
 8001d74:	430f      	orrs	r7, r1
 8001d76:	1e7a      	subs	r2, r7, #1
 8001d78:	4197      	sbcs	r7, r2
 8001d7a:	e691      	b.n	8001aa0 <__aeabi_dsub+0x94>
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	0749      	lsls	r1, r1, #29
 8001d82:	430b      	orrs	r3, r1
 8001d84:	4661      	mov	r1, ip
 8001d86:	08cc      	lsrs	r4, r1, #3
 8001d88:	e7b8      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	4cd3      	ldr	r4, [pc, #844]	; (80020dc <__aeabi_dsub+0x6d0>)
 8001d8e:	3001      	adds	r0, #1
 8001d90:	4220      	tst	r0, r4
 8001d92:	d000      	beq.n	8001d96 <__aeabi_dsub+0x38a>
 8001d94:	e0a2      	b.n	8001edc <__aeabi_dsub+0x4d0>
 8001d96:	4640      	mov	r0, r8
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x392>
 8001d9c:	e101      	b.n	8001fa2 <__aeabi_dsub+0x596>
 8001d9e:	4660      	mov	r0, ip
 8001da0:	4318      	orrs	r0, r3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x39a>
 8001da4:	e15e      	b.n	8002064 <__aeabi_dsub+0x658>
 8001da6:	0008      	movs	r0, r1
 8001da8:	4338      	orrs	r0, r7
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3a2>
 8001dac:	e15f      	b.n	800206e <__aeabi_dsub+0x662>
 8001dae:	4661      	mov	r1, ip
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	0749      	lsls	r1, r1, #29
 8001db4:	430b      	orrs	r3, r1
 8001db6:	4661      	mov	r1, ip
 8001db8:	08cc      	lsrs	r4, r1, #3
 8001dba:	e7a2      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001dbc:	4dc8      	ldr	r5, [pc, #800]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001dbe:	42a8      	cmp	r0, r5
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x3b8>
 8001dc2:	e0cf      	b.n	8001f64 <__aeabi_dsub+0x558>
 8001dc4:	2580      	movs	r5, #128	; 0x80
 8001dc6:	4664      	mov	r4, ip
 8001dc8:	042d      	lsls	r5, r5, #16
 8001dca:	432c      	orrs	r4, r5
 8001dcc:	46a4      	mov	ip, r4
 8001dce:	2a38      	cmp	r2, #56	; 0x38
 8001dd0:	dc56      	bgt.n	8001e80 <__aeabi_dsub+0x474>
 8001dd2:	2a1f      	cmp	r2, #31
 8001dd4:	dd00      	ble.n	8001dd8 <__aeabi_dsub+0x3cc>
 8001dd6:	e0d1      	b.n	8001f7c <__aeabi_dsub+0x570>
 8001dd8:	2520      	movs	r5, #32
 8001dda:	001e      	movs	r6, r3
 8001ddc:	1aad      	subs	r5, r5, r2
 8001dde:	4664      	mov	r4, ip
 8001de0:	40ab      	lsls	r3, r5
 8001de2:	40ac      	lsls	r4, r5
 8001de4:	40d6      	lsrs	r6, r2
 8001de6:	1e5d      	subs	r5, r3, #1
 8001de8:	41ab      	sbcs	r3, r5
 8001dea:	4334      	orrs	r4, r6
 8001dec:	4323      	orrs	r3, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	40d4      	lsrs	r4, r2
 8001df2:	1b09      	subs	r1, r1, r4
 8001df4:	e049      	b.n	8001e8a <__aeabi_dsub+0x47e>
 8001df6:	4660      	mov	r0, ip
 8001df8:	1bdc      	subs	r4, r3, r7
 8001dfa:	1a46      	subs	r6, r0, r1
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	4180      	sbcs	r0, r0
 8001e00:	4240      	negs	r0, r0
 8001e02:	4681      	mov	r9, r0
 8001e04:	0030      	movs	r0, r6
 8001e06:	464e      	mov	r6, r9
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	4681      	mov	r9, r0
 8001e0c:	0200      	lsls	r0, r0, #8
 8001e0e:	d476      	bmi.n	8001efe <__aeabi_dsub+0x4f2>
 8001e10:	464b      	mov	r3, r9
 8001e12:	4323      	orrs	r3, r4
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x40c>
 8001e16:	e652      	b.n	8001abe <__aeabi_dsub+0xb2>
 8001e18:	2400      	movs	r4, #0
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	e771      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001e1e:	4339      	orrs	r1, r7
 8001e20:	000c      	movs	r4, r1
 8001e22:	1e62      	subs	r2, r4, #1
 8001e24:	4194      	sbcs	r4, r2
 8001e26:	18e4      	adds	r4, r4, r3
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	4463      	add	r3, ip
 8001e30:	4699      	mov	r9, r3
 8001e32:	464b      	mov	r3, r9
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dsub+0x42e>
 8001e38:	e756      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	4ba8      	ldr	r3, [pc, #672]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001e40:	44e0      	add	r8, ip
 8001e42:	4598      	cmp	r8, r3
 8001e44:	d038      	beq.n	8001eb8 <__aeabi_dsub+0x4ac>
 8001e46:	464b      	mov	r3, r9
 8001e48:	48a6      	ldr	r0, [pc, #664]	; (80020e4 <__aeabi_dsub+0x6d8>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4003      	ands	r3, r0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	0863      	lsrs	r3, r4, #1
 8001e52:	4014      	ands	r4, r2
 8001e54:	431c      	orrs	r4, r3
 8001e56:	07c3      	lsls	r3, r0, #31
 8001e58:	431c      	orrs	r4, r3
 8001e5a:	0843      	lsrs	r3, r0, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	e657      	b.n	8001b10 <__aeabi_dsub+0x104>
 8001e60:	0010      	movs	r0, r2
 8001e62:	000e      	movs	r6, r1
 8001e64:	3820      	subs	r0, #32
 8001e66:	40c6      	lsrs	r6, r0
 8001e68:	2a20      	cmp	r2, #32
 8001e6a:	d004      	beq.n	8001e76 <__aeabi_dsub+0x46a>
 8001e6c:	2040      	movs	r0, #64	; 0x40
 8001e6e:	1a82      	subs	r2, r0, r2
 8001e70:	4091      	lsls	r1, r2
 8001e72:	430f      	orrs	r7, r1
 8001e74:	46b9      	mov	r9, r7
 8001e76:	464f      	mov	r7, r9
 8001e78:	1e7a      	subs	r2, r7, #1
 8001e7a:	4197      	sbcs	r7, r2
 8001e7c:	4337      	orrs	r7, r6
 8001e7e:	e60f      	b.n	8001aa0 <__aeabi_dsub+0x94>
 8001e80:	4662      	mov	r2, ip
 8001e82:	431a      	orrs	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	4193      	sbcs	r3, r2
 8001e8a:	1afc      	subs	r4, r7, r3
 8001e8c:	42a7      	cmp	r7, r4
 8001e8e:	41bf      	sbcs	r7, r7
 8001e90:	427f      	negs	r7, r7
 8001e92:	1bcb      	subs	r3, r1, r7
 8001e94:	4699      	mov	r9, r3
 8001e96:	465d      	mov	r5, fp
 8001e98:	4680      	mov	r8, r0
 8001e9a:	e608      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001e9c:	4666      	mov	r6, ip
 8001e9e:	431e      	orrs	r6, r3
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x498>
 8001ea2:	e0be      	b.n	8002022 <__aeabi_dsub+0x616>
 8001ea4:	1e56      	subs	r6, r2, #1
 8001ea6:	2a01      	cmp	r2, #1
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x4a0>
 8001eaa:	e109      	b.n	80020c0 <__aeabi_dsub+0x6b4>
 8001eac:	4c8c      	ldr	r4, [pc, #560]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001eae:	42a2      	cmp	r2, r4
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x4a8>
 8001eb2:	e119      	b.n	80020e8 <__aeabi_dsub+0x6dc>
 8001eb4:	0032      	movs	r2, r6
 8001eb6:	e6c1      	b.n	8001c3c <__aeabi_dsub+0x230>
 8001eb8:	4642      	mov	r2, r8
 8001eba:	2400      	movs	r4, #0
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e648      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001ec0:	2020      	movs	r0, #32
 8001ec2:	000c      	movs	r4, r1
 8001ec4:	1a80      	subs	r0, r0, r2
 8001ec6:	003e      	movs	r6, r7
 8001ec8:	4087      	lsls	r7, r0
 8001eca:	4084      	lsls	r4, r0
 8001ecc:	40d6      	lsrs	r6, r2
 8001ece:	1e78      	subs	r0, r7, #1
 8001ed0:	4187      	sbcs	r7, r0
 8001ed2:	40d1      	lsrs	r1, r2
 8001ed4:	4334      	orrs	r4, r6
 8001ed6:	433c      	orrs	r4, r7
 8001ed8:	448c      	add	ip, r1
 8001eda:	e7a4      	b.n	8001e26 <__aeabi_dsub+0x41a>
 8001edc:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x4d8>
 8001ee2:	e0e9      	b.n	80020b8 <__aeabi_dsub+0x6ac>
 8001ee4:	19df      	adds	r7, r3, r7
 8001ee6:	429f      	cmp	r7, r3
 8001ee8:	419b      	sbcs	r3, r3
 8001eea:	4461      	add	r1, ip
 8001eec:	425b      	negs	r3, r3
 8001eee:	18c9      	adds	r1, r1, r3
 8001ef0:	07cc      	lsls	r4, r1, #31
 8001ef2:	087f      	lsrs	r7, r7, #1
 8001ef4:	084b      	lsrs	r3, r1, #1
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	4680      	mov	r8, r0
 8001efa:	433c      	orrs	r4, r7
 8001efc:	e6f4      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001efe:	1afc      	subs	r4, r7, r3
 8001f00:	42a7      	cmp	r7, r4
 8001f02:	41bf      	sbcs	r7, r7
 8001f04:	4663      	mov	r3, ip
 8001f06:	427f      	negs	r7, r7
 8001f08:	1ac9      	subs	r1, r1, r3
 8001f0a:	1bcb      	subs	r3, r1, r7
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	465d      	mov	r5, fp
 8001f10:	e5d5      	b.n	8001abe <__aeabi_dsub+0xb2>
 8001f12:	08ff      	lsrs	r7, r7, #3
 8001f14:	074b      	lsls	r3, r1, #29
 8001f16:	465d      	mov	r5, fp
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	08cc      	lsrs	r4, r1, #3
 8001f1c:	e6ee      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 8001f1e:	4662      	mov	r2, ip
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x51a>
 8001f24:	e082      	b.n	800202c <__aeabi_dsub+0x620>
 8001f26:	000b      	movs	r3, r1
 8001f28:	433b      	orrs	r3, r7
 8001f2a:	d11b      	bne.n	8001f64 <__aeabi_dsub+0x558>
 8001f2c:	2480      	movs	r4, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	e6f9      	b.n	8001d28 <__aeabi_dsub+0x31c>
 8001f34:	19dc      	adds	r4, r3, r7
 8001f36:	429c      	cmp	r4, r3
 8001f38:	419b      	sbcs	r3, r3
 8001f3a:	4461      	add	r1, ip
 8001f3c:	4689      	mov	r9, r1
 8001f3e:	425b      	negs	r3, r3
 8001f40:	4499      	add	r9, r3
 8001f42:	464b      	mov	r3, r9
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d444      	bmi.n	8001fd2 <__aeabi_dsub+0x5c6>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	e6cc      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001f4e:	1bdc      	subs	r4, r3, r7
 8001f50:	4662      	mov	r2, ip
 8001f52:	42a3      	cmp	r3, r4
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	1a51      	subs	r1, r2, r1
 8001f58:	425b      	negs	r3, r3
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4698      	mov	r8, r3
 8001f62:	e5a4      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001f64:	08ff      	lsrs	r7, r7, #3
 8001f66:	074b      	lsls	r3, r1, #29
 8001f68:	465d      	mov	r5, fp
 8001f6a:	433b      	orrs	r3, r7
 8001f6c:	08cc      	lsrs	r4, r1, #3
 8001f6e:	e6d7      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001f70:	4662      	mov	r2, ip
 8001f72:	431a      	orrs	r2, r3
 8001f74:	0014      	movs	r4, r2
 8001f76:	1e63      	subs	r3, r4, #1
 8001f78:	419c      	sbcs	r4, r3
 8001f7a:	e679      	b.n	8001c70 <__aeabi_dsub+0x264>
 8001f7c:	0015      	movs	r5, r2
 8001f7e:	4664      	mov	r4, ip
 8001f80:	3d20      	subs	r5, #32
 8001f82:	40ec      	lsrs	r4, r5
 8001f84:	46a0      	mov	r8, r4
 8001f86:	2a20      	cmp	r2, #32
 8001f88:	d005      	beq.n	8001f96 <__aeabi_dsub+0x58a>
 8001f8a:	2540      	movs	r5, #64	; 0x40
 8001f8c:	4664      	mov	r4, ip
 8001f8e:	1aaa      	subs	r2, r5, r2
 8001f90:	4094      	lsls	r4, r2
 8001f92:	4323      	orrs	r3, r4
 8001f94:	469a      	mov	sl, r3
 8001f96:	4654      	mov	r4, sl
 8001f98:	1e63      	subs	r3, r4, #1
 8001f9a:	419c      	sbcs	r4, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	4323      	orrs	r3, r4
 8001fa0:	e773      	b.n	8001e8a <__aeabi_dsub+0x47e>
 8001fa2:	4662      	mov	r2, ip
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	d023      	beq.n	8001ff0 <__aeabi_dsub+0x5e4>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	433a      	orrs	r2, r7
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x5a4>
 8001fae:	e0a0      	b.n	80020f2 <__aeabi_dsub+0x6e6>
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	08d4      	lsrs	r4, r2, #3
 8001fbc:	e6b0      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001fbe:	000b      	movs	r3, r1
 8001fc0:	433b      	orrs	r3, r7
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x5ba>
 8001fc4:	e728      	b.n	8001e18 <__aeabi_dsub+0x40c>
 8001fc6:	08ff      	lsrs	r7, r7, #3
 8001fc8:	074b      	lsls	r3, r1, #29
 8001fca:	465d      	mov	r5, fp
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	08cc      	lsrs	r4, r1, #3
 8001fd0:	e697      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	e736      	b.n	8001e46 <__aeabi_dsub+0x43a>
 8001fd8:	1afc      	subs	r4, r7, r3
 8001fda:	42a7      	cmp	r7, r4
 8001fdc:	41bf      	sbcs	r7, r7
 8001fde:	4663      	mov	r3, ip
 8001fe0:	427f      	negs	r7, r7
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	1bcb      	subs	r3, r1, r7
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	465d      	mov	r5, fp
 8001fec:	4698      	mov	r8, r3
 8001fee:	e55e      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001ff0:	074b      	lsls	r3, r1, #29
 8001ff2:	08ff      	lsrs	r7, r7, #3
 8001ff4:	433b      	orrs	r3, r7
 8001ff6:	08cc      	lsrs	r4, r1, #3
 8001ff8:	e692      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001ffa:	1bdc      	subs	r4, r3, r7
 8001ffc:	4660      	mov	r0, ip
 8001ffe:	42a3      	cmp	r3, r4
 8002000:	41b6      	sbcs	r6, r6
 8002002:	1a40      	subs	r0, r0, r1
 8002004:	4276      	negs	r6, r6
 8002006:	1b80      	subs	r0, r0, r6
 8002008:	4681      	mov	r9, r0
 800200a:	0200      	lsls	r0, r0, #8
 800200c:	d560      	bpl.n	80020d0 <__aeabi_dsub+0x6c4>
 800200e:	1afc      	subs	r4, r7, r3
 8002010:	42a7      	cmp	r7, r4
 8002012:	41bf      	sbcs	r7, r7
 8002014:	4663      	mov	r3, ip
 8002016:	427f      	negs	r7, r7
 8002018:	1ac9      	subs	r1, r1, r3
 800201a:	1bcb      	subs	r3, r1, r7
 800201c:	4699      	mov	r9, r3
 800201e:	465d      	mov	r5, fp
 8002020:	e576      	b.n	8001b10 <__aeabi_dsub+0x104>
 8002022:	08ff      	lsrs	r7, r7, #3
 8002024:	074b      	lsls	r3, r1, #29
 8002026:	433b      	orrs	r3, r7
 8002028:	08cc      	lsrs	r4, r1, #3
 800202a:	e667      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 800202c:	000a      	movs	r2, r1
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	433a      	orrs	r2, r7
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x62a>
 8002034:	e66f      	b.n	8001d16 <__aeabi_dsub+0x30a>
 8002036:	4662      	mov	r2, ip
 8002038:	0752      	lsls	r2, r2, #29
 800203a:	4313      	orrs	r3, r2
 800203c:	4662      	mov	r2, ip
 800203e:	08d4      	lsrs	r4, r2, #3
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	0312      	lsls	r2, r2, #12
 8002044:	4214      	tst	r4, r2
 8002046:	d007      	beq.n	8002058 <__aeabi_dsub+0x64c>
 8002048:	08c8      	lsrs	r0, r1, #3
 800204a:	4210      	tst	r0, r2
 800204c:	d104      	bne.n	8002058 <__aeabi_dsub+0x64c>
 800204e:	465d      	mov	r5, fp
 8002050:	0004      	movs	r4, r0
 8002052:	08fb      	lsrs	r3, r7, #3
 8002054:	0749      	lsls	r1, r1, #29
 8002056:	430b      	orrs	r3, r1
 8002058:	0f5a      	lsrs	r2, r3, #29
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	0752      	lsls	r2, r2, #29
 8002060:	4313      	orrs	r3, r2
 8002062:	e65d      	b.n	8001d20 <__aeabi_dsub+0x314>
 8002064:	074b      	lsls	r3, r1, #29
 8002066:	08ff      	lsrs	r7, r7, #3
 8002068:	433b      	orrs	r3, r7
 800206a:	08cc      	lsrs	r4, r1, #3
 800206c:	e649      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 800206e:	19dc      	adds	r4, r3, r7
 8002070:	429c      	cmp	r4, r3
 8002072:	419b      	sbcs	r3, r3
 8002074:	4461      	add	r1, ip
 8002076:	4689      	mov	r9, r1
 8002078:	425b      	negs	r3, r3
 800207a:	4499      	add	r9, r3
 800207c:	464b      	mov	r3, r9
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	d400      	bmi.n	8002084 <__aeabi_dsub+0x678>
 8002082:	e631      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8002084:	464a      	mov	r2, r9
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <__aeabi_dsub+0x6d8>)
 8002088:	401a      	ands	r2, r3
 800208a:	2301      	movs	r3, #1
 800208c:	4691      	mov	r9, r2
 800208e:	4698      	mov	r8, r3
 8002090:	e62a      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8002092:	0016      	movs	r6, r2
 8002094:	4664      	mov	r4, ip
 8002096:	3e20      	subs	r6, #32
 8002098:	40f4      	lsrs	r4, r6
 800209a:	46a0      	mov	r8, r4
 800209c:	2a20      	cmp	r2, #32
 800209e:	d005      	beq.n	80020ac <__aeabi_dsub+0x6a0>
 80020a0:	2640      	movs	r6, #64	; 0x40
 80020a2:	4664      	mov	r4, ip
 80020a4:	1ab2      	subs	r2, r6, r2
 80020a6:	4094      	lsls	r4, r2
 80020a8:	4323      	orrs	r3, r4
 80020aa:	469a      	mov	sl, r3
 80020ac:	4654      	mov	r4, sl
 80020ae:	1e63      	subs	r3, r4, #1
 80020b0:	419c      	sbcs	r4, r3
 80020b2:	4643      	mov	r3, r8
 80020b4:	431c      	orrs	r4, r3
 80020b6:	e5db      	b.n	8001c70 <__aeabi_dsub+0x264>
 80020b8:	0002      	movs	r2, r0
 80020ba:	2400      	movs	r4, #0
 80020bc:	2300      	movs	r3, #0
 80020be:	e548      	b.n	8001b52 <__aeabi_dsub+0x146>
 80020c0:	19dc      	adds	r4, r3, r7
 80020c2:	42bc      	cmp	r4, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	4461      	add	r1, ip
 80020c8:	4689      	mov	r9, r1
 80020ca:	427f      	negs	r7, r7
 80020cc:	44b9      	add	r9, r7
 80020ce:	e738      	b.n	8001f42 <__aeabi_dsub+0x536>
 80020d0:	464b      	mov	r3, r9
 80020d2:	4323      	orrs	r3, r4
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x6cc>
 80020d6:	e69f      	b.n	8001e18 <__aeabi_dsub+0x40c>
 80020d8:	e606      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	000007fe 	.word	0x000007fe
 80020e0:	000007ff 	.word	0x000007ff
 80020e4:	ff7fffff 	.word	0xff7fffff
 80020e8:	08ff      	lsrs	r7, r7, #3
 80020ea:	074b      	lsls	r3, r1, #29
 80020ec:	433b      	orrs	r3, r7
 80020ee:	08cc      	lsrs	r4, r1, #3
 80020f0:	e616      	b.n	8001d20 <__aeabi_dsub+0x314>
 80020f2:	4662      	mov	r2, ip
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	0752      	lsls	r2, r2, #29
 80020f8:	4313      	orrs	r3, r2
 80020fa:	4662      	mov	r2, ip
 80020fc:	08d4      	lsrs	r4, r2, #3
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0312      	lsls	r2, r2, #12
 8002102:	4214      	tst	r4, r2
 8002104:	d007      	beq.n	8002116 <__aeabi_dsub+0x70a>
 8002106:	08c8      	lsrs	r0, r1, #3
 8002108:	4210      	tst	r0, r2
 800210a:	d104      	bne.n	8002116 <__aeabi_dsub+0x70a>
 800210c:	465d      	mov	r5, fp
 800210e:	0004      	movs	r4, r0
 8002110:	08fb      	lsrs	r3, r7, #3
 8002112:	0749      	lsls	r1, r1, #29
 8002114:	430b      	orrs	r3, r1
 8002116:	0f5a      	lsrs	r2, r3, #29
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	4313      	orrs	r3, r2
 8002120:	e5fe      	b.n	8001d20 <__aeabi_dsub+0x314>
 8002122:	2300      	movs	r3, #0
 8002124:	4a01      	ldr	r2, [pc, #4]	; (800212c <__aeabi_dsub+0x720>)
 8002126:	001c      	movs	r4, r3
 8002128:	e513      	b.n	8001b52 <__aeabi_dsub+0x146>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_dcmpun>:
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	0005      	movs	r5, r0
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <__aeabi_dcmpun+0x38>)
 8002136:	031c      	lsls	r4, r3, #12
 8002138:	0016      	movs	r6, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	030a      	lsls	r2, r1, #12
 800213e:	0049      	lsls	r1, r1, #1
 8002140:	0b12      	lsrs	r2, r2, #12
 8002142:	0d49      	lsrs	r1, r1, #21
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	4281      	cmp	r1, r0
 800214a:	d008      	beq.n	800215e <__aeabi_dcmpun+0x2e>
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <__aeabi_dcmpun+0x38>)
 800214e:	2000      	movs	r0, #0
 8002150:	4293      	cmp	r3, r2
 8002152:	d103      	bne.n	800215c <__aeabi_dcmpun+0x2c>
 8002154:	0020      	movs	r0, r4
 8002156:	4330      	orrs	r0, r6
 8002158:	1e43      	subs	r3, r0, #1
 800215a:	4198      	sbcs	r0, r3
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	2001      	movs	r0, #1
 8002160:	432a      	orrs	r2, r5
 8002162:	d1fb      	bne.n	800215c <__aeabi_dcmpun+0x2c>
 8002164:	e7f2      	b.n	800214c <__aeabi_dcmpun+0x1c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	000007ff 	.word	0x000007ff

0800216c <__aeabi_d2iz>:
 800216c:	000a      	movs	r2, r1
 800216e:	b530      	push	{r4, r5, lr}
 8002170:	4c13      	ldr	r4, [pc, #76]	; (80021c0 <__aeabi_d2iz+0x54>)
 8002172:	0053      	lsls	r3, r2, #1
 8002174:	0309      	lsls	r1, r1, #12
 8002176:	0005      	movs	r5, r0
 8002178:	0b09      	lsrs	r1, r1, #12
 800217a:	2000      	movs	r0, #0
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	0fd2      	lsrs	r2, r2, #31
 8002180:	42a3      	cmp	r3, r4
 8002182:	dd04      	ble.n	800218e <__aeabi_d2iz+0x22>
 8002184:	480f      	ldr	r0, [pc, #60]	; (80021c4 <__aeabi_d2iz+0x58>)
 8002186:	4283      	cmp	r3, r0
 8002188:	dd02      	ble.n	8002190 <__aeabi_d2iz+0x24>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_d2iz+0x5c>)
 800218c:	18d0      	adds	r0, r2, r3
 800218e:	bd30      	pop	{r4, r5, pc}
 8002190:	2080      	movs	r0, #128	; 0x80
 8002192:	0340      	lsls	r0, r0, #13
 8002194:	4301      	orrs	r1, r0
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <__aeabi_d2iz+0x60>)
 8002198:	1ac0      	subs	r0, r0, r3
 800219a:	281f      	cmp	r0, #31
 800219c:	dd08      	ble.n	80021b0 <__aeabi_d2iz+0x44>
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <__aeabi_d2iz+0x64>)
 80021a0:	1ac3      	subs	r3, r0, r3
 80021a2:	40d9      	lsrs	r1, r3
 80021a4:	000b      	movs	r3, r1
 80021a6:	4258      	negs	r0, r3
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	d1f0      	bne.n	800218e <__aeabi_d2iz+0x22>
 80021ac:	0018      	movs	r0, r3
 80021ae:	e7ee      	b.n	800218e <__aeabi_d2iz+0x22>
 80021b0:	4c08      	ldr	r4, [pc, #32]	; (80021d4 <__aeabi_d2iz+0x68>)
 80021b2:	40c5      	lsrs	r5, r0
 80021b4:	46a4      	mov	ip, r4
 80021b6:	4463      	add	r3, ip
 80021b8:	4099      	lsls	r1, r3
 80021ba:	000b      	movs	r3, r1
 80021bc:	432b      	orrs	r3, r5
 80021be:	e7f2      	b.n	80021a6 <__aeabi_d2iz+0x3a>
 80021c0:	000003fe 	.word	0x000003fe
 80021c4:	0000041d 	.word	0x0000041d
 80021c8:	7fffffff 	.word	0x7fffffff
 80021cc:	00000433 	.word	0x00000433
 80021d0:	00000413 	.word	0x00000413
 80021d4:	fffffbed 	.word	0xfffffbed

080021d8 <__aeabi_i2d>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2800      	cmp	r0, #0
 80021dc:	d016      	beq.n	800220c <__aeabi_i2d+0x34>
 80021de:	17c3      	asrs	r3, r0, #31
 80021e0:	18c5      	adds	r5, r0, r3
 80021e2:	405d      	eors	r5, r3
 80021e4:	0fc4      	lsrs	r4, r0, #31
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f826 	bl	8002238 <__clzsi2>
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <__aeabi_i2d+0x5c>)
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	280a      	cmp	r0, #10
 80021f2:	dc16      	bgt.n	8002222 <__aeabi_i2d+0x4a>
 80021f4:	0003      	movs	r3, r0
 80021f6:	002e      	movs	r6, r5
 80021f8:	3315      	adds	r3, #21
 80021fa:	409e      	lsls	r6, r3
 80021fc:	230b      	movs	r3, #11
 80021fe:	1a18      	subs	r0, r3, r0
 8002200:	40c5      	lsrs	r5, r0
 8002202:	0552      	lsls	r2, r2, #21
 8002204:	032d      	lsls	r5, r5, #12
 8002206:	0b2d      	lsrs	r5, r5, #12
 8002208:	0d53      	lsrs	r3, r2, #21
 800220a:	e003      	b.n	8002214 <__aeabi_i2d+0x3c>
 800220c:	2400      	movs	r4, #0
 800220e:	2300      	movs	r3, #0
 8002210:	2500      	movs	r5, #0
 8002212:	2600      	movs	r6, #0
 8002214:	051b      	lsls	r3, r3, #20
 8002216:	432b      	orrs	r3, r5
 8002218:	07e4      	lsls	r4, r4, #31
 800221a:	4323      	orrs	r3, r4
 800221c:	0030      	movs	r0, r6
 800221e:	0019      	movs	r1, r3
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	380b      	subs	r0, #11
 8002224:	4085      	lsls	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	2600      	movs	r6, #0
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d53      	lsrs	r3, r2, #21
 8002230:	e7f0      	b.n	8002214 <__aeabi_i2d+0x3c>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	0000041e 	.word	0x0000041e

08002238 <__clzsi2>:
 8002238:	211c      	movs	r1, #28
 800223a:	2301      	movs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0xe>
 8002242:	0c00      	lsrs	r0, r0, #16
 8002244:	3910      	subs	r1, #16
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	4298      	cmp	r0, r3
 800224a:	d301      	bcc.n	8002250 <__clzsi2+0x18>
 800224c:	0a00      	lsrs	r0, r0, #8
 800224e:	3908      	subs	r1, #8
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0x22>
 8002256:	0900      	lsrs	r0, r0, #4
 8002258:	3904      	subs	r1, #4
 800225a:	a202      	add	r2, pc, #8	; (adr r2, 8002264 <__clzsi2+0x2c>)
 800225c:	5c10      	ldrb	r0, [r2, r0]
 800225e:	1840      	adds	r0, r0, r1
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	02020304 	.word	0x02020304
 8002268:	01010101 	.word	0x01010101
	...

08002274 <__clzdi2>:
 8002274:	b510      	push	{r4, lr}
 8002276:	2900      	cmp	r1, #0
 8002278:	d103      	bne.n	8002282 <__clzdi2+0xe>
 800227a:	f7ff ffdd 	bl	8002238 <__clzsi2>
 800227e:	3020      	adds	r0, #32
 8002280:	e002      	b.n	8002288 <__clzdi2+0x14>
 8002282:	0008      	movs	r0, r1
 8002284:	f7ff ffd8 	bl	8002238 <__clzsi2>
 8002288:	bd10      	pop	{r4, pc}
 800228a:	46c0      	nop			; (mov r8, r8)

0800228c <bma400_InitConfig>:
HAL_StatusTypeDef hStat;
uint8_t serialAccBuf[SER_BUF_SIZE] = {'\0'};
uint8_t i2cBufRet[FIFO_SIZE]={0};
uint8_t i2cBuf[8]={0};

void bma400_InitConfig(){
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af04      	add	r7, sp, #16

	//==========	Check that communication is correct		==========

    hStat = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADDR, REG_CHIPID, 1, HAL_MAX_DELAY);
 8002292:	48e5      	ldr	r0, [pc, #916]	; (8002628 <bma400_InitConfig+0x39c>)
 8002294:	2301      	movs	r3, #1
 8002296:	425b      	negs	r3, r3
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2200      	movs	r2, #0
 800229e:	2128      	movs	r1, #40	; 0x28
 80022a0:	f001 ff18 	bl	80040d4 <HAL_I2C_Master_Transmit>
 80022a4:	0003      	movs	r3, r0
 80022a6:	001a      	movs	r2, r3
 80022a8:	4be0      	ldr	r3, [pc, #896]	; (800262c <bma400_InitConfig+0x3a0>)
 80022aa:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 80022ac:	4bdf      	ldr	r3, [pc, #892]	; (800262c <bma400_InitConfig+0x3a0>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <bma400_InitConfig+0x36>
  	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80022b4:	4bde      	ldr	r3, [pc, #888]	; (8002630 <bma400_InitConfig+0x3a4>)
 80022b6:	4adf      	ldr	r2, [pc, #892]	; (8002634 <bma400_InitConfig+0x3a8>)
 80022b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ba:	c313      	stmia	r3!, {r0, r1, r4}
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e01f      	b.n	8002302 <bma400_InitConfig+0x76>
    } else {
  	  hStat = HAL_I2C_Master_Receive(&hi2c1, ACC_ADDR, i2cBufRet, 2, HAL_MAX_DELAY);
 80022c2:	4add      	ldr	r2, [pc, #884]	; (8002638 <bma400_InitConfig+0x3ac>)
 80022c4:	48d8      	ldr	r0, [pc, #864]	; (8002628 <bma400_InitConfig+0x39c>)
 80022c6:	2301      	movs	r3, #1
 80022c8:	425b      	negs	r3, r3
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2302      	movs	r3, #2
 80022ce:	2128      	movs	r1, #40	; 0x28
 80022d0:	f002 f808 	bl	80042e4 <HAL_I2C_Master_Receive>
 80022d4:	0003      	movs	r3, r0
 80022d6:	001a      	movs	r2, r3
 80022d8:	4bd4      	ldr	r3, [pc, #848]	; (800262c <bma400_InitConfig+0x3a0>)
 80022da:	701a      	strb	r2, [r3, #0]
  	  if(hStat != HAL_OK){
 80022dc:	4bd3      	ldr	r3, [pc, #844]	; (800262c <bma400_InitConfig+0x3a0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <bma400_InitConfig+0x66>
  		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 80022e4:	4bd2      	ldr	r3, [pc, #840]	; (8002630 <bma400_InitConfig+0x3a4>)
 80022e6:	4ad5      	ldr	r2, [pc, #852]	; (800263c <bma400_InitConfig+0x3b0>)
 80022e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ea:	c313      	stmia	r3!, {r0, r1, r4}
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e007      	b.n	8002302 <bma400_InitConfig+0x76>
  	  } else {
  		  sprintf((char*)serialAccBuf, "CtrlVal : %x\r\n", i2cBufRet[0]);
 80022f2:	4bd1      	ldr	r3, [pc, #836]	; (8002638 <bma400_InitConfig+0x3ac>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	001a      	movs	r2, r3
 80022f8:	49d1      	ldr	r1, [pc, #836]	; (8002640 <bma400_InitConfig+0x3b4>)
 80022fa:	4bcd      	ldr	r3, [pc, #820]	; (8002630 <bma400_InitConfig+0x3a4>)
 80022fc:	0018      	movs	r0, r3
 80022fe:	f004 ff39 	bl	8007174 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002302:	2301      	movs	r3, #1
 8002304:	425b      	negs	r3, r3
 8002306:	49ca      	ldr	r1, [pc, #808]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002308:	48ce      	ldr	r0, [pc, #824]	; (8002644 <bma400_InitConfig+0x3b8>)
 800230a:	2214      	movs	r2, #20
 800230c:	f004 f998 	bl	8006640 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002310:	23fa      	movs	r3, #250	; 0xfa
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	0018      	movs	r0, r3
 8002316:	f001 fb73 	bl	8003a00 <HAL_Delay>

    //==========			Go out of sleep mode			==========

    i2cBuf[0] = 0b00000010;
 800231a:	4bcb      	ldr	r3, [pc, #812]	; (8002648 <bma400_InitConfig+0x3bc>)
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 8002320:	48c1      	ldr	r0, [pc, #772]	; (8002628 <bma400_InitConfig+0x39c>)
 8002322:	2301      	movs	r3, #1
 8002324:	425b      	negs	r3, r3
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	2301      	movs	r3, #1
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	4bc6      	ldr	r3, [pc, #792]	; (8002648 <bma400_InitConfig+0x3bc>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	2219      	movs	r2, #25
 8002334:	2128      	movs	r1, #40	; 0x28
 8002336:	f002 f8dd 	bl	80044f4 <HAL_I2C_Mem_Write>
 800233a:	0003      	movs	r3, r0
 800233c:	001a      	movs	r2, r3
 800233e:	4bbb      	ldr	r3, [pc, #748]	; (800262c <bma400_InitConfig+0x3a0>)
 8002340:	701a      	strb	r2, [r3, #0]
    i2cBuf[0] = 0x00;
 8002342:	4bc1      	ldr	r3, [pc, #772]	; (8002648 <bma400_InitConfig+0x3bc>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 8002348:	4bb8      	ldr	r3, [pc, #736]	; (800262c <bma400_InitConfig+0x3a0>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <bma400_InitConfig+0xd2>
  	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 8002350:	4bb7      	ldr	r3, [pc, #732]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002352:	4ab8      	ldr	r2, [pc, #736]	; (8002634 <bma400_InitConfig+0x3a8>)
 8002354:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002356:	c313      	stmia	r3!, {r0, r1, r4}
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e023      	b.n	80023a6 <bma400_InitConfig+0x11a>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG0, 1, i2cBufRet, 8, HAL_MAX_DELAY);
 800235e:	48b2      	ldr	r0, [pc, #712]	; (8002628 <bma400_InitConfig+0x39c>)
 8002360:	2301      	movs	r3, #1
 8002362:	425b      	negs	r3, r3
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	2308      	movs	r3, #8
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	4bb3      	ldr	r3, [pc, #716]	; (8002638 <bma400_InitConfig+0x3ac>)
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	2219      	movs	r2, #25
 8002372:	2128      	movs	r1, #40	; 0x28
 8002374:	f002 f9ec 	bl	8004750 <HAL_I2C_Mem_Read>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	4bab      	ldr	r3, [pc, #684]	; (800262c <bma400_InitConfig+0x3a0>)
 800237e:	701a      	strb	r2, [r3, #0]
  	  if(hStat != HAL_OK){
 8002380:	4baa      	ldr	r3, [pc, #680]	; (800262c <bma400_InitConfig+0x3a0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <bma400_InitConfig+0x10a>
  		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002388:	4ba9      	ldr	r3, [pc, #676]	; (8002630 <bma400_InitConfig+0x3a4>)
 800238a:	4aac      	ldr	r2, [pc, #688]	; (800263c <bma400_InitConfig+0x3b0>)
 800238c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800238e:	c313      	stmia	r3!, {r0, r1, r4}
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e007      	b.n	80023a6 <bma400_InitConfig+0x11a>
  	  } else {
  		  sprintf((char*)serialAccBuf, "OutSlp  : %x\r\n", i2cBufRet[0]);
 8002396:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <bma400_InitConfig+0x3ac>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	001a      	movs	r2, r3
 800239c:	49ab      	ldr	r1, [pc, #684]	; (800264c <bma400_InitConfig+0x3c0>)
 800239e:	4ba4      	ldr	r3, [pc, #656]	; (8002630 <bma400_InitConfig+0x3a4>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f004 fee7 	bl	8007174 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 80023a6:	2301      	movs	r3, #1
 80023a8:	425b      	negs	r3, r3
 80023aa:	49a1      	ldr	r1, [pc, #644]	; (8002630 <bma400_InitConfig+0x3a4>)
 80023ac:	48a5      	ldr	r0, [pc, #660]	; (8002644 <bma400_InitConfig+0x3b8>)
 80023ae:	2214      	movs	r2, #20
 80023b0:	f004 f946 	bl	8006640 <HAL_UART_Transmit>
    HAL_Delay(500);
 80023b4:	23fa      	movs	r3, #250	; 0xfa
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	0018      	movs	r0, r3
 80023ba:	f001 fb21 	bl	8003a00 <HAL_Delay>

    //==========			Go in 2g mode and 800 Hz		==========

	i2cBuf[0] = 0x3b;
 80023be:	4ba2      	ldr	r3, [pc, #648]	; (8002648 <bma400_InitConfig+0x3bc>)
 80023c0:	223b      	movs	r2, #59	; 0x3b
 80023c2:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80023c4:	4898      	ldr	r0, [pc, #608]	; (8002628 <bma400_InitConfig+0x39c>)
 80023c6:	2301      	movs	r3, #1
 80023c8:	425b      	negs	r3, r3
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	2301      	movs	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	4b9d      	ldr	r3, [pc, #628]	; (8002648 <bma400_InitConfig+0x3bc>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	221a      	movs	r2, #26
 80023d8:	2128      	movs	r1, #40	; 0x28
 80023da:	f002 f88b 	bl	80044f4 <HAL_I2C_Mem_Write>
 80023de:	0003      	movs	r3, r0
 80023e0:	001a      	movs	r2, r3
 80023e2:	4b92      	ldr	r3, [pc, #584]	; (800262c <bma400_InitConfig+0x3a0>)
 80023e4:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 80023e6:	4b98      	ldr	r3, [pc, #608]	; (8002648 <bma400_InitConfig+0x3bc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <bma400_InitConfig+0x3a0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <bma400_InitConfig+0x176>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80023f4:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <bma400_InitConfig+0x3a4>)
 80023f6:	4a8f      	ldr	r2, [pc, #572]	; (8002634 <bma400_InitConfig+0x3a8>)
 80023f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023fa:	c313      	stmia	r3!, {r0, r1, r4}
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e023      	b.n	800244a <bma400_InitConfig+0x1be>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBufRet, 8, HAL_MAX_DELAY);
 8002402:	4889      	ldr	r0, [pc, #548]	; (8002628 <bma400_InitConfig+0x39c>)
 8002404:	2301      	movs	r3, #1
 8002406:	425b      	negs	r3, r3
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2308      	movs	r3, #8
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <bma400_InitConfig+0x3ac>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2301      	movs	r3, #1
 8002414:	221a      	movs	r2, #26
 8002416:	2128      	movs	r1, #40	; 0x28
 8002418:	f002 f99a 	bl	8004750 <HAL_I2C_Mem_Read>
 800241c:	0003      	movs	r3, r0
 800241e:	001a      	movs	r2, r3
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <bma400_InitConfig+0x3a0>)
 8002422:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <bma400_InitConfig+0x3a0>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <bma400_InitConfig+0x1ae>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <bma400_InitConfig+0x3a4>)
 800242e:	4a83      	ldr	r2, [pc, #524]	; (800263c <bma400_InitConfig+0x3b0>)
 8002430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002432:	c313      	stmia	r3!, {r0, r1, r4}
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <bma400_InitConfig+0x1be>
	  } else {
		  sprintf((char*)serialAccBuf, "4gMode  : %x\r\n", i2cBufRet[0]);
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <bma400_InitConfig+0x3ac>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	001a      	movs	r2, r3
 8002440:	4983      	ldr	r1, [pc, #524]	; (8002650 <bma400_InitConfig+0x3c4>)
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002444:	0018      	movs	r0, r3
 8002446:	f004 fe95 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 800244a:	2301      	movs	r3, #1
 800244c:	425b      	negs	r3, r3
 800244e:	4978      	ldr	r1, [pc, #480]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002450:	487c      	ldr	r0, [pc, #496]	; (8002644 <bma400_InitConfig+0x3b8>)
 8002452:	2214      	movs	r2, #20
 8002454:	f004 f8f4 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002458:	23fa      	movs	r3, #250	; 0xfa
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	0018      	movs	r0, r3
 800245e:	f001 facf 	bl	8003a00 <HAL_Delay>

	//==========		x,y,z in fifo and 12 bit			==========

	i2cBuf[0] = 0xE0;
 8002462:	4b79      	ldr	r3, [pc, #484]	; (8002648 <bma400_InitConfig+0x3bc>)
 8002464:	22e0      	movs	r2, #224	; 0xe0
 8002466:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_FIFO_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 8002468:	486f      	ldr	r0, [pc, #444]	; (8002628 <bma400_InitConfig+0x39c>)
 800246a:	2301      	movs	r3, #1
 800246c:	425b      	negs	r3, r3
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	2301      	movs	r3, #1
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <bma400_InitConfig+0x3bc>)
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	2226      	movs	r2, #38	; 0x26
 800247c:	2128      	movs	r1, #40	; 0x28
 800247e:	f002 f839 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002482:	0003      	movs	r3, r0
 8002484:	001a      	movs	r2, r3
 8002486:	4b69      	ldr	r3, [pc, #420]	; (800262c <bma400_InitConfig+0x3a0>)
 8002488:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <bma400_InitConfig+0x3bc>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <bma400_InitConfig+0x3a0>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <bma400_InitConfig+0x21a>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <bma400_InitConfig+0x3a4>)
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <bma400_InitConfig+0x3a8>)
 800249c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249e:	c313      	stmia	r3!, {r0, r1, r4}
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e023      	b.n	80024ee <bma400_InitConfig+0x262>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_CONFIG0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80024a6:	4860      	ldr	r0, [pc, #384]	; (8002628 <bma400_InitConfig+0x39c>)
 80024a8:	2301      	movs	r3, #1
 80024aa:	425b      	negs	r3, r3
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	2301      	movs	r3, #1
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <bma400_InitConfig+0x3ac>)
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	2226      	movs	r2, #38	; 0x26
 80024ba:	2128      	movs	r1, #40	; 0x28
 80024bc:	f002 f948 	bl	8004750 <HAL_I2C_Mem_Read>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <bma400_InitConfig+0x3a0>)
 80024c6:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <bma400_InitConfig+0x3a0>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <bma400_InitConfig+0x252>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <bma400_InitConfig+0x3a4>)
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <bma400_InitConfig+0x3b0>)
 80024d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024d6:	c313      	stmia	r3!, {r0, r1, r4}
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <bma400_InitConfig+0x262>
	  } else {
		  sprintf((char*)serialAccBuf, "xyz md  : %x\r\n", i2cBufRet[0]);
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <bma400_InitConfig+0x3ac>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	001a      	movs	r2, r3
 80024e4:	495b      	ldr	r1, [pc, #364]	; (8002654 <bma400_InitConfig+0x3c8>)
 80024e6:	4b52      	ldr	r3, [pc, #328]	; (8002630 <bma400_InitConfig+0x3a4>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f004 fe43 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 80024ee:	2301      	movs	r3, #1
 80024f0:	425b      	negs	r3, r3
 80024f2:	494f      	ldr	r1, [pc, #316]	; (8002630 <bma400_InitConfig+0x3a4>)
 80024f4:	4853      	ldr	r0, [pc, #332]	; (8002644 <bma400_InitConfig+0x3b8>)
 80024f6:	2214      	movs	r2, #20
 80024f8:	f004 f8a2 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 80024fc:	23fa      	movs	r3, #250	; 0xfa
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	0018      	movs	r0, r3
 8002502:	f001 fa7d 	bl	8003a00 <HAL_Delay>

	//==========			INT1 Map gen1 int1				==========

	i2cBuf[0] = 0x04;
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <bma400_InitConfig+0x3bc>)
 8002508:	2204      	movs	r2, #4
 800250a:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_INT1_MAP, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800250c:	4846      	ldr	r0, [pc, #280]	; (8002628 <bma400_InitConfig+0x39c>)
 800250e:	2301      	movs	r3, #1
 8002510:	425b      	negs	r3, r3
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2301      	movs	r3, #1
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <bma400_InitConfig+0x3bc>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2301      	movs	r3, #1
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	2128      	movs	r1, #40	; 0x28
 8002522:	f001 ffe7 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002526:	0003      	movs	r3, r0
 8002528:	001a      	movs	r2, r3
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <bma400_InitConfig+0x3a0>)
 800252c:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <bma400_InitConfig+0x3bc>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <bma400_InitConfig+0x3a0>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <bma400_InitConfig+0x2be>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <bma400_InitConfig+0x3a4>)
 800253e:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <bma400_InitConfig+0x3a8>)
 8002540:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002542:	c313      	stmia	r3!, {r0, r1, r4}
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e023      	b.n	8002592 <bma400_InitConfig+0x306>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_INT1_MAP, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 800254a:	4837      	ldr	r0, [pc, #220]	; (8002628 <bma400_InitConfig+0x39c>)
 800254c:	2301      	movs	r3, #1
 800254e:	425b      	negs	r3, r3
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	2301      	movs	r3, #1
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <bma400_InitConfig+0x3ac>)
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	2128      	movs	r1, #40	; 0x28
 8002560:	f002 f8f6 	bl	8004750 <HAL_I2C_Mem_Read>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <bma400_InitConfig+0x3a0>)
 800256a:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <bma400_InitConfig+0x3a0>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <bma400_InitConfig+0x2f6>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002576:	4a31      	ldr	r2, [pc, #196]	; (800263c <bma400_InitConfig+0x3b0>)
 8002578:	ca13      	ldmia	r2!, {r0, r1, r4}
 800257a:	c313      	stmia	r3!, {r0, r1, r4}
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <bma400_InitConfig+0x306>
	  } else {
		  sprintf((char*)serialAccBuf, "intConf : %x\r\n", i2cBufRet[0]);
 8002582:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <bma400_InitConfig+0x3ac>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	001a      	movs	r2, r3
 8002588:	4933      	ldr	r1, [pc, #204]	; (8002658 <bma400_InitConfig+0x3cc>)
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <bma400_InitConfig+0x3a4>)
 800258c:	0018      	movs	r0, r3
 800258e:	f004 fdf1 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002592:	2301      	movs	r3, #1
 8002594:	425b      	negs	r3, r3
 8002596:	4926      	ldr	r1, [pc, #152]	; (8002630 <bma400_InitConfig+0x3a4>)
 8002598:	482a      	ldr	r0, [pc, #168]	; (8002644 <bma400_InitConfig+0x3b8>)
 800259a:	2214      	movs	r2, #20
 800259c:	f004 f850 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 80025a0:	23fa      	movs	r3, #250	; 0xfa
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 fa2b 	bl	8003a00 <HAL_Delay>

	//==========			ACTCH to interrupt				==========
	i2cBuf[0] = 0x00; //Probably 10 for activity
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <bma400_InitConfig+0x3bc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_INT_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80025b0:	481d      	ldr	r0, [pc, #116]	; (8002628 <bma400_InitConfig+0x39c>)
 80025b2:	2301      	movs	r3, #1
 80025b4:	425b      	negs	r3, r3
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2301      	movs	r3, #1
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <bma400_InitConfig+0x3bc>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2220      	movs	r2, #32
 80025c4:	2128      	movs	r1, #40	; 0x28
 80025c6:	f001 ff95 	bl	80044f4 <HAL_I2C_Mem_Write>
 80025ca:	0003      	movs	r3, r0
 80025cc:	001a      	movs	r2, r3
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <bma400_InitConfig+0x3a0>)
 80025d0:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <bma400_InitConfig+0x3bc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <bma400_InitConfig+0x3a0>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <bma400_InitConfig+0x362>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <bma400_InitConfig+0x3a4>)
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <bma400_InitConfig+0x3a8>)
 80025e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025e6:	c313      	stmia	r3!, {r0, r1, r4}
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e03e      	b.n	800266c <bma400_InitConfig+0x3e0>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_INT_CONFIG1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80025ee:	480e      	ldr	r0, [pc, #56]	; (8002628 <bma400_InitConfig+0x39c>)
 80025f0:	2301      	movs	r3, #1
 80025f2:	425b      	negs	r3, r3
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2301      	movs	r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <bma400_InitConfig+0x3ac>)
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2301      	movs	r3, #1
 8002600:	2220      	movs	r2, #32
 8002602:	2128      	movs	r1, #40	; 0x28
 8002604:	f002 f8a4 	bl	8004750 <HAL_I2C_Mem_Read>
 8002608:	0003      	movs	r3, r0
 800260a:	001a      	movs	r2, r3
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <bma400_InitConfig+0x3a0>)
 800260e:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <bma400_InitConfig+0x3a0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d021      	beq.n	800265c <bma400_InitConfig+0x3d0>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <bma400_InitConfig+0x3a4>)
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <bma400_InitConfig+0x3b0>)
 800261c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800261e:	c313      	stmia	r3!, {r0, r1, r4}
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e022      	b.n	800266c <bma400_InitConfig+0x3e0>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	200004c0 	.word	0x200004c0
 800262c:	2000008c 	.word	0x2000008c
 8002630:	20000090 	.word	0x20000090
 8002634:	08008868 	.word	0x08008868
 8002638:	200000a4 	.word	0x200000a4
 800263c:	08008878 	.word	0x08008878
 8002640:	08008888 	.word	0x08008888
 8002644:	20000554 	.word	0x20000554
 8002648:	200004a4 	.word	0x200004a4
 800264c:	08008898 	.word	0x08008898
 8002650:	080088a8 	.word	0x080088a8
 8002654:	080088b8 	.word	0x080088b8
 8002658:	080088c8 	.word	0x080088c8
	  } else {
		  sprintf((char*)serialAccBuf, "intConf : %x\r\n", i2cBufRet[0]);
 800265c:	4be7      	ldr	r3, [pc, #924]	; (80029fc <bma400_InitConfig+0x770>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	001a      	movs	r2, r3
 8002662:	49e7      	ldr	r1, [pc, #924]	; (8002a00 <bma400_InitConfig+0x774>)
 8002664:	4be7      	ldr	r3, [pc, #924]	; (8002a04 <bma400_InitConfig+0x778>)
 8002666:	0018      	movs	r0, r3
 8002668:	f004 fd84 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 800266c:	2301      	movs	r3, #1
 800266e:	425b      	negs	r3, r3
 8002670:	49e4      	ldr	r1, [pc, #912]	; (8002a04 <bma400_InitConfig+0x778>)
 8002672:	48e5      	ldr	r0, [pc, #916]	; (8002a08 <bma400_InitConfig+0x77c>)
 8002674:	2214      	movs	r2, #20
 8002676:	f003 ffe3 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 800267a:	23fa      	movs	r3, #250	; 0xfa
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	0018      	movs	r0, r3
 8002680:	f001 f9be 	bl	8003a00 <HAL_Delay>

	//==========				INT1 high active			==========

	i2cBuf[0] = 0x02;
 8002684:	4be1      	ldr	r3, [pc, #900]	; (8002a0c <bma400_InitConfig+0x780>)
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_INT12_IO_CTRL, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800268a:	48e1      	ldr	r0, [pc, #900]	; (8002a10 <bma400_InitConfig+0x784>)
 800268c:	2301      	movs	r3, #1
 800268e:	425b      	negs	r3, r3
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	2301      	movs	r3, #1
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	4bdd      	ldr	r3, [pc, #884]	; (8002a0c <bma400_InitConfig+0x780>)
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	2224      	movs	r2, #36	; 0x24
 800269e:	2128      	movs	r1, #40	; 0x28
 80026a0:	f001 ff28 	bl	80044f4 <HAL_I2C_Mem_Write>
 80026a4:	0003      	movs	r3, r0
 80026a6:	001a      	movs	r2, r3
 80026a8:	4bda      	ldr	r3, [pc, #872]	; (8002a14 <bma400_InitConfig+0x788>)
 80026aa:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 80026ac:	4bd7      	ldr	r3, [pc, #860]	; (8002a0c <bma400_InitConfig+0x780>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 80026b2:	4bd8      	ldr	r3, [pc, #864]	; (8002a14 <bma400_InitConfig+0x788>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <bma400_InitConfig+0x43c>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80026ba:	4bd2      	ldr	r3, [pc, #840]	; (8002a04 <bma400_InitConfig+0x778>)
 80026bc:	4ad6      	ldr	r2, [pc, #856]	; (8002a18 <bma400_InitConfig+0x78c>)
 80026be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c0:	c313      	stmia	r3!, {r0, r1, r4}
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e023      	b.n	8002710 <bma400_InitConfig+0x484>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_INT12_IO_CTRL, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80026c8:	48d1      	ldr	r0, [pc, #836]	; (8002a10 <bma400_InitConfig+0x784>)
 80026ca:	2301      	movs	r3, #1
 80026cc:	425b      	negs	r3, r3
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	2301      	movs	r3, #1
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	4bc9      	ldr	r3, [pc, #804]	; (80029fc <bma400_InitConfig+0x770>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	2128      	movs	r1, #40	; 0x28
 80026de:	f002 f837 	bl	8004750 <HAL_I2C_Mem_Read>
 80026e2:	0003      	movs	r3, r0
 80026e4:	001a      	movs	r2, r3
 80026e6:	4bcb      	ldr	r3, [pc, #812]	; (8002a14 <bma400_InitConfig+0x788>)
 80026e8:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 80026ea:	4bca      	ldr	r3, [pc, #808]	; (8002a14 <bma400_InitConfig+0x788>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <bma400_InitConfig+0x474>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 80026f2:	4bc4      	ldr	r3, [pc, #784]	; (8002a04 <bma400_InitConfig+0x778>)
 80026f4:	4ac9      	ldr	r2, [pc, #804]	; (8002a1c <bma400_InitConfig+0x790>)
 80026f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026f8:	c313      	stmia	r3!, {r0, r1, r4}
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <bma400_InitConfig+0x484>
	  } else {
		  sprintf((char*)serialAccBuf, "int1act : %x\r\n", i2cBufRet[0]);
 8002700:	4bbe      	ldr	r3, [pc, #760]	; (80029fc <bma400_InitConfig+0x770>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	001a      	movs	r2, r3
 8002706:	49c6      	ldr	r1, [pc, #792]	; (8002a20 <bma400_InitConfig+0x794>)
 8002708:	4bbe      	ldr	r3, [pc, #760]	; (8002a04 <bma400_InitConfig+0x778>)
 800270a:	0018      	movs	r0, r3
 800270c:	f004 fd32 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002710:	2301      	movs	r3, #1
 8002712:	425b      	negs	r3, r3
 8002714:	49bb      	ldr	r1, [pc, #748]	; (8002a04 <bma400_InitConfig+0x778>)
 8002716:	48bc      	ldr	r0, [pc, #752]	; (8002a08 <bma400_InitConfig+0x77c>)
 8002718:	2214      	movs	r2, #20
 800271a:	f003 ff91 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 800271e:	23fa      	movs	r3, #250	; 0xfa
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	0018      	movs	r0, r3
 8002724:	f001 f96c 	bl	8003a00 <HAL_Delay>

	//==========				GEN1INT_CONFIG0				==========

	i2cBuf[0] = 0xFB;
 8002728:	4bb8      	ldr	r3, [pc, #736]	; (8002a0c <bma400_InitConfig+0x780>)
 800272a:	22fb      	movs	r2, #251	; 0xfb
 800272c:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800272e:	48b8      	ldr	r0, [pc, #736]	; (8002a10 <bma400_InitConfig+0x784>)
 8002730:	2301      	movs	r3, #1
 8002732:	425b      	negs	r3, r3
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2301      	movs	r3, #1
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	4bb4      	ldr	r3, [pc, #720]	; (8002a0c <bma400_InitConfig+0x780>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	2128      	movs	r1, #40	; 0x28
 8002744:	f001 fed6 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002748:	0003      	movs	r3, r0
 800274a:	001a      	movs	r2, r3
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <bma400_InitConfig+0x788>)
 800274e:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 8002750:	4bae      	ldr	r3, [pc, #696]	; (8002a0c <bma400_InitConfig+0x780>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 8002756:	4baf      	ldr	r3, [pc, #700]	; (8002a14 <bma400_InitConfig+0x788>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <bma400_InitConfig+0x4e0>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 800275e:	4ba9      	ldr	r3, [pc, #676]	; (8002a04 <bma400_InitConfig+0x778>)
 8002760:	4aad      	ldr	r2, [pc, #692]	; (8002a18 <bma400_InitConfig+0x78c>)
 8002762:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002764:	c313      	stmia	r3!, {r0, r1, r4}
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e023      	b.n	80027b4 <bma400_InitConfig+0x528>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 800276c:	48a8      	ldr	r0, [pc, #672]	; (8002a10 <bma400_InitConfig+0x784>)
 800276e:	2301      	movs	r3, #1
 8002770:	425b      	negs	r3, r3
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	4ba0      	ldr	r3, [pc, #640]	; (80029fc <bma400_InitConfig+0x770>)
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	2128      	movs	r1, #40	; 0x28
 8002782:	f001 ffe5 	bl	8004750 <HAL_I2C_Mem_Read>
 8002786:	0003      	movs	r3, r0
 8002788:	001a      	movs	r2, r3
 800278a:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <bma400_InitConfig+0x788>)
 800278c:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 800278e:	4ba1      	ldr	r3, [pc, #644]	; (8002a14 <bma400_InitConfig+0x788>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <bma400_InitConfig+0x518>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002796:	4b9b      	ldr	r3, [pc, #620]	; (8002a04 <bma400_InitConfig+0x778>)
 8002798:	4aa0      	ldr	r2, [pc, #640]	; (8002a1c <bma400_InitConfig+0x790>)
 800279a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800279c:	c313      	stmia	r3!, {r0, r1, r4}
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <bma400_InitConfig+0x528>
	  } else {
		  sprintf((char*)serialAccBuf, "actch0  : %x\r\n", i2cBufRet[0]);
 80027a4:	4b95      	ldr	r3, [pc, #596]	; (80029fc <bma400_InitConfig+0x770>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	001a      	movs	r2, r3
 80027aa:	499e      	ldr	r1, [pc, #632]	; (8002a24 <bma400_InitConfig+0x798>)
 80027ac:	4b95      	ldr	r3, [pc, #596]	; (8002a04 <bma400_InitConfig+0x778>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f004 fce0 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 80027b4:	2301      	movs	r3, #1
 80027b6:	425b      	negs	r3, r3
 80027b8:	4992      	ldr	r1, [pc, #584]	; (8002a04 <bma400_InitConfig+0x778>)
 80027ba:	4893      	ldr	r0, [pc, #588]	; (8002a08 <bma400_InitConfig+0x77c>)
 80027bc:	2214      	movs	r2, #20
 80027be:	f003 ff3f 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 80027c2:	23fa      	movs	r3, #250	; 0xfa
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	0018      	movs	r0, r3
 80027c8:	f001 f91a 	bl	8003a00 <HAL_Delay>

	//==========	OR with the 3 axis and detect activity	==========
	i2cBuf[0] = 0x02;
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <bma400_InitConfig+0x780>)
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80027d2:	488f      	ldr	r0, [pc, #572]	; (8002a10 <bma400_InitConfig+0x784>)
 80027d4:	2301      	movs	r3, #1
 80027d6:	425b      	negs	r3, r3
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	2301      	movs	r3, #1
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	4b8b      	ldr	r3, [pc, #556]	; (8002a0c <bma400_InitConfig+0x780>)
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	2128      	movs	r1, #40	; 0x28
 80027e8:	f001 fe84 	bl	80044f4 <HAL_I2C_Mem_Write>
 80027ec:	0003      	movs	r3, r0
 80027ee:	001a      	movs	r2, r3
 80027f0:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <bma400_InitConfig+0x788>)
 80027f2:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <bma400_InitConfig+0x780>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 80027fa:	4b86      	ldr	r3, [pc, #536]	; (8002a14 <bma400_InitConfig+0x788>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <bma400_InitConfig+0x584>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 8002802:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <bma400_InitConfig+0x778>)
 8002804:	4a84      	ldr	r2, [pc, #528]	; (8002a18 <bma400_InitConfig+0x78c>)
 8002806:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002808:	c313      	stmia	r3!, {r0, r1, r4}
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e023      	b.n	8002858 <bma400_InitConfig+0x5cc>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002810:	487f      	ldr	r0, [pc, #508]	; (8002a10 <bma400_InitConfig+0x784>)
 8002812:	2301      	movs	r3, #1
 8002814:	425b      	negs	r3, r3
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2301      	movs	r3, #1
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	4b77      	ldr	r3, [pc, #476]	; (80029fc <bma400_InitConfig+0x770>)
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	2128      	movs	r1, #40	; 0x28
 8002826:	f001 ff93 	bl	8004750 <HAL_I2C_Mem_Read>
 800282a:	0003      	movs	r3, r0
 800282c:	001a      	movs	r2, r3
 800282e:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <bma400_InitConfig+0x788>)
 8002830:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 8002832:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <bma400_InitConfig+0x788>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <bma400_InitConfig+0x5bc>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <bma400_InitConfig+0x778>)
 800283c:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <bma400_InitConfig+0x790>)
 800283e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002840:	c313      	stmia	r3!, {r0, r1, r4}
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e007      	b.n	8002858 <bma400_InitConfig+0x5cc>
	  } else {
		  sprintf((char*)serialAccBuf, "int1en  : %x\r\n", i2cBufRet[0]);
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <bma400_InitConfig+0x770>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	001a      	movs	r2, r3
 800284e:	4976      	ldr	r1, [pc, #472]	; (8002a28 <bma400_InitConfig+0x79c>)
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <bma400_InitConfig+0x778>)
 8002852:	0018      	movs	r0, r3
 8002854:	f004 fc8e 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002858:	2301      	movs	r3, #1
 800285a:	425b      	negs	r3, r3
 800285c:	4969      	ldr	r1, [pc, #420]	; (8002a04 <bma400_InitConfig+0x778>)
 800285e:	486a      	ldr	r0, [pc, #424]	; (8002a08 <bma400_InitConfig+0x77c>)
 8002860:	2214      	movs	r2, #20
 8002862:	f003 feed 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002866:	23fa      	movs	r3, #250	; 0xfa
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	0018      	movs	r0, r3
 800286c:	f001 f8c8 	bl	8003a00 <HAL_Delay>

	//==========

	i2cBuf[0] = 0x03;
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <bma400_InitConfig+0x780>)
 8002872:	2203      	movs	r2, #3
 8002874:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG2, 1, i2cBuf, 1, HAL_MAX_DELAY);
 8002876:	4866      	ldr	r0, [pc, #408]	; (8002a10 <bma400_InitConfig+0x784>)
 8002878:	2301      	movs	r3, #1
 800287a:	425b      	negs	r3, r3
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	2301      	movs	r3, #1
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <bma400_InitConfig+0x780>)
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2301      	movs	r3, #1
 8002888:	2241      	movs	r2, #65	; 0x41
 800288a:	2128      	movs	r1, #40	; 0x28
 800288c:	f001 fe32 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002890:	0003      	movs	r3, r0
 8002892:	001a      	movs	r2, r3
 8002894:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <bma400_InitConfig+0x788>)
 8002896:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 8002898:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <bma400_InitConfig+0x780>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 800289e:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <bma400_InitConfig+0x788>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <bma400_InitConfig+0x628>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <bma400_InitConfig+0x778>)
 80028a8:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <bma400_InitConfig+0x78c>)
 80028aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ac:	c313      	stmia	r3!, {r0, r1, r4}
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e023      	b.n	80028fc <bma400_InitConfig+0x670>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG2, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80028b4:	4856      	ldr	r0, [pc, #344]	; (8002a10 <bma400_InitConfig+0x784>)
 80028b6:	2301      	movs	r3, #1
 80028b8:	425b      	negs	r3, r3
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	2301      	movs	r3, #1
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <bma400_InitConfig+0x770>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2241      	movs	r2, #65	; 0x41
 80028c8:	2128      	movs	r1, #40	; 0x28
 80028ca:	f001 ff41 	bl	8004750 <HAL_I2C_Mem_Read>
 80028ce:	0003      	movs	r3, r0
 80028d0:	001a      	movs	r2, r3
 80028d2:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <bma400_InitConfig+0x788>)
 80028d4:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 80028d6:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <bma400_InitConfig+0x788>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <bma400_InitConfig+0x660>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <bma400_InitConfig+0x778>)
 80028e0:	4a4e      	ldr	r2, [pc, #312]	; (8002a1c <bma400_InitConfig+0x790>)
 80028e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028e4:	c313      	stmia	r3!, {r0, r1, r4}
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e007      	b.n	80028fc <bma400_InitConfig+0x670>
	  } else {
		  sprintf((char*)serialAccBuf, "int1en  : %x\r\n", i2cBufRet[0]);
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <bma400_InitConfig+0x770>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	001a      	movs	r2, r3
 80028f2:	494d      	ldr	r1, [pc, #308]	; (8002a28 <bma400_InitConfig+0x79c>)
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <bma400_InitConfig+0x778>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f004 fc3c 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 80028fc:	2301      	movs	r3, #1
 80028fe:	425b      	negs	r3, r3
 8002900:	4940      	ldr	r1, [pc, #256]	; (8002a04 <bma400_InitConfig+0x778>)
 8002902:	4841      	ldr	r0, [pc, #260]	; (8002a08 <bma400_InitConfig+0x77c>)
 8002904:	2214      	movs	r2, #20
 8002906:	f003 fe9b 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 800290a:	23fa      	movs	r3, #250	; 0xfa
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	0018      	movs	r0, r3
 8002910:	f001 f876 	bl	8003a00 <HAL_Delay>

	//==========

	i2cBuf[0] = 0x00;
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <bma400_InitConfig+0x780>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG3, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800291a:	483d      	ldr	r0, [pc, #244]	; (8002a10 <bma400_InitConfig+0x784>)
 800291c:	2301      	movs	r3, #1
 800291e:	425b      	negs	r3, r3
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2301      	movs	r3, #1
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <bma400_InitConfig+0x780>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	2242      	movs	r2, #66	; 0x42
 800292e:	2128      	movs	r1, #40	; 0x28
 8002930:	f001 fde0 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002934:	0003      	movs	r3, r0
 8002936:	001a      	movs	r2, r3
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <bma400_InitConfig+0x788>)
 800293a:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <bma400_InitConfig+0x780>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <bma400_InitConfig+0x788>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <bma400_InitConfig+0x6cc>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <bma400_InitConfig+0x778>)
 800294c:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <bma400_InitConfig+0x78c>)
 800294e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002950:	c313      	stmia	r3!, {r0, r1, r4}
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e023      	b.n	80029a0 <bma400_InitConfig+0x714>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG3, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002958:	482d      	ldr	r0, [pc, #180]	; (8002a10 <bma400_InitConfig+0x784>)
 800295a:	2301      	movs	r3, #1
 800295c:	425b      	negs	r3, r3
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2301      	movs	r3, #1
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <bma400_InitConfig+0x770>)
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2301      	movs	r3, #1
 800296a:	2242      	movs	r2, #66	; 0x42
 800296c:	2128      	movs	r1, #40	; 0x28
 800296e:	f001 feef 	bl	8004750 <HAL_I2C_Mem_Read>
 8002972:	0003      	movs	r3, r0
 8002974:	001a      	movs	r2, r3
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <bma400_InitConfig+0x788>)
 8002978:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <bma400_InitConfig+0x788>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <bma400_InitConfig+0x704>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <bma400_InitConfig+0x778>)
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <bma400_InitConfig+0x790>)
 8002986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002988:	c313      	stmia	r3!, {r0, r1, r4}
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e007      	b.n	80029a0 <bma400_InitConfig+0x714>
	  } else {
		  sprintf((char*)serialAccBuf, "int1en  : %x\r\n", i2cBufRet[0]);
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <bma400_InitConfig+0x770>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	001a      	movs	r2, r3
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <bma400_InitConfig+0x79c>)
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <bma400_InitConfig+0x778>)
 800299a:	0018      	movs	r0, r3
 800299c:	f004 fbea 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 80029a0:	2301      	movs	r3, #1
 80029a2:	425b      	negs	r3, r3
 80029a4:	4917      	ldr	r1, [pc, #92]	; (8002a04 <bma400_InitConfig+0x778>)
 80029a6:	4818      	ldr	r0, [pc, #96]	; (8002a08 <bma400_InitConfig+0x77c>)
 80029a8:	2214      	movs	r2, #20
 80029aa:	f003 fe49 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 80029ae:	23fa      	movs	r3, #250	; 0xfa
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 f824 	bl	8003a00 <HAL_Delay>

	//==========

	i2cBuf[0] = 0x01;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <bma400_InitConfig+0x780>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG31, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80029be:	4814      	ldr	r0, [pc, #80]	; (8002a10 <bma400_InitConfig+0x784>)
 80029c0:	2301      	movs	r3, #1
 80029c2:	425b      	negs	r3, r3
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	2301      	movs	r3, #1
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <bma400_InitConfig+0x780>)
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	2243      	movs	r2, #67	; 0x43
 80029d2:	2128      	movs	r1, #40	; 0x28
 80029d4:	f001 fd8e 	bl	80044f4 <HAL_I2C_Mem_Write>
 80029d8:	0003      	movs	r3, r0
 80029da:	001a      	movs	r2, r3
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <bma400_InitConfig+0x788>)
 80029de:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <bma400_InitConfig+0x780>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <bma400_InitConfig+0x788>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01e      	beq.n	8002a2c <bma400_InitConfig+0x7a0>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <bma400_InitConfig+0x778>)
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <bma400_InitConfig+0x78c>)
 80029f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029f4:	c313      	stmia	r3!, {r0, r1, r4}
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e03b      	b.n	8002a74 <bma400_InitConfig+0x7e8>
 80029fc:	200000a4 	.word	0x200000a4
 8002a00:	080088c8 	.word	0x080088c8
 8002a04:	20000090 	.word	0x20000090
 8002a08:	20000554 	.word	0x20000554
 8002a0c:	200004a4 	.word	0x200004a4
 8002a10:	200004c0 	.word	0x200004c0
 8002a14:	2000008c 	.word	0x2000008c
 8002a18:	08008868 	.word	0x08008868
 8002a1c:	08008878 	.word	0x08008878
 8002a20:	080088d8 	.word	0x080088d8
 8002a24:	080088e8 	.word	0x080088e8
 8002a28:	080088f8 	.word	0x080088f8
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_GEN1INT_CONFIG31, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002a2c:	4842      	ldr	r0, [pc, #264]	; (8002b38 <bma400_InitConfig+0x8ac>)
 8002a2e:	2301      	movs	r3, #1
 8002a30:	425b      	negs	r3, r3
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	2301      	movs	r3, #1
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <bma400_InitConfig+0x8b0>)
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	2243      	movs	r2, #67	; 0x43
 8002a40:	2128      	movs	r1, #40	; 0x28
 8002a42:	f001 fe85 	bl	8004750 <HAL_I2C_Mem_Read>
 8002a46:	0003      	movs	r3, r0
 8002a48:	001a      	movs	r2, r3
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002a4c:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <bma400_InitConfig+0x7d8>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002a58:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <bma400_InitConfig+0x8bc>)
 8002a5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a5c:	c313      	stmia	r3!, {r0, r1, r4}
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <bma400_InitConfig+0x7e8>
	  } else {
		  sprintf((char*)serialAccBuf, "int1en  : %x\r\n", i2cBufRet[0]);
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <bma400_InitConfig+0x8b0>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	001a      	movs	r2, r3
 8002a6a:	4938      	ldr	r1, [pc, #224]	; (8002b4c <bma400_InitConfig+0x8c0>)
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f004 fb80 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002a74:	2301      	movs	r3, #1
 8002a76:	425b      	negs	r3, r3
 8002a78:	4932      	ldr	r1, [pc, #200]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002a7a:	4835      	ldr	r0, [pc, #212]	; (8002b50 <bma400_InitConfig+0x8c4>)
 8002a7c:	2214      	movs	r2, #20
 8002a7e:	f003 fddf 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002a82:	23fa      	movs	r3, #250	; 0xfa
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 ffba 	bl	8003a00 <HAL_Delay>

	//==========			INT1 enable						==========

	i2cBuf[0] = 0x04;
 8002a8c:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <bma400_InitConfig+0x8c8>)
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
	hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_INT_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 8002a92:	4829      	ldr	r0, [pc, #164]	; (8002b38 <bma400_InitConfig+0x8ac>)
 8002a94:	2301      	movs	r3, #1
 8002a96:	425b      	negs	r3, r3
 8002a98:	9302      	str	r3, [sp, #8]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <bma400_InitConfig+0x8c8>)
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	2128      	movs	r1, #40	; 0x28
 8002aa8:	f001 fd24 	bl	80044f4 <HAL_I2C_Mem_Write>
 8002aac:	0003      	movs	r3, r0
 8002aae:	001a      	movs	r2, r3
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002ab2:	701a      	strb	r2, [r3, #0]
	i2cBuf[0] = 0x00;
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <bma400_InitConfig+0x8c8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
	if(hStat != HAL_OK){
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <bma400_InitConfig+0x844>
	  strcpy((char*)serialAccBuf, "Error Tx     \r\n");
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <bma400_InitConfig+0x8cc>)
 8002ac6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ac8:	c313      	stmia	r3!, {r0, r1, r4}
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e023      	b.n	8002b18 <bma400_InitConfig+0x88c>
	} else {
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_INT_CONFIG0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <bma400_InitConfig+0x8ac>)
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	425b      	negs	r3, r3
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <bma400_InitConfig+0x8b0>)
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	221f      	movs	r2, #31
 8002ae4:	2128      	movs	r1, #40	; 0x28
 8002ae6:	f001 fe33 	bl	8004750 <HAL_I2C_Mem_Read>
 8002aea:	0003      	movs	r3, r0
 8002aec:	001a      	movs	r2, r3
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002af0:	701a      	strb	r2, [r3, #0]
	  if(hStat != HAL_OK){
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <bma400_InitConfig+0x8b4>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <bma400_InitConfig+0x87c>
		  strcpy((char*)serialAccBuf, "Error Rx     \r\n");
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <bma400_InitConfig+0x8bc>)
 8002afe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b00:	c313      	stmia	r3!, {r0, r1, r4}
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <bma400_InitConfig+0x88c>
	  } else {
		  sprintf((char*)serialAccBuf, "int1en  : %x\r\n", i2cBufRet[0]);
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <bma400_InitConfig+0x8b0>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	490f      	ldr	r1, [pc, #60]	; (8002b4c <bma400_InitConfig+0x8c0>)
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f004 fb2e 	bl	8007174 <siprintf>
	  }
	}
	HAL_UART_Transmit(&huart2, serialAccBuf, sizeof(serialAccBuf), HAL_MAX_DELAY);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <bma400_InitConfig+0x8b8>)
 8002b1e:	480c      	ldr	r0, [pc, #48]	; (8002b50 <bma400_InitConfig+0x8c4>)
 8002b20:	2214      	movs	r2, #20
 8002b22:	f003 fd8d 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002b26:	23fa      	movs	r3, #250	; 0xfa
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 ff68 	bl	8003a00 <HAL_Delay>
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b001      	add	sp, #4
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	200004c0 	.word	0x200004c0
 8002b3c:	200000a4 	.word	0x200000a4
 8002b40:	2000008c 	.word	0x2000008c
 8002b44:	20000090 	.word	0x20000090
 8002b48:	08008878 	.word	0x08008878
 8002b4c:	080088f8 	.word	0x080088f8
 8002b50:	20000554 	.word	0x20000554
 8002b54:	200004a4 	.word	0x200004a4
 8002b58:	08008868 	.word	0x08008868

08002b5c <HAL_TIM_PeriodElapsedCallback>:
 */

#include "interrupts.h"
uint8_t serialBuf[SER_BUF_SIZE] = {'\0'};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10a      	bne.n	8002b82 <HAL_TIM_PeriodElapsedCallback+0x26>
		secondsOn++;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b76:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f001 f9dc 	bl	8003f3a <HAL_GPIO_TogglePin>
	}
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000514 	.word	0x20000514
 8002b90:	200005dc 	.word	0x200005dc
 8002b94:	50000400 	.word	0x50000400

08002b98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == SENSOR_INT_Pin){
 8002ba4:	1dbb      	adds	r3, r7, #6
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d10c      	bne.n	8002bca <HAL_GPIO_EXTI_Callback+0x32>
		strcpy((char*)serialBuf, "IntYey\r\n");
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_GPIO_EXTI_Callback+0x40>)
 8002bb4:	ca03      	ldmia	r2!, {r0, r1}
 8002bb6:	c303      	stmia	r3!, {r0, r1}
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	425b      	negs	r3, r3
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002bc2:	4806      	ldr	r0, [pc, #24]	; (8002bdc <HAL_GPIO_EXTI_Callback+0x44>)
 8002bc4:	2214      	movs	r2, #20
 8002bc6:	f003 fd3b 	bl	8006640 <HAL_UART_Transmit>
	}
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	200004ac 	.word	0x200004ac
 8002bd8:	08008908 	.word	0x08008908
 8002bdc:	20000554 	.word	0x20000554

08002be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	4c8a      	ldr	r4, [pc, #552]	; (8002e0c <main+0x22c>)
 8002be4:	44a5      	add	sp, r4
 8002be6:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef hStat;
	HAL_TIM_StateTypeDef tim6Status;

	uint8_t serialBuf[SER_BUF_SIZE] = {'\0'};
 8002be8:	24a5      	movs	r4, #165	; 0xa5
 8002bea:	0124      	lsls	r4, r4, #4
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f004 fab3 	bl	8007164 <memset>
	uint8_t i2cBuf[8]={0};
 8002bfe:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <main+0x230>)
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
	uint8_t i2cBufRet[FIFO_SIZE]={0};
 8002c0a:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <main+0x234>)
 8002c0c:	4d82      	ldr	r5, [pc, #520]	; (8002e18 <main+0x238>)
 8002c0e:	195b      	adds	r3, r3, r5
 8002c10:	19db      	adds	r3, r3, r7
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	3304      	adds	r3, #4
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f004 faa0 	bl	8007164 <memset>
	int16_t rawVal[3]={0};
 8002c24:	4b7d      	ldr	r3, [pc, #500]	; (8002e1c <main+0x23c>)
 8002c26:	195b      	adds	r3, r3, r5
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	001a      	movs	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	f004 fa97 	bl	8007164 <memset>
	int16_t myVal[F_SAMP] = {0};
 8002c36:	4b7a      	ldr	r3, [pc, #488]	; (8002e20 <main+0x240>)
 8002c38:	195b      	adds	r3, r3, r5
 8002c3a:	19db      	adds	r3, r3, r7
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	23c8      	movs	r3, #200	; 0xc8
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	001a      	movs	r2, r3
 8002c44:	2100      	movs	r1, #0
 8002c46:	f004 fa8d 	bl	8007164 <memset>
	int16_t fifoBytes = 0;
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <main+0x244>)
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2200      	movs	r2, #0
 8002c50:	801a      	strh	r2, [r3, #0]
	int16_t nbrOverSize = 0;
 8002c52:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <main+0x248>)
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2200      	movs	r2, #0
 8002c58:	801a      	strh	r2, [r3, #0]
	uint16_t timer_val = 0;
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <main+0x24c>)
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]

	secondsOn = 0;
 8002c62:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <main+0x250>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	801a      	strh	r2, [r3, #0]
	waterOn = 0;
 8002c68:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <main+0x254>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]

	uint16_t currentMemPos = 0;
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <main+0x258>)
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c76:	f000 fe53 	bl	8003920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c7a:	f000 fabb 	bl	80031f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c7e:	f000 fbdb 	bl	8003438 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c82:	f000 fba9 	bl	80033d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c86:	f000 fb2b 	bl	80032e0 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002c8a:	f000 fb69 	bl	8003360 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	sprintf(serialBuf, "Hello Boss   \r\n");
 8002c8e:	4a6b      	ldr	r2, [pc, #428]	; (8002e3c <main+0x25c>)
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f004 fa6d 	bl	8007174 <siprintf>
	HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	1939      	adds	r1, r7, r4
 8002ca0:	4867      	ldr	r0, [pc, #412]	; (8002e40 <main+0x260>)
 8002ca2:	2214      	movs	r2, #20
 8002ca4:	f003 fccc 	bl	8006640 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002ca8:	23fa      	movs	r3, #250	; 0xfa
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fea7 	bl	8003a00 <HAL_Delay>

    //Init sensor
    bma400_InitConfig();
 8002cb2:	f7ff faeb 	bl	800228c <bma400_InitConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002cb6:	4d63      	ldr	r5, [pc, #396]	; (8002e44 <main+0x264>)
 8002cb8:	197c      	adds	r4, r7, r5
 8002cba:	4863      	ldr	r0, [pc, #396]	; (8002e48 <main+0x268>)
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	425b      	negs	r3, r3
 8002cc0:	9302      	str	r3, [sp, #8]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	23c9      	movs	r3, #201	; 0xc9
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2212      	movs	r2, #18
 8002cd2:	2128      	movs	r1, #40	; 0x28
 8002cd4:	f001 fd3c 	bl	8004750 <HAL_I2C_Mem_Read>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 8002cdc:	197b      	adds	r3, r7, r5
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <main+0x124>
  		  strcpy((char*)serialBuf, "Error Rx2    \r\n");
 8002ce4:	21a5      	movs	r1, #165	; 0xa5
 8002ce6:	0109      	lsls	r1, r1, #4
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <main+0x26c>)
 8002cec:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002cee:	c331      	stmia	r3!, {r0, r4, r5}
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	601a      	str	r2, [r3, #0]
  		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	1879      	adds	r1, r7, r1
 8002cfa:	4851      	ldr	r0, [pc, #324]	; (8002e40 <main+0x260>)
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	f003 fc9f 	bl	8006640 <HAL_UART_Transmit>
 8002d02:	e007      	b.n	8002d14 <main+0x134>
  	  } else {
  		  fifoBytes = i2cBufRet[0];
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <main+0x234>)
 8002d06:	4a44      	ldr	r2, [pc, #272]	; (8002e18 <main+0x238>)
 8002d08:	189b      	adds	r3, r3, r2
 8002d0a:	19db      	adds	r3, r3, r7
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <main+0x244>)
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	801a      	strh	r2, [r3, #0]
  	  }
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002d14:	4d4b      	ldr	r5, [pc, #300]	; (8002e44 <main+0x264>)
 8002d16:	197c      	adds	r4, r7, r5
 8002d18:	484b      	ldr	r0, [pc, #300]	; (8002e48 <main+0x268>)
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	23c9      	movs	r3, #201	; 0xc9
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	2213      	movs	r2, #19
 8002d30:	2128      	movs	r1, #40	; 0x28
 8002d32:	f001 fd0d 	bl	8004750 <HAL_I2C_Mem_Read>
 8002d36:	0003      	movs	r3, r0
 8002d38:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00f      	beq.n	8002d62 <main+0x182>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 8002d42:	21a5      	movs	r1, #165	; 0xa5
 8002d44:	0109      	lsls	r1, r1, #4
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	4a41      	ldr	r2, [pc, #260]	; (8002e50 <main+0x270>)
 8002d4a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002d4c:	c331      	stmia	r3!, {r0, r4, r5}
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	601a      	str	r2, [r3, #0]
  		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002d52:	2301      	movs	r3, #1
 8002d54:	425b      	negs	r3, r3
 8002d56:	1879      	adds	r1, r7, r1
 8002d58:	4839      	ldr	r0, [pc, #228]	; (8002e40 <main+0x260>)
 8002d5a:	2214      	movs	r2, #20
 8002d5c:	f003 fc70 	bl	8006640 <HAL_UART_Transmit>
 8002d60:	e00c      	b.n	8002d7c <main+0x19c>
  	  } else {
  		  fifoBytes = fifoBytes | i2cBufRet[0]<<8;
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <main+0x234>)
 8002d64:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <main+0x238>)
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	19db      	adds	r3, r3, r7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b219      	sxth	r1, r3
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <main+0x244>)
 8002d72:	18bb      	adds	r3, r7, r2
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	801a      	strh	r2, [r3, #0]
  	  }
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_DATA, 1, i2cBufRet, fifoBytes, HAL_MAX_DELAY);
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <main+0x244>)
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	4d30      	ldr	r5, [pc, #192]	; (8002e44 <main+0x264>)
 8002d84:	197c      	adds	r4, r7, r5
 8002d86:	4830      	ldr	r0, [pc, #192]	; (8002e48 <main+0x268>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4252      	negs	r2, r2
 8002d8c:	9202      	str	r2, [sp, #8]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	23c9      	movs	r3, #201	; 0xc9
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	2214      	movs	r2, #20
 8002d9c:	2128      	movs	r1, #40	; 0x28
 8002d9e:	f001 fcd7 	bl	8004750 <HAL_I2C_Mem_Read>
 8002da2:	0003      	movs	r3, r0
 8002da4:	7023      	strb	r3, [r4, #0]
	  if(hStat != HAL_OK){
 8002da6:	197b      	adds	r3, r7, r5
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <main+0x1ee>
		  strcpy((char*)serialBuf, "Error Rx1    \r\n");
 8002dae:	21a5      	movs	r1, #165	; 0xa5
 8002db0:	0109      	lsls	r1, r1, #4
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <main+0x274>)
 8002db6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002db8:	c331      	stmia	r3!, {r0, r4, r5}
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	1879      	adds	r1, r7, r1
 8002dc4:	481e      	ldr	r0, [pc, #120]	; (8002e40 <main+0x260>)
 8002dc6:	2214      	movs	r2, #20
 8002dc8:	f003 fc3a 	bl	8006640 <HAL_UART_Transmit>
 8002dcc:	e168      	b.n	80030a0 <main+0x4c0>
	  } else {
		  for(uint8_t i = 0; i<(fifoBytes/7); i++){
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <main+0x278>)
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e0f6      	b.n	8002fc6 <main+0x3e6>
			  if(currentMemPos >= F_SAMP){
 8002dd8:	4917      	ldr	r1, [pc, #92]	; (8002e38 <main+0x258>)
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	23c8      	movs	r3, #200	; 0xc8
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d30b      	bcc.n	8002dfe <main+0x21e>
				  currentMemPos = 0;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]
				  nbrOverSize++;
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <main+0x248>)
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2200      	movs	r2, #0
 8002df2:	5e9b      	ldrsh	r3, [r3, r2]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	801a      	strh	r2, [r3, #0]
			  }
			  for(uint8_t j = 0; j<3; j++){
 8002dfe:	23a7      	movs	r3, #167	; 0xa7
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e07c      	b.n	8002f04 <main+0x324>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	fffff574 	.word	0xfffff574
 8002e10:	00000a48 	.word	0x00000a48
 8002e14:	fffffbd0 	.word	0xfffffbd0
 8002e18:	00000a78 	.word	0x00000a78
 8002e1c:	fffffbc8 	.word	0xfffffbc8
 8002e20:	fffff588 	.word	0xfffff588
 8002e24:	00000a76 	.word	0x00000a76
 8002e28:	00000a74 	.word	0x00000a74
 8002e2c:	00000a68 	.word	0x00000a68
 8002e30:	200005dc 	.word	0x200005dc
 8002e34:	200005de 	.word	0x200005de
 8002e38:	00000a72 	.word	0x00000a72
 8002e3c:	08008914 	.word	0x08008914
 8002e40:	20000554 	.word	0x20000554
 8002e44:	00000a67 	.word	0x00000a67
 8002e48:	200004c0 	.word	0x200004c0
 8002e4c:	08008924 	.word	0x08008924
 8002e50:	08008934 	.word	0x08008934
 8002e54:	08008944 	.word	0x08008944
 8002e58:	00000a71 	.word	0x00000a71
				  rawVal[j] = i2cBufRet[1+i*7+j*2] | i2cBufRet[2+i*7+j*2]<<4;
 8002e5c:	4dce      	ldr	r5, [pc, #824]	; (8003198 <main+0x5b8>)
 8002e5e:	197b      	adds	r3, r7, r5
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	0013      	movs	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	20a7      	movs	r0, #167	; 0xa7
 8002e6c:	0100      	lsls	r0, r0, #4
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	4ac9      	ldr	r2, [pc, #804]	; (800319c <main+0x5bc>)
 8002e78:	4cc9      	ldr	r4, [pc, #804]	; (80031a0 <main+0x5c0>)
 8002e7a:	1912      	adds	r2, r2, r4
 8002e7c:	19d2      	adds	r2, r2, r7
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	b219      	sxth	r1, r3
 8002e82:	197b      	adds	r3, r7, r5
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	0013      	movs	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	4ac1      	ldr	r2, [pc, #772]	; (800319c <main+0x5bc>)
 8002e98:	1912      	adds	r2, r2, r4
 8002e9a:	19d2      	adds	r2, r2, r7
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	183a      	adds	r2, r7, r0
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	b219      	sxth	r1, r3
 8002eaa:	4bbe      	ldr	r3, [pc, #760]	; (80031a4 <main+0x5c4>)
 8002eac:	191b      	adds	r3, r3, r4
 8002eae:	19db      	adds	r3, r3, r7
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	52d1      	strh	r1, [r2, r3]
				  if(i2cBufRet[2+i*7+j*2]>0x80){
 8002eb4:	197b      	adds	r3, r7, r5
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	0013      	movs	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	1c9a      	adds	r2, r3, #2
 8002ec0:	183b      	adds	r3, r7, r0
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	4ab4      	ldr	r2, [pc, #720]	; (800319c <main+0x5bc>)
 8002eca:	1912      	adds	r2, r2, r4
 8002ecc:	19d2      	adds	r2, r2, r7
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d910      	bls.n	8002ef6 <main+0x316>
					  rawVal[j] = rawVal[j] | 0xF<<12;
 8002ed4:	183b      	adds	r3, r7, r0
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	4bb2      	ldr	r3, [pc, #712]	; (80031a4 <main+0x5c4>)
 8002eda:	191b      	adds	r3, r3, r4
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	0052      	lsls	r2, r2, #1
 8002ee0:	5ed3      	ldrsh	r3, [r2, r3]
 8002ee2:	183a      	adds	r2, r7, r0
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	49b0      	ldr	r1, [pc, #704]	; (80031a8 <main+0x5c8>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	b219      	sxth	r1, r3
 8002eec:	4bad      	ldr	r3, [pc, #692]	; (80031a4 <main+0x5c4>)
 8002eee:	191b      	adds	r3, r3, r4
 8002ef0:	19db      	adds	r3, r3, r7
 8002ef2:	0052      	lsls	r2, r2, #1
 8002ef4:	52d1      	strh	r1, [r2, r3]
			  for(uint8_t j = 0; j<3; j++){
 8002ef6:	21a7      	movs	r1, #167	; 0xa7
 8002ef8:	0109      	lsls	r1, r1, #4
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	3201      	adds	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	23a7      	movs	r3, #167	; 0xa7
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d9a5      	bls.n	8002e5c <main+0x27c>
				  }
			  }
			  myVal[currentMemPos] = sqrt(pow(rawVal[0],2) + pow(rawVal[1],2) + pow(rawVal[2],2));
 8002f10:	4ba4      	ldr	r3, [pc, #656]	; (80031a4 <main+0x5c4>)
 8002f12:	4ea3      	ldr	r6, [pc, #652]	; (80031a0 <main+0x5c0>)
 8002f14:	199b      	adds	r3, r3, r6
 8002f16:	19db      	adds	r3, r3, r7
 8002f18:	2200      	movs	r2, #0
 8002f1a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff f95b 	bl	80021d8 <__aeabi_i2d>
 8002f22:	2200      	movs	r2, #0
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	f004 fd8e 	bl	8007a48 <pow>
 8002f2c:	0004      	movs	r4, r0
 8002f2e:	000d      	movs	r5, r1
 8002f30:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <main+0x5c4>)
 8002f32:	199b      	adds	r3, r3, r6
 8002f34:	19db      	adds	r3, r3, r7
 8002f36:	2202      	movs	r2, #2
 8002f38:	5e9b      	ldrsh	r3, [r3, r2]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7ff f94c 	bl	80021d8 <__aeabi_i2d>
 8002f40:	2200      	movs	r2, #0
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	f004 fd7f 	bl	8007a48 <pow>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	0020      	movs	r0, r4
 8002f50:	0029      	movs	r1, r5
 8002f52:	f7fd fbb1 	bl	80006b8 <__aeabi_dadd>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	0014      	movs	r4, r2
 8002f5c:	001d      	movs	r5, r3
 8002f5e:	4b91      	ldr	r3, [pc, #580]	; (80031a4 <main+0x5c4>)
 8002f60:	199b      	adds	r3, r3, r6
 8002f62:	19db      	adds	r3, r3, r7
 8002f64:	2204      	movs	r2, #4
 8002f66:	5e9b      	ldrsh	r3, [r3, r2]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff f935 	bl	80021d8 <__aeabi_i2d>
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	f004 fd68 	bl	8007a48 <pow>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	0020      	movs	r0, r4
 8002f7e:	0029      	movs	r1, r5
 8002f80:	f7fd fb9a 	bl	80006b8 <__aeabi_dadd>
 8002f84:	0002      	movs	r2, r0
 8002f86:	000b      	movs	r3, r1
 8002f88:	0010      	movs	r0, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	f004 fdca 	bl	8007b24 <sqrt>
 8002f90:	0002      	movs	r2, r0
 8002f92:	000b      	movs	r3, r1
 8002f94:	4d85      	ldr	r5, [pc, #532]	; (80031ac <main+0x5cc>)
 8002f96:	1979      	adds	r1, r7, r5
 8002f98:	880c      	ldrh	r4, [r1, #0]
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f7ff f8e5 	bl	800216c <__aeabi_d2iz>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	b219      	sxth	r1, r3
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <main+0x5d0>)
 8002fa8:	199b      	adds	r3, r3, r6
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	0062      	lsls	r2, r4, #1
 8002fae:	52d1      	strh	r1, [r2, r3]
			  currentMemPos++;
 8002fb0:	197b      	adds	r3, r7, r5
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	197b      	adds	r3, r7, r5
 8002fb6:	3201      	adds	r2, #1
 8002fb8:	801a      	strh	r2, [r3, #0]
		  for(uint8_t i = 0; i<(fifoBytes/7); i++){
 8002fba:	4977      	ldr	r1, [pc, #476]	; (8003198 <main+0x5b8>)
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	3201      	adds	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	4b74      	ldr	r3, [pc, #464]	; (8003198 <main+0x5b8>)
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781c      	ldrb	r4, [r3, #0]
 8002fcc:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <main+0x5d4>)
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fd4:	2107      	movs	r1, #7
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd f92a 	bl	8000230 <__divsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	b21b      	sxth	r3, r3
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	da00      	bge.n	8002fe6 <main+0x406>
 8002fe4:	e6f8      	b.n	8002dd8 <main+0x1f8>
		  }
		  uint8_t detection_count = 0;
 8002fe6:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <main+0x5d8>)
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
		  tim6Status = HAL_TIM_Base_GetState(&htim6);
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <main+0x5dc>)
 8002ff0:	18fc      	adds	r4, r7, r3
 8002ff2:	4b73      	ldr	r3, [pc, #460]	; (80031c0 <main+0x5e0>)
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f003 fa07 	bl	8006408 <HAL_TIM_Base_GetState>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	7023      	strb	r3, [r4, #0]
		  for(uint16_t i = 0; i < F_SAMP; i++){
 8002ffe:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <main+0x5e4>)
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2200      	movs	r2, #0
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e042      	b.n	800308e <main+0x4ae>
			  if(myVal[i] < MIDDLE_VAL + THRESHOLD && myVal[i] > MIDDLE_VAL - THRESHOLD){
 8003008:	496e      	ldr	r1, [pc, #440]	; (80031c4 <main+0x5e4>)
 800300a:	187b      	adds	r3, r7, r1
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <main+0x5d0>)
 8003010:	4863      	ldr	r0, [pc, #396]	; (80031a0 <main+0x5c0>)
 8003012:	181b      	adds	r3, r3, r0
 8003014:	19db      	adds	r3, r3, r7
 8003016:	0052      	lsls	r2, r2, #1
 8003018:	5ed3      	ldrsh	r3, [r2, r3]
 800301a:	4a6b      	ldr	r2, [pc, #428]	; (80031c8 <main+0x5e8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	dc17      	bgt.n	8003050 <main+0x470>
 8003020:	187b      	adds	r3, r7, r1
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <main+0x5d0>)
 8003026:	181b      	adds	r3, r3, r0
 8003028:	19db      	adds	r3, r3, r7
 800302a:	0052      	lsls	r2, r2, #1
 800302c:	5ed3      	ldrsh	r3, [r2, r3]
 800302e:	4a67      	ldr	r2, [pc, #412]	; (80031cc <main+0x5ec>)
 8003030:	4293      	cmp	r3, r2
 8003032:	dd0d      	ble.n	8003050 <main+0x470>
				  waterOn = 0;
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <main+0x5f0>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_Base_Stop_IT(&htim6);
 800303a:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <main+0x5e0>)
 800303c:	0018      	movs	r0, r3
 800303e:	f003 f8b5 	bl	80061ac <HAL_TIM_Base_Stop_IT>
				  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <main+0x5e0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <main+0x5f4>)
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	801a      	strh	r2, [r3, #0]
 800304e:	e018      	b.n	8003082 <main+0x4a2>
			  } else {
				  detection_count++;
 8003050:	4959      	ldr	r1, [pc, #356]	; (80031b8 <main+0x5d8>)
 8003052:	187b      	adds	r3, r7, r1
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	187b      	adds	r3, r7, r1
 8003058:	3201      	adds	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
				  if(detection_count >= MIN_COUNT){
 800305c:	187b      	adds	r3, r7, r1
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d90e      	bls.n	8003082 <main+0x4a2>
					  waterOn = 1;
 8003064:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <main+0x5f0>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
					  if(HAL_TIM_Base_GetState(&htim6) != HAL_TIM_STATE_BUSY){
 800306a:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <main+0x5e0>)
 800306c:	0018      	movs	r0, r3
 800306e:	f003 f9cb 	bl	8006408 <HAL_TIM_Base_GetState>
 8003072:	0003      	movs	r3, r0
 8003074:	2b02      	cmp	r3, #2
 8003076:	d012      	beq.n	800309e <main+0x4be>
						  HAL_TIM_Base_Start_IT(&htim6);
 8003078:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <main+0x5e0>)
 800307a:	0018      	movs	r0, r3
 800307c:	f003 f844 	bl	8006108 <HAL_TIM_Base_Start_IT>
					  }
					  break;
 8003080:	e00d      	b.n	800309e <main+0x4be>
		  for(uint16_t i = 0; i < F_SAMP; i++){
 8003082:	4950      	ldr	r1, [pc, #320]	; (80031c4 <main+0x5e4>)
 8003084:	187b      	adds	r3, r7, r1
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	187b      	adds	r3, r7, r1
 800308a:	3201      	adds	r2, #1
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <main+0x5e4>)
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	23c8      	movs	r3, #200	; 0xc8
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d3b5      	bcc.n	8003008 <main+0x428>
 800309c:	e000      	b.n	80030a0 <main+0x4c0>
					  break;
 800309e:	46c0      	nop			; (mov r8, r8)
				  }
			  }
		  }
	  }
	  if(waterOn == 0){
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <main+0x5f0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <main+0x4ce>
		  secondsOn = 0;
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <main+0x5f8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
	  }

	  for(uint8_t i = 0; i<SER_BUF_SIZE; i++){
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <main+0x5fc>)
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e00c      	b.n	80030d2 <main+0x4f2>
		  serialBuf[i] = 0;
 80030b8:	4848      	ldr	r0, [pc, #288]	; (80031dc <main+0x5fc>)
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	22a5      	movs	r2, #165	; 0xa5
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	18ba      	adds	r2, r7, r2
 80030c4:	2100      	movs	r1, #0
 80030c6:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t i = 0; i<SER_BUF_SIZE; i++){
 80030c8:	183b      	adds	r3, r7, r0
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	3201      	adds	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <main+0x5fc>)
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b13      	cmp	r3, #19
 80030da:	d9ed      	bls.n	80030b8 <main+0x4d8>
	  }

	  if(currentMemPos == F_SAMP){
 80030dc:	4933      	ldr	r1, [pc, #204]	; (80031ac <main+0x5cc>)
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	23c8      	movs	r3, #200	; 0xc8
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d124      	bne.n	8003134 <main+0x554>
		  sprintf((char*)serialBuf, "%d,%d,%d%d\r\n", waterOn, myVal[F_SAMP - 1], secondsOn, currentMemPos+800*nbrOverSize);
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <main+0x5f0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	001d      	movs	r5, r3
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <main+0x5d0>)
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <main+0x5c0>)
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	19db      	adds	r3, r3, r7
 80030f8:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <main+0x600>)
 80030fa:	5e9b      	ldrsh	r3, [r3, r2]
 80030fc:	001e      	movs	r6, r3
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <main+0x5f8>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	001c      	movs	r4, r3
 8003104:	187b      	adds	r3, r7, r1
 8003106:	8819      	ldrh	r1, [r3, #0]
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <main+0x604>)
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	5e9a      	ldrsh	r2, [r3, r2]
 8003110:	0013      	movs	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	189b      	adds	r3, r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	189b      	adds	r3, r3, r2
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	18cb      	adds	r3, r1, r3
 800311e:	4932      	ldr	r1, [pc, #200]	; (80031e8 <main+0x608>)
 8003120:	22a5      	movs	r2, #165	; 0xa5
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	18b8      	adds	r0, r7, r2
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	9400      	str	r4, [sp, #0]
 800312a:	0033      	movs	r3, r6
 800312c:	002a      	movs	r2, r5
 800312e:	f004 f821 	bl	8007174 <siprintf>
 8003132:	e026      	b.n	8003182 <main+0x5a2>
	  } else {
		  sprintf((char*)serialBuf, "%d,%d,%d,%d\r\n", waterOn, myVal[currentMemPos], secondsOn, currentMemPos+800*nbrOverSize);
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <main+0x5f0>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	001d      	movs	r5, r3
 800313a:	491c      	ldr	r1, [pc, #112]	; (80031ac <main+0x5cc>)
 800313c:	187b      	adds	r3, r7, r1
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <main+0x5d0>)
 8003142:	4817      	ldr	r0, [pc, #92]	; (80031a0 <main+0x5c0>)
 8003144:	181b      	adds	r3, r3, r0
 8003146:	19db      	adds	r3, r3, r7
 8003148:	0052      	lsls	r2, r2, #1
 800314a:	5ed3      	ldrsh	r3, [r2, r3]
 800314c:	001e      	movs	r6, r3
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <main+0x5f8>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	001c      	movs	r4, r3
 8003154:	187b      	adds	r3, r7, r1
 8003156:	8819      	ldrh	r1, [r3, #0]
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <main+0x604>)
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	5e9a      	ldrsh	r2, [r3, r2]
 8003160:	0013      	movs	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	189b      	adds	r3, r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	189b      	adds	r3, r3, r2
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	18cb      	adds	r3, r1, r3
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <main+0x60c>)
 8003170:	22a5      	movs	r2, #165	; 0xa5
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	18b8      	adds	r0, r7, r2
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	9400      	str	r4, [sp, #0]
 800317a:	0033      	movs	r3, r6
 800317c:	002a      	movs	r2, r5
 800317e:	f003 fff9 	bl	8007174 <siprintf>
	  }
	  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8003182:	2301      	movs	r3, #1
 8003184:	425b      	negs	r3, r3
 8003186:	22a5      	movs	r2, #165	; 0xa5
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	18b9      	adds	r1, r7, r2
 800318c:	4818      	ldr	r0, [pc, #96]	; (80031f0 <main+0x610>)
 800318e:	2214      	movs	r2, #20
 8003190:	f003 fa56 	bl	8006640 <HAL_UART_Transmit>
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8003194:	e58f      	b.n	8002cb6 <main+0xd6>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	00000a71 	.word	0x00000a71
 800319c:	fffffbd0 	.word	0xfffffbd0
 80031a0:	00000a78 	.word	0x00000a78
 80031a4:	fffffbc8 	.word	0xfffffbc8
 80031a8:	fffff000 	.word	0xfffff000
 80031ac:	00000a72 	.word	0x00000a72
 80031b0:	fffff588 	.word	0xfffff588
 80031b4:	00000a76 	.word	0x00000a76
 80031b8:	00000a6f 	.word	0x00000a6f
 80031bc:	00000a66 	.word	0x00000a66
 80031c0:	20000514 	.word	0x20000514
 80031c4:	00000a6c 	.word	0x00000a6c
 80031c8:	0000044a 	.word	0x0000044a
 80031cc:	000003b5 	.word	0x000003b5
 80031d0:	200005de 	.word	0x200005de
 80031d4:	00000a68 	.word	0x00000a68
 80031d8:	200005dc 	.word	0x200005dc
 80031dc:	00000a6b 	.word	0x00000a6b
 80031e0:	0000063e 	.word	0x0000063e
 80031e4:	00000a74 	.word	0x00000a74
 80031e8:	08008954 	.word	0x08008954
 80031ec:	08008964 	.word	0x08008964
 80031f0:	20000554 	.word	0x20000554

080031f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b09d      	sub	sp, #116	; 0x74
 80031f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fa:	2438      	movs	r4, #56	; 0x38
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	0018      	movs	r0, r3
 8003200:	2338      	movs	r3, #56	; 0x38
 8003202:	001a      	movs	r2, r3
 8003204:	2100      	movs	r1, #0
 8003206:	f003 ffad 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320a:	2324      	movs	r3, #36	; 0x24
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	0018      	movs	r0, r3
 8003210:	2314      	movs	r3, #20
 8003212:	001a      	movs	r2, r3
 8003214:	2100      	movs	r1, #0
 8003216:	f003 ffa5 	bl	8007164 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800321a:	003b      	movs	r3, r7
 800321c:	0018      	movs	r0, r3
 800321e:	2324      	movs	r3, #36	; 0x24
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f003 ff9e 	bl	8007164 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <SystemClock_Config+0xe4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <SystemClock_Config+0xe8>)
 800322e:	401a      	ands	r2, r3
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <SystemClock_Config+0xe4>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0109      	lsls	r1, r1, #4
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800323a:	0021      	movs	r1, r4
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2201      	movs	r2, #1
 8003246:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2210      	movs	r2, #16
 800324c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800324e:	187b      	adds	r3, r7, r1
 8003250:	2202      	movs	r2, #2
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2200      	movs	r2, #0
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	0312      	lsls	r2, r2, #12
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003262:	187b      	adds	r3, r7, r1
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	0412      	lsls	r2, r2, #16
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800326a:	187b      	adds	r3, r7, r1
 800326c:	0018      	movs	r0, r3
 800326e:	f001 ffb7 	bl	80051e0 <HAL_RCC_OscConfig>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d001      	beq.n	800327a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003276:	f000 f9e9 	bl	800364c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800327a:	2124      	movs	r1, #36	; 0x24
 800327c:	187b      	adds	r3, r7, r1
 800327e:	220f      	movs	r2, #15
 8003280:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2203      	movs	r2, #3
 8003286:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2101      	movs	r1, #1
 800329e:	0018      	movs	r0, r3
 80032a0:	f002 fb72 	bl	8005988 <HAL_RCC_ClockConfig>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80032a8:	f000 f9d0 	bl	800364c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80032ac:	003b      	movs	r3, r7
 80032ae:	220a      	movs	r2, #10
 80032b0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032b2:	003b      	movs	r3, r7
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032b8:	003b      	movs	r3, r7
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032be:	003b      	movs	r3, r7
 80032c0:	0018      	movs	r0, r3
 80032c2:	f002 fd85 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d001      	beq.n	80032ce <SystemClock_Config+0xda>
  {
    Error_Handler();
 80032ca:	f000 f9bf 	bl	800364c <Error_Handler>
  }
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b01d      	add	sp, #116	; 0x74
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40007000 	.word	0x40007000
 80032dc:	ffffe7ff 	.word	0xffffe7ff

080032e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <MX_I2C1_Init+0x74>)
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <MX_I2C1_Init+0x78>)
 80032e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <MX_I2C1_Init+0x74>)
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <MX_I2C1_Init+0x7c>)
 80032ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <MX_I2C1_Init+0x74>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <MX_I2C1_Init+0x74>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_I2C1_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MX_I2C1_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_I2C1_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_I2C1_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <MX_I2C1_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_I2C1_Init+0x74>)
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fe43 	bl	8003fa8 <HAL_I2C_Init>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003326:	f000 f991 	bl	800364c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <MX_I2C1_Init+0x74>)
 800332c:	2100      	movs	r1, #0
 800332e:	0018      	movs	r0, r3
 8003330:	f001 febe 	bl	80050b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d001      	beq.n	800333c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003338:	f000 f988 	bl	800364c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <MX_I2C1_Init+0x74>)
 800333e:	2100      	movs	r1, #0
 8003340:	0018      	movs	r0, r3
 8003342:	f001 ff01 	bl	8005148 <HAL_I2CEx_ConfigDigitalFilter>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800334a:	f000 f97f 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200004c0 	.word	0x200004c0
 8003358:	40005400 	.word	0x40005400
 800335c:	00707cbb 	.word	0x00707cbb

08003360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003366:	003b      	movs	r3, r7
 8003368:	0018      	movs	r0, r3
 800336a:	2308      	movs	r3, #8
 800336c:	001a      	movs	r2, r3
 800336e:	2100      	movs	r1, #0
 8003370:	f003 fef8 	bl	8007164 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <MX_TIM6_Init+0x70>)
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <MX_TIM6_Init+0x74>)
 8003378:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <MX_TIM6_Init+0x70>)
 800337c:	22fa      	movs	r2, #250	; 0xfa
 800337e:	01d2      	lsls	r2, r2, #7
 8003380:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <MX_TIM6_Init+0x70>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <MX_TIM6_Init+0x70>)
 800338a:	22fa      	movs	r2, #250	; 0xfa
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <MX_TIM6_Init+0x70>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <MX_TIM6_Init+0x70>)
 8003398:	0018      	movs	r0, r3
 800339a:	f002 fe75 	bl	8006088 <HAL_TIM_Base_Init>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM6_Init+0x46>
  {
    Error_Handler();
 80033a2:	f000 f953 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a6:	003b      	movs	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ac:	003b      	movs	r3, r7
 80033ae:	2200      	movs	r2, #0
 80033b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033b2:	003a      	movs	r2, r7
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <MX_TIM6_Init+0x70>)
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f003 f88f 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM6_Init+0x66>
  {
    Error_Handler();
 80033c2:	f000 f943 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b002      	add	sp, #8
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	20000514 	.word	0x20000514
 80033d4:	40001000 	.word	0x40001000

080033d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <MX_USART2_UART_Init+0x5c>)
 80033e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033e4:	22e1      	movs	r2, #225	; 0xe1
 80033e6:	0252      	lsls	r2, r2, #9
 80033e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_USART2_UART_Init+0x58>)
 80033fe:	220c      	movs	r2, #12
 8003400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_USART2_UART_Init+0x58>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <MX_USART2_UART_Init+0x58>)
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <MX_USART2_UART_Init+0x58>)
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <MX_USART2_UART_Init+0x58>)
 8003416:	2200      	movs	r2, #0
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <MX_USART2_UART_Init+0x58>)
 800341c:	0018      	movs	r0, r3
 800341e:	f003 f8bb 	bl	8006598 <HAL_UART_Init>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d001      	beq.n	800342a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003426:	f000 f911 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000554 	.word	0x20000554
 8003434:	40004400 	.word	0x40004400

08003438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b08b      	sub	sp, #44	; 0x2c
 800343c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343e:	2414      	movs	r4, #20
 8003440:	193b      	adds	r3, r7, r4
 8003442:	0018      	movs	r0, r3
 8003444:	2314      	movs	r3, #20
 8003446:	001a      	movs	r2, r3
 8003448:	2100      	movs	r1, #0
 800344a:	f003 fe8b 	bl	8007164 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b7b      	ldr	r3, [pc, #492]	; (800363c <MX_GPIO_Init+0x204>)
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <MX_GPIO_Init+0x204>)
 8003454:	2101      	movs	r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
 800345a:	4b78      	ldr	r3, [pc, #480]	; (800363c <MX_GPIO_Init+0x204>)
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	2201      	movs	r2, #1
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b75      	ldr	r3, [pc, #468]	; (800363c <MX_GPIO_Init+0x204>)
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	4b74      	ldr	r3, [pc, #464]	; (800363c <MX_GPIO_Init+0x204>)
 800346c:	2102      	movs	r1, #2
 800346e:	430a      	orrs	r2, r1
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
 8003472:	4b72      	ldr	r3, [pc, #456]	; (800363c <MX_GPIO_Init+0x204>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347e:	4b6f      	ldr	r3, [pc, #444]	; (800363c <MX_GPIO_Init+0x204>)
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <MX_GPIO_Init+0x204>)
 8003484:	2104      	movs	r1, #4
 8003486:	430a      	orrs	r2, r1
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
 800348a:	4b6c      	ldr	r3, [pc, #432]	; (800363c <MX_GPIO_Init+0x204>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	2204      	movs	r2, #4
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003496:	4b69      	ldr	r3, [pc, #420]	; (800363c <MX_GPIO_Init+0x204>)
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	4b68      	ldr	r3, [pc, #416]	; (800363c <MX_GPIO_Init+0x204>)
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	430a      	orrs	r2, r1
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034a2:	4b66      	ldr	r3, [pc, #408]	; (800363c <MX_GPIO_Init+0x204>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	4013      	ands	r3, r2
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80034ae:	2394      	movs	r3, #148	; 0x94
 80034b0:	0219      	lsls	r1, r3, #8
 80034b2:	23a0      	movs	r3, #160	; 0xa0
 80034b4:	05db      	lsls	r3, r3, #23
 80034b6:	2200      	movs	r2, #0
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 fd21 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80034be:	4b60      	ldr	r3, [pc, #384]	; (8003640 <MX_GPIO_Init+0x208>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	21c0      	movs	r1, #192	; 0xc0
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 fd1b 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 80034ca:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <MX_GPIO_Init+0x20c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	2107      	movs	r1, #7
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 fd15 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin;
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	2290      	movs	r2, #144	; 0x90
 80034da:	0212      	lsls	r2, r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2201      	movs	r2, #1
 80034e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	2202      	movs	r2, #2
 80034ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	193a      	adds	r2, r7, r4
 80034f2:	23a0      	movs	r3, #160	; 0xa0
 80034f4:	05db      	lsls	r3, r3, #23
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fb83 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	2208      	movs	r2, #8
 8003502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	193b      	adds	r3, r7, r4
 8003506:	2202      	movs	r2, #2
 8003508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	193b      	adds	r3, r7, r4
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2203      	movs	r2, #3
 8003514:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800351c:	193b      	adds	r3, r7, r4
 800351e:	4a48      	ldr	r2, [pc, #288]	; (8003640 <MX_GPIO_Init+0x208>)
 8003520:	0019      	movs	r1, r3
 8003522:	0010      	movs	r0, r2
 8003524:	f000 fb6e 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin SENSOR_INT_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|SENSOR_INT_Pin|PB0_RESERVED_Pin;
 8003528:	0021      	movs	r1, r4
 800352a:	187b      	adds	r3, r7, r1
 800352c:	4a46      	ldr	r2, [pc, #280]	; (8003648 <MX_GPIO_Init+0x210>)
 800352e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2288      	movs	r2, #136	; 0x88
 8003534:	0352      	lsls	r2, r2, #13
 8003536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	000c      	movs	r4, r1
 800353a:	193b      	adds	r3, r7, r4
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	193b      	adds	r3, r7, r4
 8003542:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <MX_GPIO_Init+0x208>)
 8003544:	0019      	movs	r1, r3
 8003546:	0010      	movs	r0, r2
 8003548:	f000 fb5c 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800354c:	193b      	adds	r3, r7, r4
 800354e:	22c0      	movs	r2, #192	; 0xc0
 8003550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003552:	193b      	adds	r3, r7, r4
 8003554:	2201      	movs	r2, #1
 8003556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	193b      	adds	r3, r7, r4
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	193b      	adds	r3, r7, r4
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	193b      	adds	r3, r7, r4
 8003566:	4a36      	ldr	r2, [pc, #216]	; (8003640 <MX_GPIO_Init+0x208>)
 8003568:	0019      	movs	r1, r3
 800356a:	0010      	movs	r0, r2
 800356c:	f000 fb4a 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8003570:	0021      	movs	r1, r4
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	0192      	lsls	r2, r2, #6
 8003578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2288      	movs	r2, #136	; 0x88
 800357e:	0352      	lsls	r2, r2, #13
 8003580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003588:	000c      	movs	r4, r1
 800358a:	187b      	adds	r3, r7, r1
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <MX_GPIO_Init+0x20c>)
 800358e:	0019      	movs	r1, r3
 8003590:	0010      	movs	r0, r2
 8003592:	f000 fb37 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003596:	0021      	movs	r1, r4
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	00d2      	lsls	r2, r2, #3
 800359e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a0:	000c      	movs	r4, r1
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	2201      	movs	r2, #1
 80035a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	193b      	adds	r3, r7, r4
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	193a      	adds	r2, r7, r4
 80035b6:	23a0      	movs	r3, #160	; 0xa0
 80035b8:	05db      	lsls	r3, r3, #23
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 fb21 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	2201      	movs	r2, #1
 80035cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	2202      	movs	r2, #2
 80035d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	193b      	adds	r3, r7, r4
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <MX_GPIO_Init+0x20c>)
 80035de:	0019      	movs	r1, r3
 80035e0:	0010      	movs	r0, r2
 80035e2:	f000 fb0f 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7_RESERVED_Pin PA6_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 80035e6:	0021      	movs	r1, r4
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	22c0      	movs	r2, #192	; 0xc0
 80035ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2202      	movs	r2, #2
 80035f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2203      	movs	r2, #3
 80035fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	187a      	adds	r2, r7, r1
 8003608:	23a0      	movs	r3, #160	; 0xa0
 800360a:	05db      	lsls	r3, r3, #23
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f000 faf8 	bl	8003c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003614:	2200      	movs	r2, #0
 8003616:	2100      	movs	r1, #0
 8003618:	2005      	movs	r0, #5
 800361a:	f000 fac1 	bl	8003ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800361e:	2005      	movs	r0, #5
 8003620:	f000 fad3 	bl	8003bca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	2007      	movs	r0, #7
 800362a:	f000 fab9 	bl	8003ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800362e:	2007      	movs	r0, #7
 8003630:	f000 facb 	bl	8003bca <HAL_NVIC_EnableIRQ>

}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b00b      	add	sp, #44	; 0x2c
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	50000400 	.word	0x50000400
 8003644:	50000800 	.word	0x50000800
 8003648:	00001013 	.word	0x00001013

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	e7fe      	b.n	8003654 <Error_Handler+0x8>
	...

08003658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_MspInit+0x24>)
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_MspInit+0x24>)
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_MspInit+0x24>)
 800366a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_MspInit+0x24>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0549      	lsls	r1, r1, #21
 8003672:	430a      	orrs	r2, r1
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	240c      	movs	r4, #12
 800368a:	193b      	adds	r3, r7, r4
 800368c:	0018      	movs	r0, r3
 800368e:	2314      	movs	r3, #20
 8003690:	001a      	movs	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	f003 fd66 	bl	8007164 <memset>
  if(hi2c->Instance==I2C1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_I2C_MspInit+0x80>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d129      	bne.n	80036f6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_I2C_MspInit+0x84>)
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_I2C_MspInit+0x84>)
 80036a8:	2102      	movs	r1, #2
 80036aa:	430a      	orrs	r2, r1
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_I2C_MspInit+0x84>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	22c0      	movs	r2, #192	; 0xc0
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c2:	0021      	movs	r1, r4
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	2212      	movs	r2, #18
 80036c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2201      	movs	r2, #1
 80036ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2203      	movs	r2, #3
 80036d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2204      	movs	r2, #4
 80036da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_I2C_MspInit+0x88>)
 80036e0:	0019      	movs	r1, r3
 80036e2:	0010      	movs	r0, r2
 80036e4:	f000 fa8e 	bl	8003c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_I2C_MspInit+0x84>)
 80036ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_I2C_MspInit+0x84>)
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	0389      	lsls	r1, r1, #14
 80036f2:	430a      	orrs	r2, r1
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b009      	add	sp, #36	; 0x24
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40005400 	.word	0x40005400
 8003704:	40021000 	.word	0x40021000
 8003708:	50000400 	.word	0x50000400

0800370c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_TIM_Base_MspInit+0x38>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10d      	bne.n	800373a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_TIM_Base_MspInit+0x3c>)
 8003720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_TIM_Base_MspInit+0x3c>)
 8003724:	2110      	movs	r1, #16
 8003726:	430a      	orrs	r2, r1
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	2011      	movs	r0, #17
 8003730:	f000 fa36 	bl	8003ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003734:	2011      	movs	r0, #17
 8003736:	f000 fa48 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	40001000 	.word	0x40001000
 8003748:	40021000 	.word	0x40021000

0800374c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	240c      	movs	r4, #12
 8003756:	193b      	adds	r3, r7, r4
 8003758:	0018      	movs	r0, r3
 800375a:	2314      	movs	r3, #20
 800375c:	001a      	movs	r2, r3
 800375e:	2100      	movs	r1, #0
 8003760:	f003 fd00 	bl	8007164 <memset>
  if(huart->Instance==USART2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_UART_MspInit+0x80>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d129      	bne.n	80037c2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_UART_MspInit+0x84>)
 8003770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003772:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_UART_MspInit+0x84>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0289      	lsls	r1, r1, #10
 8003778:	430a      	orrs	r2, r1
 800377a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_UART_MspInit+0x84>)
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_UART_MspInit+0x84>)
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_UART_MspInit+0x84>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	2201      	movs	r2, #1
 800378e:	4013      	ands	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003794:	0021      	movs	r1, r4
 8003796:	187b      	adds	r3, r7, r1
 8003798:	220c      	movs	r2, #12
 800379a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	187b      	adds	r3, r7, r1
 800379e:	2202      	movs	r2, #2
 80037a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2203      	movs	r2, #3
 80037ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2204      	movs	r2, #4
 80037b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	187a      	adds	r2, r7, r1
 80037b6:	23a0      	movs	r3, #160	; 0xa0
 80037b8:	05db      	lsls	r3, r3, #23
 80037ba:	0011      	movs	r1, r2
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 fa21 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b009      	add	sp, #36	; 0x24
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40021000 	.word	0x40021000

080037d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <NMI_Handler+0x4>

080037da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037de:	e7fe      	b.n	80037de <HardFault_Handler+0x4>

080037e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037f8:	f000 f8e6 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8003806:	2001      	movs	r0, #1
 8003808:	f000 fbb2 	bl	8003f70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 800380c:	2002      	movs	r0, #2
 800380e:	f000 fbaf 	bl	8003f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 800381c:	2010      	movs	r0, #16
 800381e:	f000 fba7 	bl	8003f70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_INT_Pin);
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	015b      	lsls	r3, r3, #5
 8003826:	0018      	movs	r0, r3
 8003828:	f000 fba2 	bl	8003f70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	019b      	lsls	r3, r3, #6
 8003830:	0018      	movs	r0, r3
 8003832:	f000 fb9d 	bl	8003f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <TIM6_DAC_IRQHandler+0x14>)
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fcd8 	bl	80061f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	20000514 	.word	0x20000514

08003854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <_sbrk+0x5c>)
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <_sbrk+0x60>)
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <_sbrk+0x64>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <_sbrk+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003884:	f003 fc44 	bl	8007110 <__errno>
 8003888:	0003      	movs	r3, r0
 800388a:	220c      	movs	r2, #12
 800388c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388e:	2301      	movs	r3, #1
 8003890:	425b      	negs	r3, r3
 8003892:	e009      	b.n	80038a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	18d2      	adds	r2, r2, r3
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <_sbrk+0x64>)
 80038a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b006      	add	sp, #24
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20005000 	.word	0x20005000
 80038b4:	00000400 	.word	0x00000400
 80038b8:	200005e0 	.word	0x200005e0
 80038bc:	200005f8 	.word	0x200005f8

080038c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80038ce:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038d0:	f7ff fff6 	bl	80038c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <LoopForever+0x6>)
  ldr r1, =_edata
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <LoopForever+0xa>)
  ldr r2, =_sidata
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <LoopForever+0xe>)
  movs r3, #0
 80038da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038dc:	e002      	b.n	80038e4 <LoopCopyDataInit>

080038de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e2:	3304      	adds	r3, #4

080038e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e8:	d3f9      	bcc.n	80038de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038ec:	4c0a      	ldr	r4, [pc, #40]	; (8003918 <LoopForever+0x16>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f0:	e001      	b.n	80038f6 <LoopFillZerobss>

080038f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f4:	3204      	adds	r2, #4

080038f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f8:	d3fb      	bcc.n	80038f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038fa:	f003 fc0f 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038fe:	f7ff f96f 	bl	8002be0 <main>

08003902 <LoopForever>:

LoopForever:
    b LoopForever
 8003902:	e7fe      	b.n	8003902 <LoopForever>
   ldr   r0, =_estack
 8003904:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800390c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003910:	08008ad8 	.word	0x08008ad8
  ldr r2, =_sbss
 8003914:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003918:	200005f8 	.word	0x200005f8

0800391c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800391c:	e7fe      	b.n	800391c <ADC1_COMP_IRQHandler>
	...

08003920 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_Init+0x3c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_Init+0x3c>)
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003938:	2000      	movs	r0, #0
 800393a:	f000 f811 	bl	8003960 <HAL_InitTick>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d003      	beq.n	800394a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e001      	b.n	800394e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800394a:	f7ff fe85 	bl	8003658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_InitTick+0x5c>)
 800396a:	681c      	ldr	r4, [r3, #0]
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_InitTick+0x60>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	0019      	movs	r1, r3
 8003972:	23fa      	movs	r3, #250	; 0xfa
 8003974:	0098      	lsls	r0, r3, #2
 8003976:	f7fc fbd1 	bl	800011c <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	0019      	movs	r1, r3
 800397e:	0020      	movs	r0, r4
 8003980:	f7fc fbcc 	bl	800011c <__udivsi3>
 8003984:	0003      	movs	r3, r0
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f92f 	bl	8003bea <HAL_SYSTICK_Config>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e00f      	b.n	80039b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d80b      	bhi.n	80039b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	2301      	movs	r3, #1
 800399e:	425b      	negs	r3, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f8fc 	bl	8003ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_InitTick+0x64>)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b003      	add	sp, #12
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000008 	.word	0x20000008
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	001a      	movs	r2, r3
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	18d2      	adds	r2, r2, r3
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_IncTick+0x20>)
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	20000008 	.word	0x20000008
 80039e8:	200005e4 	.word	0x200005e4

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_GetTick+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	200005e4 	.word	0x200005e4

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff fff0 	bl	80039ec <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d005      	beq.n	8003a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_Delay+0x44>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	001a      	movs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	f7ff ffe0 	bl	80039ec <HAL_GetTick>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d8f7      	bhi.n	8003a28 <HAL_Delay+0x28>
  {
  }
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000008 	.word	0x20000008

08003a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	0002      	movs	r2, r0
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5a:	d809      	bhi.n	8003a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	001a      	movs	r2, r3
 8003a62:	231f      	movs	r3, #31
 8003a64:	401a      	ands	r2, r3
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <__NVIC_EnableIRQ+0x30>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4091      	lsls	r1, r2
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]
  }
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	0002      	movs	r2, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a90:	d828      	bhi.n	8003ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a92:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <__NVIC_SetPriority+0xd4>)
 8003a94:	1dfb      	adds	r3, r7, #7
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	33c0      	adds	r3, #192	; 0xc0
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	589b      	ldr	r3, [r3, r2]
 8003aa2:	1dfa      	adds	r2, r7, #7
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	400a      	ands	r2, r1
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	21ff      	movs	r1, #255	; 0xff
 8003ab0:	4091      	lsls	r1, r2
 8003ab2:	000a      	movs	r2, r1
 8003ab4:	43d2      	mvns	r2, r2
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	401a      	ands	r2, r3
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	2303      	movs	r3, #3
 8003aca:	4003      	ands	r3, r0
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad0:	481f      	ldr	r0, [pc, #124]	; (8003b50 <__NVIC_SetPriority+0xd4>)
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	430a      	orrs	r2, r1
 8003adc:	33c0      	adds	r3, #192	; 0xc0
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ae2:	e031      	b.n	8003b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <__NVIC_SetPriority+0xd8>)
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	0019      	movs	r1, r3
 8003aec:	230f      	movs	r3, #15
 8003aee:	400b      	ands	r3, r1
 8003af0:	3b08      	subs	r3, #8
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3306      	adds	r3, #6
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	3304      	adds	r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	1dfa      	adds	r2, r7, #7
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	0011      	movs	r1, r2
 8003b04:	2203      	movs	r2, #3
 8003b06:	400a      	ands	r2, r1
 8003b08:	00d2      	lsls	r2, r2, #3
 8003b0a:	21ff      	movs	r1, #255	; 0xff
 8003b0c:	4091      	lsls	r1, r2
 8003b0e:	000a      	movs	r2, r1
 8003b10:	43d2      	mvns	r2, r2
 8003b12:	401a      	ands	r2, r3
 8003b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	22ff      	movs	r2, #255	; 0xff
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	1dfb      	adds	r3, r7, #7
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	0018      	movs	r0, r3
 8003b24:	2303      	movs	r3, #3
 8003b26:	4003      	ands	r3, r0
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b2c:	4809      	ldr	r0, [pc, #36]	; (8003b54 <__NVIC_SetPriority+0xd8>)
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	001c      	movs	r4, r3
 8003b34:	230f      	movs	r3, #15
 8003b36:	4023      	ands	r3, r4
 8003b38:	3b08      	subs	r3, #8
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	3306      	adds	r3, #6
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	18c3      	adds	r3, r0, r3
 8003b44:	3304      	adds	r3, #4
 8003b46:	601a      	str	r2, [r3, #0]
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b003      	add	sp, #12
 8003b4e:	bd90      	pop	{r4, r7, pc}
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	045b      	lsls	r3, r3, #17
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d301      	bcc.n	8003b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e010      	b.n	8003b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <SysTick_Config+0x44>)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	3a01      	subs	r2, #1
 8003b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	2103      	movs	r1, #3
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff7c 	bl	8003a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <SysTick_Config+0x44>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <SysTick_Config+0x44>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	e000e010 	.word	0xe000e010

08003ba0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	210f      	movs	r1, #15
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	1c02      	adds	r2, r0, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	0011      	movs	r1, r2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff ff5d 	bl	8003a7c <__NVIC_SetPriority>
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff ff33 	bl	8003a48 <__NVIC_EnableIRQ>
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ffaf 	bl	8003b58 <SysTick_Config>
 8003bfa:	0003      	movs	r3, r0
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c1a:	e155      	b.n	8003ec8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4091      	lsls	r1, r2
 8003c26:	000a      	movs	r2, r1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_GPIO_Init+0x30>
 8003c32:	e146      	b.n	8003ec2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d005      	beq.n	8003c4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2203      	movs	r2, #3
 8003c46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d130      	bne.n	8003cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	0013      	movs	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c82:	2201      	movs	r2, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	2201      	movs	r2, #1
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d017      	beq.n	8003cea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d123      	bne.n	8003d3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	58d3      	ldr	r3, [r2, r3]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2207      	movs	r2, #7
 8003d08:	4013      	ands	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	0013      	movs	r3, r2
 8003d12:	43da      	mvns	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2107      	movs	r1, #7
 8003d22:	400b      	ands	r3, r1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	23c0      	movs	r3, #192	; 0xc0
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d100      	bne.n	8003d80 <HAL_GPIO_Init+0x17c>
 8003d7e:	e0a0      	b.n	8003ec2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d80:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <HAL_GPIO_Init+0x2dc>)
 8003d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <HAL_GPIO_Init+0x2dc>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d8c:	4a55      	ldr	r2, [pc, #340]	; (8003ee4 <HAL_GPIO_Init+0x2e0>)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	3302      	adds	r3, #2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	589b      	ldr	r3, [r3, r2]
 8003d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	4013      	ands	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	409a      	lsls	r2, r3
 8003da6:	0013      	movs	r3, r2
 8003da8:	43da      	mvns	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	23a0      	movs	r3, #160	; 0xa0
 8003db4:	05db      	lsls	r3, r3, #23
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d01f      	beq.n	8003dfa <HAL_GPIO_Init+0x1f6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d019      	beq.n	8003df6 <HAL_GPIO_Init+0x1f2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_GPIO_Init+0x2e8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_GPIO_Init+0x1ee>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a48      	ldr	r2, [pc, #288]	; (8003ef0 <HAL_GPIO_Init+0x2ec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00d      	beq.n	8003dee <HAL_GPIO_Init+0x1ea>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a47      	ldr	r2, [pc, #284]	; (8003ef4 <HAL_GPIO_Init+0x2f0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <HAL_GPIO_Init+0x1e6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a46      	ldr	r2, [pc, #280]	; (8003ef8 <HAL_GPIO_Init+0x2f4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_GPIO_Init+0x1e2>
 8003de2:	2305      	movs	r3, #5
 8003de4:	e00a      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003de6:	2306      	movs	r3, #6
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	2103      	movs	r1, #3
 8003e00:	400a      	ands	r2, r1
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x2e0>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	035b      	lsls	r3, r3, #13
 8003e32:	4013      	ands	r3, r2
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	039b      	lsls	r3, r3, #14
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	4013      	ands	r3, r2
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	025b      	lsls	r3, r3, #9
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	40da      	lsrs	r2, r3
 8003ed0:	1e13      	subs	r3, r2, #0
 8003ed2:	d000      	beq.n	8003ed6 <HAL_GPIO_Init+0x2d2>
 8003ed4:	e6a2      	b.n	8003c1c <HAL_GPIO_Init+0x18>
  }
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	50000400 	.word	0x50000400
 8003eec:	50000800 	.word	0x50000800
 8003ef0:	50000c00 	.word	0x50000c00
 8003ef4:	50001000 	.word	0x50001000
 8003ef8:	50001c00 	.word	0x50001c00
 8003efc:	40010400 	.word	0x40010400

08003f00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	0008      	movs	r0, r1
 8003f0a:	0011      	movs	r1, r2
 8003f0c:	1cbb      	adds	r3, r7, #2
 8003f0e:	1c02      	adds	r2, r0, #0
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	1c7b      	adds	r3, r7, #1
 8003f14:	1c0a      	adds	r2, r1, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f18:	1c7b      	adds	r3, r7, #1
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f20:	1cbb      	adds	r3, r7, #2
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003f28:	e003      	b.n	8003f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003f2a:	1cbb      	adds	r3, r7, #2
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b002      	add	sp, #8
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	000a      	movs	r2, r1
 8003f44:	1cbb      	adds	r3, r7, #2
 8003f46:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f4e:	1cbb      	adds	r3, r7, #2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	041a      	lsls	r2, r3, #16
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	1cb9      	adds	r1, r7, #2
 8003f5e:	8809      	ldrh	r1, [r1, #0]
 8003f60:	400b      	ands	r3, r1
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	0002      	movs	r2, r0
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	1dba      	adds	r2, r7, #6
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	4013      	ands	r3, r2
 8003f86:	d008      	beq.n	8003f9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f8a:	1dba      	adds	r2, r7, #6
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f90:	1dbb      	adds	r3, r7, #6
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fe fdff 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e082      	b.n	80040c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2241      	movs	r2, #65	; 0x41
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2240      	movs	r2, #64	; 0x40
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fb55 	bl	8003680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2241      	movs	r2, #65	; 0x41
 8003fda:	2124      	movs	r1, #36	; 0x24
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4934      	ldr	r1, [pc, #208]	; (80040c8 <HAL_I2C_Init+0x120>)
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4931      	ldr	r1, [pc, #196]	; (80040cc <HAL_I2C_Init+0x124>)
 8004008:	400a      	ands	r2, r1
 800400a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0209      	lsls	r1, r1, #8
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	e007      	b.n	8004036 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2184      	movs	r1, #132	; 0x84
 8004030:	0209      	lsls	r1, r1, #8
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d104      	bne.n	8004048 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	0112      	lsls	r2, r2, #4
 8004046:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	491f      	ldr	r1, [pc, #124]	; (80040d0 <HAL_I2C_Init+0x128>)
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	491a      	ldr	r1, [pc, #104]	; (80040cc <HAL_I2C_Init+0x124>)
 8004064:	400a      	ands	r2, r1
 8004066:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	431a      	orrs	r2, r3
 8004072:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69d9      	ldr	r1, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2241      	movs	r2, #65	; 0x41
 80040ac:	2120      	movs	r1, #32
 80040ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2242      	movs	r2, #66	; 0x42
 80040ba:	2100      	movs	r1, #0
 80040bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	f0ffffff 	.word	0xf0ffffff
 80040cc:	ffff7fff 	.word	0xffff7fff
 80040d0:	02008000 	.word	0x02008000

080040d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	0008      	movs	r0, r1
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	0019      	movs	r1, r3
 80040e2:	230a      	movs	r3, #10
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	1c02      	adds	r2, r0, #0
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	2308      	movs	r3, #8
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	1c0a      	adds	r2, r1, #0
 80040f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2241      	movs	r2, #65	; 0x41
 80040f6:	5c9b      	ldrb	r3, [r3, r2]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d000      	beq.n	8004100 <HAL_I2C_Master_Transmit+0x2c>
 80040fe:	e0e7      	b.n	80042d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	5c9b      	ldrb	r3, [r3, r2]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2C_Master_Transmit+0x3a>
 800410a:	2302      	movs	r3, #2
 800410c:	e0e1      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004116:	f7ff fc69 	bl	80039ec <HAL_GetTick>
 800411a:	0003      	movs	r3, r0
 800411c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	0219      	lsls	r1, r3, #8
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2319      	movs	r3, #25
 800412a:	2201      	movs	r2, #1
 800412c:	f000 fd2c 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0cc      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2241      	movs	r2, #65	; 0x41
 800413c:	2121      	movs	r1, #33	; 0x21
 800413e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2242      	movs	r2, #66	; 0x42
 8004144:	2110      	movs	r1, #16
 8004146:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2208      	movs	r2, #8
 8004158:	18ba      	adds	r2, r7, r2
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d911      	bls.n	8004192 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22ff      	movs	r2, #255	; 0xff
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	b2da      	uxtb	r2, r3
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	045c      	lsls	r4, r3, #17
 800417e:	230a      	movs	r3, #10
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	8819      	ldrh	r1, [r3, #0]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	4b55      	ldr	r3, [pc, #340]	; (80042dc <HAL_I2C_Master_Transmit+0x208>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	0023      	movs	r3, r4
 800418c:	f000 ff56 	bl	800503c <I2C_TransferConfig>
 8004190:	e075      	b.n	800427e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	049c      	lsls	r4, r3, #18
 80041a6:	230a      	movs	r3, #10
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	8819      	ldrh	r1, [r3, #0]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_I2C_Master_Transmit+0x208>)
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	0023      	movs	r3, r4
 80041b4:	f000 ff42 	bl	800503c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041b8:	e061      	b.n	800427e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fd2f 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e081      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d03a      	beq.n	800427e <HAL_I2C_Master_Transmit+0x1aa>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d136      	bne.n	800427e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	0013      	movs	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	f000 fcb3 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e053      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2bff      	cmp	r3, #255	; 0xff
 8004232:	d911      	bls.n	8004258 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	b2da      	uxtb	r2, r3
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	045c      	lsls	r4, r3, #17
 8004244:	230a      	movs	r3, #10
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	8819      	ldrh	r1, [r3, #0]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	2300      	movs	r3, #0
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	0023      	movs	r3, r4
 8004252:	f000 fef3 	bl	800503c <I2C_TransferConfig>
 8004256:	e012      	b.n	800427e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	b2da      	uxtb	r2, r3
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	049c      	lsls	r4, r3, #18
 800426c:	230a      	movs	r3, #10
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	8819      	ldrh	r1, [r3, #0]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	0023      	movs	r3, r4
 800427a:	f000 fedf 	bl	800503c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d198      	bne.n	80041ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fd0e 	bl	8004cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e01a      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2220      	movs	r2, #32
 80042a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	490c      	ldr	r1, [pc, #48]	; (80042e0 <HAL_I2C_Master_Transmit+0x20c>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2241      	movs	r2, #65	; 0x41
 80042b8:	2120      	movs	r1, #32
 80042ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2242      	movs	r2, #66	; 0x42
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b007      	add	sp, #28
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	80002000 	.word	0x80002000
 80042e0:	fe00e800 	.word	0xfe00e800

080042e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	0008      	movs	r0, r1
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	0019      	movs	r1, r3
 80042f2:	230a      	movs	r3, #10
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	1c02      	adds	r2, r0, #0
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	2308      	movs	r3, #8
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	1c0a      	adds	r2, r1, #0
 8004300:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2241      	movs	r2, #65	; 0x41
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d000      	beq.n	8004310 <HAL_I2C_Master_Receive+0x2c>
 800430e:	e0e8      	b.n	80044e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	5c9b      	ldrb	r3, [r3, r2]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_I2C_Master_Receive+0x3a>
 800431a:	2302      	movs	r3, #2
 800431c:	e0e2      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2240      	movs	r2, #64	; 0x40
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004326:	f7ff fb61 	bl	80039ec <HAL_GetTick>
 800432a:	0003      	movs	r3, r0
 800432c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	0219      	lsls	r1, r3, #8
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	f000 fc24 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0cd      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2241      	movs	r2, #65	; 0x41
 800434c:	2122      	movs	r1, #34	; 0x22
 800434e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2242      	movs	r2, #66	; 0x42
 8004354:	2110      	movs	r1, #16
 8004356:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2208      	movs	r2, #8
 8004368:	18ba      	adds	r2, r7, r2
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2bff      	cmp	r3, #255	; 0xff
 800437c:	d911      	bls.n	80043a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	b2da      	uxtb	r2, r3
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	045c      	lsls	r4, r3, #17
 800438e:	230a      	movs	r3, #10
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	8819      	ldrh	r1, [r3, #0]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	4b55      	ldr	r3, [pc, #340]	; (80044ec <HAL_I2C_Master_Receive+0x208>)
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	0023      	movs	r3, r4
 800439c:	f000 fe4e 	bl	800503c <I2C_TransferConfig>
 80043a0:	e076      	b.n	8004490 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	049c      	lsls	r4, r3, #18
 80043b6:	230a      	movs	r3, #10
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	8819      	ldrh	r1, [r3, #0]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <HAL_I2C_Master_Receive+0x208>)
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	0023      	movs	r3, r4
 80043c4:	f000 fe3a 	bl	800503c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043c8:	e062      	b.n	8004490 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 fcb1 	bl	8004d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e082      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d03a      	beq.n	8004490 <HAL_I2C_Master_Receive+0x1ac>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d136      	bne.n	8004490 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	0013      	movs	r3, r2
 800442c:	2200      	movs	r2, #0
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	f000 fbaa 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e053      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2bff      	cmp	r3, #255	; 0xff
 8004444:	d911      	bls.n	800446a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	22ff      	movs	r2, #255	; 0xff
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	b2da      	uxtb	r2, r3
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	045c      	lsls	r4, r3, #17
 8004456:	230a      	movs	r3, #10
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	8819      	ldrh	r1, [r3, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	2300      	movs	r3, #0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	0023      	movs	r3, r4
 8004464:	f000 fdea 	bl	800503c <I2C_TransferConfig>
 8004468:	e012      	b.n	8004490 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	049c      	lsls	r4, r3, #18
 800447e:	230a      	movs	r3, #10
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	8819      	ldrh	r1, [r3, #0]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	2300      	movs	r3, #0
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	0023      	movs	r3, r4
 800448c:	f000 fdd6 	bl	800503c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d197      	bne.n	80043ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fc05 	bl	8004cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a6:	1e03      	subs	r3, r0, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e01a      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2220      	movs	r2, #32
 80044b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	490b      	ldr	r1, [pc, #44]	; (80044f0 <HAL_I2C_Master_Receive+0x20c>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2241      	movs	r2, #65	; 0x41
 80044ca:	2120      	movs	r1, #32
 80044cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2242      	movs	r2, #66	; 0x42
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2240      	movs	r2, #64	; 0x40
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b007      	add	sp, #28
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	80002400 	.word	0x80002400
 80044f0:	fe00e800 	.word	0xfe00e800

080044f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	000c      	movs	r4, r1
 80044fe:	0010      	movs	r0, r2
 8004500:	0019      	movs	r1, r3
 8004502:	230a      	movs	r3, #10
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	1c22      	adds	r2, r4, #0
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	2308      	movs	r3, #8
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	1c02      	adds	r2, r0, #0
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	1c0a      	adds	r2, r1, #0
 8004516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b20      	cmp	r3, #32
 8004522:	d000      	beq.n	8004526 <HAL_I2C_Mem_Write+0x32>
 8004524:	e10c      	b.n	8004740 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_I2C_Mem_Write+0x42>
 800452c:	232c      	movs	r3, #44	; 0x2c
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0092      	lsls	r2, r2, #2
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0ff      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	5c9b      	ldrb	r3, [r3, r2]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_I2C_Mem_Write+0x5c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0f8      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004558:	f7ff fa48 	bl	80039ec <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	0219      	lsls	r1, r3, #8
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2319      	movs	r3, #25
 800456c:	2201      	movs	r2, #1
 800456e:	f000 fb0b 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004572:	1e03      	subs	r3, r0, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0e3      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2241      	movs	r2, #65	; 0x41
 800457e:	2121      	movs	r1, #33	; 0x21
 8004580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2242      	movs	r2, #66	; 0x42
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	222c      	movs	r2, #44	; 0x2c
 800459a:	18ba      	adds	r2, r7, r2
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	1dbb      	adds	r3, r7, #6
 80045a8:	881c      	ldrh	r4, [r3, #0]
 80045aa:	2308      	movs	r3, #8
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	230a      	movs	r3, #10
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	8819      	ldrh	r1, [r3, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	0023      	movs	r3, r4
 80045c2:	f000 f9f9 	bl	80049b8 <I2C_RequestMemoryWrite>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2240      	movs	r2, #64	; 0x40
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0b5      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2bff      	cmp	r3, #255	; 0xff
 80045de:	d911      	bls.n	8004604 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	045c      	lsls	r4, r3, #17
 80045f0:	230a      	movs	r3, #10
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	8819      	ldrh	r1, [r3, #0]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	0023      	movs	r3, r4
 80045fe:	f000 fd1d 	bl	800503c <I2C_TransferConfig>
 8004602:	e012      	b.n	800462a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	b2da      	uxtb	r2, r3
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	049c      	lsls	r4, r3, #18
 8004618:	230a      	movs	r3, #10
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	8819      	ldrh	r1, [r3, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	0023      	movs	r3, r4
 8004626:	f000 fd09 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 faf7 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e081      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03a      	beq.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d136      	bne.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	f000 fa7b 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e053      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2bff      	cmp	r3, #255	; 0xff
 80046a2:	d911      	bls.n	80046c8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	; 0xff
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	045c      	lsls	r4, r3, #17
 80046b4:	230a      	movs	r3, #10
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	2300      	movs	r3, #0
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0023      	movs	r3, r4
 80046c2:	f000 fcbb 	bl	800503c <I2C_TransferConfig>
 80046c6:	e012      	b.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	049c      	lsls	r4, r3, #18
 80046dc:	230a      	movs	r3, #10
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	8819      	ldrh	r1, [r3, #0]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	0023      	movs	r3, r4
 80046ea:	f000 fca7 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d198      	bne.n	800462a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 fad6 	bl	8004cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e01a      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2220      	movs	r2, #32
 8004712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	490b      	ldr	r1, [pc, #44]	; (800474c <HAL_I2C_Mem_Write+0x258>)
 8004720:	400a      	ands	r2, r1
 8004722:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2241      	movs	r2, #65	; 0x41
 8004728:	2120      	movs	r1, #32
 800472a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2242      	movs	r2, #66	; 0x42
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b007      	add	sp, #28
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	000c      	movs	r4, r1
 800475a:	0010      	movs	r0, r2
 800475c:	0019      	movs	r1, r3
 800475e:	230a      	movs	r3, #10
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	1c22      	adds	r2, r4, #0
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	2308      	movs	r3, #8
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	1c02      	adds	r2, r0, #0
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	1dbb      	adds	r3, r7, #6
 8004770:	1c0a      	adds	r2, r1, #0
 8004772:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2241      	movs	r2, #65	; 0x41
 8004778:	5c9b      	ldrb	r3, [r3, r2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d000      	beq.n	8004782 <HAL_I2C_Mem_Read+0x32>
 8004780:	e110      	b.n	80049a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_I2C_Mem_Read+0x42>
 8004788:	232c      	movs	r3, #44	; 0x2c
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e103      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2240      	movs	r2, #64	; 0x40
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_I2C_Mem_Read+0x5c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0fc      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047b4:	f7ff f91a 	bl	80039ec <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	0219      	lsls	r1, r3, #8
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2319      	movs	r3, #25
 80047c8:	2201      	movs	r2, #1
 80047ca:	f000 f9dd 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80047ce:	1e03      	subs	r3, r0, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2241      	movs	r2, #65	; 0x41
 80047da:	2122      	movs	r1, #34	; 0x22
 80047dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2242      	movs	r2, #66	; 0x42
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	222c      	movs	r2, #44	; 0x2c
 80047f6:	18ba      	adds	r2, r7, r2
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004802:	1dbb      	adds	r3, r7, #6
 8004804:	881c      	ldrh	r4, [r3, #0]
 8004806:	2308      	movs	r3, #8
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	230a      	movs	r3, #10
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	8819      	ldrh	r1, [r3, #0]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	0023      	movs	r3, r4
 800481e:	f000 f92f 	bl	8004a80 <I2C_RequestMemoryRead>
 8004822:	1e03      	subs	r3, r0, #0
 8004824:	d005      	beq.n	8004832 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0b9      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2bff      	cmp	r3, #255	; 0xff
 800483a:	d911      	bls.n	8004860 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	b2da      	uxtb	r2, r3
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	045c      	lsls	r4, r3, #17
 800484c:	230a      	movs	r3, #10
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	8819      	ldrh	r1, [r3, #0]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <HAL_I2C_Mem_Read+0x260>)
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	0023      	movs	r3, r4
 800485a:	f000 fbef 	bl	800503c <I2C_TransferConfig>
 800485e:	e012      	b.n	8004886 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	049c      	lsls	r4, r3, #18
 8004874:	230a      	movs	r3, #10
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	8819      	ldrh	r1, [r3, #0]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_I2C_Mem_Read+0x260>)
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	0023      	movs	r3, r4
 8004882:	f000 fbdb 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	0013      	movs	r3, r2
 8004890:	2200      	movs	r2, #0
 8004892:	2104      	movs	r1, #4
 8004894:	f000 f978 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e082      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03a      	beq.n	8004952 <HAL_I2C_Mem_Read+0x202>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d136      	bne.n	8004952 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	0013      	movs	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	f000 f949 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e053      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2bff      	cmp	r3, #255	; 0xff
 8004906:	d911      	bls.n	800492c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	22ff      	movs	r2, #255	; 0xff
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	b2da      	uxtb	r2, r3
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	045c      	lsls	r4, r3, #17
 8004918:	230a      	movs	r3, #10
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	8819      	ldrh	r1, [r3, #0]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0023      	movs	r3, r4
 8004926:	f000 fb89 	bl	800503c <I2C_TransferConfig>
 800492a:	e012      	b.n	8004952 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	b2da      	uxtb	r2, r3
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	049c      	lsls	r4, r3, #18
 8004940:	230a      	movs	r3, #10
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	8819      	ldrh	r1, [r3, #0]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	2300      	movs	r3, #0
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	0023      	movs	r3, r4
 800494e:	f000 fb75 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d194      	bne.n	8004886 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 f9a4 	bl	8004cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e01a      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	490c      	ldr	r1, [pc, #48]	; (80049b4 <HAL_I2C_Mem_Read+0x264>)
 8004984:	400a      	ands	r2, r1
 8004986:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	2120      	movs	r1, #32
 800498e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2242      	movs	r2, #66	; 0x42
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	2100      	movs	r1, #0
 800499e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b007      	add	sp, #28
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	80002400 	.word	0x80002400
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	000c      	movs	r4, r1
 80049c2:	0010      	movs	r0, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	250a      	movs	r5, #10
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	1c22      	adds	r2, r4, #0
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	2308      	movs	r3, #8
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	1dbb      	adds	r3, r7, #6
 80049d8:	1c0a      	adds	r2, r1, #0
 80049da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049dc:	1dbb      	adds	r3, r7, #6
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	045c      	lsls	r4, r3, #17
 80049e6:	197b      	adds	r3, r7, r5
 80049e8:	8819      	ldrh	r1, [r3, #0]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <I2C_RequestMemoryWrite+0xc4>)
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	0023      	movs	r3, r4
 80049f2:	f000 fb23 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f911 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e033      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0a:	1dbb      	adds	r3, r7, #6
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a12:	2308      	movs	r3, #8
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e019      	b.n	8004a56 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a22:	2308      	movs	r3, #8
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	6a39      	ldr	r1, [r7, #32]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f8f2 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e014      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a48:	2308      	movs	r3, #8
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	0013      	movs	r3, r2
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	f000 f890 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	80002000 	.word	0x80002000

08004a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	000c      	movs	r4, r1
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	250a      	movs	r5, #10
 8004a90:	197b      	adds	r3, r7, r5
 8004a92:	1c22      	adds	r2, r4, #0
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	2308      	movs	r3, #8
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	1c02      	adds	r2, r0, #0
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	1c0a      	adds	r2, r1, #0
 8004aa2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aa4:	1dbb      	adds	r3, r7, #6
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	197b      	adds	r3, r7, r5
 8004aac:	8819      	ldrh	r1, [r3, #0]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <I2C_RequestMemoryRead+0xc0>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f000 fac1 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f8af 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e033      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ace:	1dbb      	adds	r3, r7, #6
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae4:	e019      	b.n	8004b1a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	6a39      	ldr	r1, [r7, #32]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f890 	bl	8004c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e014      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	0013      	movs	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	; 0x40
 8004b28:	f000 f82e 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	80002000 	.word	0x80002000

08004b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2202      	movs	r2, #2
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d103      	bne.n	8004b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d007      	beq.n	8004b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
  }
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	1dfb      	adds	r3, r7, #7
 8004b96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e030      	b.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	d02d      	beq.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7fe ff24 	bl	80039ec <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d122      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	425a      	negs	r2, r3
 8004bc6:	4153      	adcs	r3, r2
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	001a      	movs	r2, r3
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d113      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	2220      	movs	r2, #32
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2241      	movs	r2, #65	; 0x41
 8004be4:	2120      	movs	r1, #32
 8004be6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2242      	movs	r2, #66	; 0x42
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2240      	movs	r2, #64	; 0x40
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e00f      	b.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	425a      	negs	r2, r3
 8004c0c:	4153      	adcs	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	001a      	movs	r2, r3
 8004c12:	1dfb      	adds	r3, r7, #7
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d0bf      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c30:	e032      	b.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 f8ff 	bl	8004e3c <I2C_IsErrorOccurred>
 8004c3e:	1e03      	subs	r3, r0, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e030      	b.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d025      	beq.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fe fece 	bl	80039ec <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11a      	bne.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d013      	beq.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	2220      	movs	r2, #32
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2241      	movs	r2, #65	; 0x41
 8004c80:	2120      	movs	r1, #32
 8004c82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2242      	movs	r2, #66	; 0x42
 8004c88:	2100      	movs	r1, #0
 8004c8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e007      	b.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d1c5      	bne.n	8004c32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b004      	add	sp, #16
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cbc:	e02f      	b.n	8004d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 f8b9 	bl	8004e3c <I2C_IsErrorOccurred>
 8004cca:	1e03      	subs	r3, r0, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e02d      	b.n	8004d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fe fe8b 	bl	80039ec <HAL_GetTick>
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11a      	bne.n	8004d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d013      	beq.n	8004d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	2120      	movs	r1, #32
 8004d08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2242      	movs	r2, #66	; 0x42
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e007      	b.n	8004d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2220      	movs	r2, #32
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d1c8      	bne.n	8004cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d44:	e06b      	b.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f875 	bl	8004e3c <I2C_IsErrorOccurred>
 8004d52:	1e03      	subs	r3, r0, #0
 8004d54:	d001      	beq.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e069      	b.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2220      	movs	r2, #32
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d138      	bne.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d105      	bne.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e055      	b.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d107      	bne.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d9e:	e002      	b.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2220      	movs	r2, #32
 8004dac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	491f      	ldr	r1, [pc, #124]	; (8004e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004dba:	400a      	ands	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2241      	movs	r2, #65	; 0x41
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2242      	movs	r2, #66	; 0x42
 8004dca:	2100      	movs	r1, #0
 8004dcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2240      	movs	r2, #64	; 0x40
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e029      	b.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fe fe07 	bl	80039ec <HAL_GetTick>
 8004dde:	0002      	movs	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2204      	movs	r2, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00f      	beq.n	8004e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	2220      	movs	r2, #32
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2241      	movs	r2, #65	; 0x41
 8004e0e:	2120      	movs	r1, #32
 8004e10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e007      	b.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2204      	movs	r2, #4
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d18c      	bne.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b004      	add	sp, #16
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	fe00e800 	.word	0xfe00e800

08004e3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b08b      	sub	sp, #44	; 0x2c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2327      	movs	r3, #39	; 0x27
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2210      	movs	r2, #16
 8004e64:	4013      	ands	r3, r2
 8004e66:	d100      	bne.n	8004e6a <I2C_IsErrorOccurred+0x2e>
 8004e68:	e082      	b.n	8004f70 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e72:	e060      	b.n	8004f36 <I2C_IsErrorOccurred+0xfa>
 8004e74:	2427      	movs	r4, #39	; 0x27
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	193a      	adds	r2, r7, r4
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	d058      	beq.n	8004f36 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7fe fdb2 	bl	80039ec <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d306      	bcc.n	8004ea2 <I2C_IsErrorOccurred+0x66>
 8004e94:	193b      	adds	r3, r7, r4
 8004e96:	193a      	adds	r2, r7, r4
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d149      	bne.n	8004f36 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	4013      	ands	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004eb0:	2013      	movs	r0, #19
 8004eb2:	183b      	adds	r3, r7, r0
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	2142      	movs	r1, #66	; 0x42
 8004eb8:	5c52      	ldrb	r2, [r2, r1]
 8004eba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d126      	bne.n	8004f1e <I2C_IsErrorOccurred+0xe2>
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	01db      	lsls	r3, r3, #7
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d021      	beq.n	8004f1e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d01d      	beq.n	8004f1e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	01c9      	lsls	r1, r1, #7
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ef4:	f7fe fd7a 	bl	80039ec <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004efc:	e00f      	b.n	8004f1e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004efe:	f7fe fd75 	bl	80039ec <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b19      	cmp	r3, #25
 8004f0a:	d908      	bls.n	8004f1e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	4313      	orrs	r3, r2
 8004f12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f14:	2327      	movs	r3, #39	; 0x27
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]

              break;
 8004f1c:	e00b      	b.n	8004f36 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2220      	movs	r2, #32
 8004f26:	4013      	ands	r3, r2
 8004f28:	2127      	movs	r1, #39	; 0x27
 8004f2a:	187a      	adds	r2, r7, r1
 8004f2c:	1879      	adds	r1, r7, r1
 8004f2e:	7809      	ldrb	r1, [r1, #0]
 8004f30:	7011      	strb	r1, [r2, #0]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d1e3      	bne.n	8004efe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d004      	beq.n	8004f4e <I2C_IsErrorOccurred+0x112>
 8004f44:	2327      	movs	r3, #39	; 0x27
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d092      	beq.n	8004e74 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f4e:	2327      	movs	r3, #39	; 0x27
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2204      	movs	r2, #4
 8004f64:	4313      	orrs	r3, r2
 8004f66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f68:	2327      	movs	r3, #39	; 0x27
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d00c      	beq.n	8004f9c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4313      	orrs	r3, r2
 8004f88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	0052      	lsls	r2, r2, #1
 8004f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f94:	2327      	movs	r3, #39	; 0x27
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d00c      	beq.n	8004fc0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	4313      	orrs	r3, r2
 8004fac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	00d2      	lsls	r2, r2, #3
 8004fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb8:	2327      	movs	r3, #39	; 0x27
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d00c      	beq.n	8004fe4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fdc:	2327      	movs	r3, #39	; 0x27
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004fe4:	2327      	movs	r3, #39	; 0x27
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01d      	beq.n	800502a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7ff fda7 	bl	8004b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	490d      	ldr	r1, [pc, #52]	; (8005038 <I2C_IsErrorOccurred+0x1fc>)
 8005002:	400a      	ands	r2, r1
 8005004:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	431a      	orrs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2241      	movs	r2, #65	; 0x41
 8005016:	2120      	movs	r1, #32
 8005018:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2242      	movs	r2, #66	; 0x42
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800502a:	2327      	movs	r3, #39	; 0x27
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	781b      	ldrb	r3, [r3, #0]
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b00b      	add	sp, #44	; 0x2c
 8005036:	bd90      	pop	{r4, r7, pc}
 8005038:	fe00e800 	.word	0xfe00e800

0800503c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	0008      	movs	r0, r1
 8005046:	0011      	movs	r1, r2
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	240a      	movs	r4, #10
 800504c:	193b      	adds	r3, r7, r4
 800504e:	1c02      	adds	r2, r0, #0
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	2009      	movs	r0, #9
 8005054:	183b      	adds	r3, r7, r0
 8005056:	1c0a      	adds	r2, r1, #0
 8005058:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505a:	193b      	adds	r3, r7, r4
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	059b      	lsls	r3, r3, #22
 8005060:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005062:	183b      	adds	r3, r7, r0
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	0419      	lsls	r1, r3, #16
 8005068:	23ff      	movs	r3, #255	; 0xff
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	4313      	orrs	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005086:	0d51      	lsrs	r1, r2, #21
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	00d2      	lsls	r2, r2, #3
 800508c:	400a      	ands	r2, r1
 800508e:	4907      	ldr	r1, [pc, #28]	; (80050ac <I2C_TransferConfig+0x70>)
 8005090:	430a      	orrs	r2, r1
 8005092:	43d2      	mvns	r2, r2
 8005094:	401a      	ands	r2, r3
 8005096:	0011      	movs	r1, r2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b007      	add	sp, #28
 80050a8:	bd90      	pop	{r4, r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	03ff63ff 	.word	0x03ff63ff

080050b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2241      	movs	r2, #65	; 0x41
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d138      	bne.n	8005138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e032      	b.n	800513a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2240      	movs	r2, #64	; 0x40
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2241      	movs	r2, #65	; 0x41
 80050e0:	2124      	movs	r1, #36	; 0x24
 80050e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2101      	movs	r1, #1
 80050f0:	438a      	bics	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4911      	ldr	r1, [pc, #68]	; (8005144 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2241      	movs	r2, #65	; 0x41
 8005128:	2120      	movs	r1, #32
 800512a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	2100      	movs	r1, #0
 8005132:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	ffffefff 	.word	0xffffefff

08005148 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2241      	movs	r2, #65	; 0x41
 8005156:	5c9b      	ldrb	r3, [r3, r2]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b20      	cmp	r3, #32
 800515c:	d139      	bne.n	80051d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2240      	movs	r2, #64	; 0x40
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005168:	2302      	movs	r3, #2
 800516a:	e033      	b.n	80051d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	2101      	movs	r1, #1
 8005172:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2241      	movs	r2, #65	; 0x41
 8005178:	2124      	movs	r1, #36	; 0x24
 800517a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2101      	movs	r1, #1
 8005188:	438a      	bics	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2101      	movs	r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2241      	movs	r2, #65	; 0x41
 80051c2:	2120      	movs	r1, #32
 80051c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	fffff0ff 	.word	0xfffff0ff

080051e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f000 fbbf 	bl	8005972 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f4:	4bc9      	ldr	r3, [pc, #804]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	220c      	movs	r2, #12
 80051fa:	4013      	ands	r3, r2
 80051fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051fe:	4bc7      	ldr	r3, [pc, #796]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d100      	bne.n	8005216 <HAL_RCC_OscConfig+0x36>
 8005214:	e07e      	b.n	8005314 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d007      	beq.n	800522c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d112      	bne.n	8005248 <HAL_RCC_OscConfig+0x68>
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	025b      	lsls	r3, r3, #9
 8005228:	429a      	cmp	r2, r3
 800522a:	d10d      	bne.n	8005248 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	4bbb      	ldr	r3, [pc, #748]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	029b      	lsls	r3, r3, #10
 8005234:	4013      	ands	r3, r2
 8005236:	d100      	bne.n	800523a <HAL_RCC_OscConfig+0x5a>
 8005238:	e06b      	b.n	8005312 <HAL_RCC_OscConfig+0x132>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d167      	bne.n	8005312 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f000 fb95 	bl	8005972 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	025b      	lsls	r3, r3, #9
 8005250:	429a      	cmp	r2, r3
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x84>
 8005254:	4bb1      	ldr	r3, [pc, #708]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4bb0      	ldr	r3, [pc, #704]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	0249      	lsls	r1, r1, #9
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e027      	b.n	80052b4 <HAL_RCC_OscConfig+0xd4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	23a0      	movs	r3, #160	; 0xa0
 800526a:	02db      	lsls	r3, r3, #11
 800526c:	429a      	cmp	r2, r3
 800526e:	d10e      	bne.n	800528e <HAL_RCC_OscConfig+0xae>
 8005270:	4baa      	ldr	r3, [pc, #680]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4ba9      	ldr	r3, [pc, #676]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	02c9      	lsls	r1, r1, #11
 800527a:	430a      	orrs	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	4ba7      	ldr	r3, [pc, #668]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba6      	ldr	r3, [pc, #664]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0249      	lsls	r1, r1, #9
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e012      	b.n	80052b4 <HAL_RCC_OscConfig+0xd4>
 800528e:	4ba3      	ldr	r3, [pc, #652]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4ba2      	ldr	r3, [pc, #648]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005294:	49a2      	ldr	r1, [pc, #648]	; (8005520 <HAL_RCC_OscConfig+0x340>)
 8005296:	400a      	ands	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	4ba0      	ldr	r3, [pc, #640]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	025b      	lsls	r3, r3, #9
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4b9c      	ldr	r3, [pc, #624]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b9b      	ldr	r3, [pc, #620]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80052ae:	499d      	ldr	r1, [pc, #628]	; (8005524 <HAL_RCC_OscConfig+0x344>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fb96 	bl	80039ec <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c4:	e009      	b.n	80052da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c6:	f7fe fb91 	bl	80039ec <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b64      	cmp	r3, #100	; 0x64
 80052d2:	d902      	bls.n	80052da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	f000 fb4c 	bl	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052da:	4b90      	ldr	r3, [pc, #576]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	4013      	ands	r3, r2
 80052e4:	d0ef      	beq.n	80052c6 <HAL_RCC_OscConfig+0xe6>
 80052e6:	e015      	b.n	8005314 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fb80 	bl	80039ec <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f2:	f7fe fb7b 	bl	80039ec <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e336      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005304:	4b85      	ldr	r3, [pc, #532]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	029b      	lsls	r3, r3, #10
 800530c:	4013      	ands	r3, r2
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x112>
 8005310:	e000      	b.n	8005314 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005312:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d100      	bne.n	8005320 <HAL_RCC_OscConfig+0x140>
 800531e:	e099      	b.n	8005454 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2220      	movs	r2, #32
 800532a:	4013      	ands	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800532e:	4b7b      	ldr	r3, [pc, #492]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b7a      	ldr	r3, [pc, #488]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005334:	2120      	movs	r1, #32
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2220      	movs	r2, #32
 800533e:	4393      	bics	r3, r2
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d005      	beq.n	8005354 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d13e      	bne.n	80053cc <HAL_RCC_OscConfig+0x1ec>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d13b      	bne.n	80053cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005354:	4b71      	ldr	r3, [pc, #452]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2204      	movs	r2, #4
 800535a:	4013      	ands	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_RCC_OscConfig+0x188>
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e304      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005368:	4b6c      	ldr	r3, [pc, #432]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4a6e      	ldr	r2, [pc, #440]	; (8005528 <HAL_RCC_OscConfig+0x348>)
 800536e:	4013      	ands	r3, r2
 8005370:	0019      	movs	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	021a      	lsls	r2, r3, #8
 8005378:	4b68      	ldr	r3, [pc, #416]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800537e:	4b67      	ldr	r3, [pc, #412]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2209      	movs	r2, #9
 8005384:	4393      	bics	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	4b64      	ldr	r3, [pc, #400]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005390:	f000 fc42 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005394:	0001      	movs	r1, r0
 8005396:	4b61      	ldr	r3, [pc, #388]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	220f      	movs	r2, #15
 800539e:	4013      	ands	r3, r2
 80053a0:	4a62      	ldr	r2, [pc, #392]	; (800552c <HAL_RCC_OscConfig+0x34c>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	000a      	movs	r2, r1
 80053a6:	40da      	lsrs	r2, r3
 80053a8:	4b61      	ldr	r3, [pc, #388]	; (8005530 <HAL_RCC_OscConfig+0x350>)
 80053aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80053ac:	4b61      	ldr	r3, [pc, #388]	; (8005534 <HAL_RCC_OscConfig+0x354>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2513      	movs	r5, #19
 80053b2:	197c      	adds	r4, r7, r5
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fe fad3 	bl	8003960 <HAL_InitTick>
 80053ba:	0003      	movs	r3, r0
 80053bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d046      	beq.n	8005454 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80053c6:	197b      	adds	r3, r7, r5
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	e2d2      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d027      	beq.n	8005422 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053d2:	4b52      	ldr	r3, [pc, #328]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2209      	movs	r2, #9
 80053d8:	4393      	bics	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	4b4f      	ldr	r3, [pc, #316]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fe fb02 	bl	80039ec <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fe fafd 	bl	80039ec <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e2b8      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005400:	4b46      	ldr	r3, [pc, #280]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2204      	movs	r2, #4
 8005406:	4013      	ands	r3, r2
 8005408:	d0f1      	beq.n	80053ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b44      	ldr	r3, [pc, #272]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a46      	ldr	r2, [pc, #280]	; (8005528 <HAL_RCC_OscConfig+0x348>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	021a      	lsls	r2, r3, #8
 800541a:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	e018      	b.n	8005454 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b3d      	ldr	r3, [pc, #244]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005428:	2101      	movs	r1, #1
 800542a:	438a      	bics	r2, r1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fe fadd 	bl	80039ec <HAL_GetTick>
 8005432:	0003      	movs	r3, r0
 8005434:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fe fad8 	bl	80039ec <HAL_GetTick>
 800543c:	0002      	movs	r2, r0
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e293      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2204      	movs	r2, #4
 8005450:	4013      	ands	r3, r2
 8005452:	d1f1      	bne.n	8005438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	4013      	ands	r3, r2
 800545c:	d100      	bne.n	8005460 <HAL_RCC_OscConfig+0x280>
 800545e:	e0a2      	b.n	80055a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d140      	bne.n	80054e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005466:	4b2d      	ldr	r3, [pc, #180]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4013      	ands	r3, r2
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x29e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e279      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800547e:	4b27      	ldr	r3, [pc, #156]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <HAL_RCC_OscConfig+0x358>)
 8005484:	4013      	ands	r3, r2
 8005486:	0019      	movs	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005492:	4b22      	ldr	r3, [pc, #136]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	0a19      	lsrs	r1, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	061a      	lsls	r2, r3, #24
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	0b5b      	lsrs	r3, r3, #13
 80054ac:	3301      	adds	r3, #1
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	0212      	lsls	r2, r2, #8
 80054b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	210f      	movs	r1, #15
 80054bc:	400b      	ands	r3, r1
 80054be:	491b      	ldr	r1, [pc, #108]	; (800552c <HAL_RCC_OscConfig+0x34c>)
 80054c0:	5ccb      	ldrb	r3, [r1, r3]
 80054c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCC_OscConfig+0x350>)
 80054c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <HAL_RCC_OscConfig+0x354>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2513      	movs	r5, #19
 80054ce:	197c      	adds	r4, r7, r5
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7fe fa45 	bl	8003960 <HAL_InitTick>
 80054d6:	0003      	movs	r3, r0
 80054d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80054da:	197b      	adds	r3, r7, r5
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d061      	beq.n	80055a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80054e2:	197b      	adds	r3, r7, r5
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	e244      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d040      	beq.n	8005572 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_RCC_OscConfig+0x33c>)
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	0049      	lsls	r1, r1, #1
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fe:	f7fe fa75 	bl	80039ec <HAL_GetTick>
 8005502:	0003      	movs	r3, r0
 8005504:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005506:	e019      	b.n	800553c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005508:	f7fe fa70 	bl	80039ec <HAL_GetTick>
 800550c:	0002      	movs	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d912      	bls.n	800553c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e22b      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	40021000 	.word	0x40021000
 8005520:	fffeffff 	.word	0xfffeffff
 8005524:	fffbffff 	.word	0xfffbffff
 8005528:	ffffe0ff 	.word	0xffffe0ff
 800552c:	080089f4 	.word	0x080089f4
 8005530:	20000000 	.word	0x20000000
 8005534:	20000004 	.word	0x20000004
 8005538:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800553c:	4bca      	ldr	r3, [pc, #808]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d0df      	beq.n	8005508 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005548:	4bc7      	ldr	r3, [pc, #796]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4ac7      	ldr	r2, [pc, #796]	; (800586c <HAL_RCC_OscConfig+0x68c>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005556:	4bc4      	ldr	r3, [pc, #784]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800555c:	4bc2      	ldr	r3, [pc, #776]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	0a19      	lsrs	r1, r3, #8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	061a      	lsls	r2, r3, #24
 800556a:	4bbf      	ldr	r3, [pc, #764]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
 8005570:	e019      	b.n	80055a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005572:	4bbd      	ldr	r3, [pc, #756]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4bbc      	ldr	r3, [pc, #752]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005578:	49bd      	ldr	r1, [pc, #756]	; (8005870 <HAL_RCC_OscConfig+0x690>)
 800557a:	400a      	ands	r2, r1
 800557c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557e:	f7fe fa35 	bl	80039ec <HAL_GetTick>
 8005582:	0003      	movs	r3, r0
 8005584:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005588:	f7fe fa30 	bl	80039ec <HAL_GetTick>
 800558c:	0002      	movs	r2, r0
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e1eb      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800559a:	4bb3      	ldr	r3, [pc, #716]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4013      	ands	r3, r2
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2208      	movs	r2, #8
 80055ac:	4013      	ands	r3, r2
 80055ae:	d036      	beq.n	800561e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d019      	beq.n	80055ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b8:	4bab      	ldr	r3, [pc, #684]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80055ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055bc:	4baa      	ldr	r3, [pc, #680]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80055be:	2101      	movs	r1, #1
 80055c0:	430a      	orrs	r2, r1
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fe fa12 	bl	80039ec <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fe fa0d 	bl	80039ec <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e1c8      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055e0:	4ba1      	ldr	r3, [pc, #644]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	2202      	movs	r2, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d0f1      	beq.n	80055ce <HAL_RCC_OscConfig+0x3ee>
 80055ea:	e018      	b.n	800561e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ec:	4b9e      	ldr	r3, [pc, #632]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80055ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055f0:	4b9d      	ldr	r3, [pc, #628]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f8:	f7fe f9f8 	bl	80039ec <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005602:	f7fe f9f3 	bl	80039ec <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e1ae      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005614:	4b94      	ldr	r3, [pc, #592]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	2202      	movs	r2, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d1f1      	bne.n	8005602 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	d100      	bne.n	800562a <HAL_RCC_OscConfig+0x44a>
 8005628:	e0ae      	b.n	8005788 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2023      	movs	r0, #35	; 0x23
 800562c:	183b      	adds	r3, r7, r0
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005632:	4b8d      	ldr	r3, [pc, #564]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	055b      	lsls	r3, r3, #21
 800563a:	4013      	ands	r3, r2
 800563c:	d109      	bne.n	8005652 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563e:	4b8a      	ldr	r3, [pc, #552]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005642:	4b89      	ldr	r3, [pc, #548]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	0549      	lsls	r1, r1, #21
 8005648:	430a      	orrs	r2, r1
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800564c:	183b      	adds	r3, r7, r0
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b88      	ldr	r3, [pc, #544]	; (8005874 <HAL_RCC_OscConfig+0x694>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4013      	ands	r3, r2
 800565c:	d11a      	bne.n	8005694 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4b85      	ldr	r3, [pc, #532]	; (8005874 <HAL_RCC_OscConfig+0x694>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b84      	ldr	r3, [pc, #528]	; (8005874 <HAL_RCC_OscConfig+0x694>)
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566c:	f7fe f9be 	bl	80039ec <HAL_GetTick>
 8005670:	0003      	movs	r3, r0
 8005672:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005676:	f7fe f9b9 	bl	80039ec <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b64      	cmp	r3, #100	; 0x64
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e174      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	4b7a      	ldr	r3, [pc, #488]	; (8005874 <HAL_RCC_OscConfig+0x694>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4013      	ands	r3, r2
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	429a      	cmp	r2, r3
 800569e:	d107      	bne.n	80056b0 <HAL_RCC_OscConfig+0x4d0>
 80056a0:	4b71      	ldr	r3, [pc, #452]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a4:	4b70      	ldr	r3, [pc, #448]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	0049      	lsls	r1, r1, #1
 80056aa:	430a      	orrs	r2, r1
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
 80056ae:	e031      	b.n	8005714 <HAL_RCC_OscConfig+0x534>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10c      	bne.n	80056d2 <HAL_RCC_OscConfig+0x4f2>
 80056b8:	4b6b      	ldr	r3, [pc, #428]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056bc:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056be:	496c      	ldr	r1, [pc, #432]	; (8005870 <HAL_RCC_OscConfig+0x690>)
 80056c0:	400a      	ands	r2, r1
 80056c2:	651a      	str	r2, [r3, #80]	; 0x50
 80056c4:	4b68      	ldr	r3, [pc, #416]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c8:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056ca:	496b      	ldr	r1, [pc, #428]	; (8005878 <HAL_RCC_OscConfig+0x698>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	651a      	str	r2, [r3, #80]	; 0x50
 80056d0:	e020      	b.n	8005714 <HAL_RCC_OscConfig+0x534>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	23a0      	movs	r3, #160	; 0xa0
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	429a      	cmp	r2, r3
 80056dc:	d10e      	bne.n	80056fc <HAL_RCC_OscConfig+0x51c>
 80056de:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e2:	4b61      	ldr	r3, [pc, #388]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	00c9      	lsls	r1, r1, #3
 80056e8:	430a      	orrs	r2, r1
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
 80056ec:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f0:	4b5d      	ldr	r3, [pc, #372]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	0049      	lsls	r1, r1, #1
 80056f6:	430a      	orrs	r2, r1
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x534>
 80056fc:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80056fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005700:	4b59      	ldr	r3, [pc, #356]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005702:	495b      	ldr	r1, [pc, #364]	; (8005870 <HAL_RCC_OscConfig+0x690>)
 8005704:	400a      	ands	r2, r1
 8005706:	651a      	str	r2, [r3, #80]	; 0x50
 8005708:	4b57      	ldr	r3, [pc, #348]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800570a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800570c:	4b56      	ldr	r3, [pc, #344]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800570e:	495a      	ldr	r1, [pc, #360]	; (8005878 <HAL_RCC_OscConfig+0x698>)
 8005710:	400a      	ands	r2, r1
 8005712:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571c:	f7fe f966 	bl	80039ec <HAL_GetTick>
 8005720:	0003      	movs	r3, r0
 8005722:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005724:	e009      	b.n	800573a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fe f961 	bl	80039ec <HAL_GetTick>
 800572a:	0002      	movs	r2, r0
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	4a52      	ldr	r2, [pc, #328]	; (800587c <HAL_RCC_OscConfig+0x69c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e11b      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800573a:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800573c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4013      	ands	r3, r2
 8005744:	d0ef      	beq.n	8005726 <HAL_RCC_OscConfig+0x546>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fe f950 	bl	80039ec <HAL_GetTick>
 800574c:	0003      	movs	r3, r0
 800574e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005750:	e009      	b.n	8005766 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fe f94b 	bl	80039ec <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	4a47      	ldr	r2, [pc, #284]	; (800587c <HAL_RCC_OscConfig+0x69c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e105      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d1ef      	bne.n	8005752 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005772:	2323      	movs	r3, #35	; 0x23
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577c:	4b3a      	ldr	r3, [pc, #232]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800577e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005782:	493f      	ldr	r1, [pc, #252]	; (8005880 <HAL_RCC_OscConfig+0x6a0>)
 8005784:	400a      	ands	r2, r1
 8005786:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2220      	movs	r2, #32
 800578e:	4013      	ands	r3, r2
 8005790:	d049      	beq.n	8005826 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d026      	beq.n	80057e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	4b32      	ldr	r3, [pc, #200]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057a0:	2101      	movs	r1, #1
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	4b30      	ldr	r3, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057aa:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057ac:	2101      	movs	r1, #1
 80057ae:	430a      	orrs	r2, r1
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCC_OscConfig+0x6a4>)
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <HAL_RCC_OscConfig+0x6a4>)
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	0189      	lsls	r1, r1, #6
 80057bc:	430a      	orrs	r2, r1
 80057be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fe f914 	bl	80039ec <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ca:	f7fe f90f 	bl	80039ec <HAL_GetTick>
 80057ce:	0002      	movs	r2, r0
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e0ca      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2202      	movs	r2, #2
 80057e2:	4013      	ands	r3, r2
 80057e4:	d0f1      	beq.n	80057ca <HAL_RCC_OscConfig+0x5ea>
 80057e6:	e01e      	b.n	8005826 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80057e8:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 80057ee:	2101      	movs	r1, #1
 80057f0:	438a      	bics	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	4b23      	ldr	r3, [pc, #140]	; (8005884 <HAL_RCC_OscConfig+0x6a4>)
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <HAL_RCC_OscConfig+0x6a4>)
 80057fa:	4923      	ldr	r1, [pc, #140]	; (8005888 <HAL_RCC_OscConfig+0x6a8>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fe f8f4 	bl	80039ec <HAL_GetTick>
 8005804:	0003      	movs	r3, r0
 8005806:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580a:	f7fe f8ef 	bl	80039ec <HAL_GetTick>
 800580e:	0002      	movs	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0aa      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2202      	movs	r2, #2
 8005822:	4013      	ands	r3, r2
 8005824:	d1f1      	bne.n	800580a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d100      	bne.n	8005830 <HAL_RCC_OscConfig+0x650>
 800582e:	e09f      	b.n	8005970 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d100      	bne.n	8005838 <HAL_RCC_OscConfig+0x658>
 8005836:	e078      	b.n	800592a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	2b02      	cmp	r3, #2
 800583e:	d159      	bne.n	80058f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCC_OscConfig+0x688>)
 8005846:	4911      	ldr	r1, [pc, #68]	; (800588c <HAL_RCC_OscConfig+0x6ac>)
 8005848:	400a      	ands	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fe f8ce 	bl	80039ec <HAL_GetTick>
 8005850:	0003      	movs	r3, r0
 8005852:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005854:	e01c      	b.n	8005890 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005856:	f7fe f8c9 	bl	80039ec <HAL_GetTick>
 800585a:	0002      	movs	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d915      	bls.n	8005890 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e084      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
 8005868:	40021000 	.word	0x40021000
 800586c:	ffff1fff 	.word	0xffff1fff
 8005870:	fffffeff 	.word	0xfffffeff
 8005874:	40007000 	.word	0x40007000
 8005878:	fffffbff 	.word	0xfffffbff
 800587c:	00001388 	.word	0x00001388
 8005880:	efffffff 	.word	0xefffffff
 8005884:	40010000 	.word	0x40010000
 8005888:	ffffdfff 	.word	0xffffdfff
 800588c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005890:	4b3a      	ldr	r3, [pc, #232]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	049b      	lsls	r3, r3, #18
 8005898:	4013      	ands	r3, r2
 800589a:	d1dc      	bne.n	8005856 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800589c:	4b37      	ldr	r3, [pc, #220]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a37      	ldr	r2, [pc, #220]	; (8005980 <HAL_RCC_OscConfig+0x7a0>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	431a      	orrs	r2, r3
 80058b6:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058b8:	430a      	orrs	r2, r1
 80058ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058bc:	4b2f      	ldr	r3, [pc, #188]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b2e      	ldr	r3, [pc, #184]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	0449      	lsls	r1, r1, #17
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ca:	f7fe f88f 	bl	80039ec <HAL_GetTick>
 80058ce:	0003      	movs	r3, r0
 80058d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe f88a 	bl	80039ec <HAL_GetTick>
 80058d8:	0002      	movs	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e045      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058e6:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	049b      	lsls	r3, r3, #18
 80058ee:	4013      	ands	r3, r2
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x6f4>
 80058f2:	e03d      	b.n	8005970 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f4:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 80058fa:	4922      	ldr	r1, [pc, #136]	; (8005984 <HAL_RCC_OscConfig+0x7a4>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fe f874 	bl	80039ec <HAL_GetTick>
 8005904:	0003      	movs	r3, r0
 8005906:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fe f86f 	bl	80039ec <HAL_GetTick>
 800590e:	0002      	movs	r2, r0
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e02a      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	049b      	lsls	r3, r3, #18
 8005924:	4013      	ands	r3, r2
 8005926:	d1f0      	bne.n	800590a <HAL_RCC_OscConfig+0x72a>
 8005928:	e022      	b.n	8005970 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e01d      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_RCC_OscConfig+0x79c>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	025b      	lsls	r3, r3, #9
 8005942:	401a      	ands	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d10f      	bne.n	800596c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	23f0      	movs	r3, #240	; 0xf0
 8005950:	039b      	lsls	r3, r3, #14
 8005952:	401a      	ands	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	23c0      	movs	r3, #192	; 0xc0
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	401a      	ands	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b00a      	add	sp, #40	; 0x28
 8005978:	bdb0      	pop	{r4, r5, r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	40021000 	.word	0x40021000
 8005980:	ff02ffff 	.word	0xff02ffff
 8005984:	feffffff 	.word	0xfeffffff

08005988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e128      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800599c:	4b96      	ldr	r3, [pc, #600]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	4013      	ands	r3, r2
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d91e      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059aa:	4b93      	ldr	r3, [pc, #588]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	4393      	bics	r3, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	4b90      	ldr	r3, [pc, #576]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059bc:	f7fe f816 	bl	80039ec <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c4:	e009      	b.n	80059da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c6:	f7fe f811 	bl	80039ec <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	4a8a      	ldr	r2, [pc, #552]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e109      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b87      	ldr	r3, [pc, #540]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	4013      	ands	r3, r2
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1ee      	bne.n	80059c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2202      	movs	r2, #2
 80059ee:	4013      	ands	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f2:	4b83      	ldr	r3, [pc, #524]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	22f0      	movs	r2, #240	; 0xf0
 80059f8:	4393      	bics	r3, r2
 80059fa:	0019      	movs	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	4b7f      	ldr	r3, [pc, #508]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a02:	430a      	orrs	r2, r1
 8005a04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x8a>
 8005a10:	e089      	b.n	8005b26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a1a:	4b79      	ldr	r3, [pc, #484]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	4013      	ands	r3, r2
 8005a24:	d120      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0e1      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d107      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a32:	4b73      	ldr	r3, [pc, #460]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	049b      	lsls	r3, r3, #18
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d114      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0d5      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d106      	bne.n	8005a58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4a:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	4013      	ands	r3, r2
 8005a52:	d109      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0ca      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a58:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4013      	ands	r3, r2
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0c2      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a68:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	4393      	bics	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4b62      	ldr	r3, [pc, #392]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a7c:	f7fd ffb6 	bl	80039ec <HAL_GetTick>
 8005a80:	0003      	movs	r3, r0
 8005a82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d111      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a8c:	e009      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8e:	f7fd ffad 	bl	80039ec <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a58      	ldr	r2, [pc, #352]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0a5      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005aa2:	4b57      	ldr	r3, [pc, #348]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d1ef      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x106>
 8005aae:	e03a      	b.n	8005b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d111      	bne.n	8005adc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab8:	e009      	b.n	8005ace <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aba:	f7fd ff97 	bl	80039ec <HAL_GetTick>
 8005abe:	0002      	movs	r2, r0
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	4a4d      	ldr	r2, [pc, #308]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e08f      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ace:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	220c      	movs	r2, #12
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d1ef      	bne.n	8005aba <HAL_RCC_ClockConfig+0x132>
 8005ada:	e024      	b.n	8005b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11b      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ae4:	e009      	b.n	8005afa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae6:	f7fd ff81 	bl	80039ec <HAL_GetTick>
 8005aea:	0002      	movs	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e079      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	220c      	movs	r2, #12
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d1ef      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x15e>
 8005b06:	e00e      	b.n	8005b26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7fd ff70 	bl	80039ec <HAL_GetTick>
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	4a3a      	ldr	r2, [pc, #232]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e068      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b1c:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	220c      	movs	r2, #12
 8005b22:	4013      	ands	r3, r2
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d21e      	bcs.n	8005b72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b34:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4393      	bics	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	4b2e      	ldr	r3, [pc, #184]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b46:	f7fd ff51 	bl	80039ec <HAL_GetTick>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	e009      	b.n	8005b64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fd ff4c 	bl	80039ec <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e044      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d1ee      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2204      	movs	r2, #4
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_RCC_ClockConfig+0x27c>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	0019      	movs	r1, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2208      	movs	r2, #8
 8005b96:	4013      	ands	r3, r2
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <HAL_RCC_ClockConfig+0x280>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	00da      	lsls	r2, r3, #3
 8005baa:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bb0:	f000 f832 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bb4:	0001      	movs	r1, r0
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_RCC_ClockConfig+0x278>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	220f      	movs	r2, #15
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <HAL_RCC_ClockConfig+0x284>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	000a      	movs	r2, r1
 8005bc6:	40da      	lsrs	r2, r3
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_ClockConfig+0x288>)
 8005bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bcc:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <HAL_RCC_ClockConfig+0x28c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	250b      	movs	r5, #11
 8005bd2:	197c      	adds	r4, r7, r5
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fd fec3 	bl	8003960 <HAL_InitTick>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005bde:	197b      	adds	r3, r7, r5
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005be6:	197b      	adds	r3, r7, r5
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	e000      	b.n	8005bee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b004      	add	sp, #16
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	40022000 	.word	0x40022000
 8005bfc:	00001388 	.word	0x00001388
 8005c00:	40021000 	.word	0x40021000
 8005c04:	fffff8ff 	.word	0xfffff8ff
 8005c08:	ffffc7ff 	.word	0xffffc7ff
 8005c0c:	080089f4 	.word	0x080089f4
 8005c10:	20000000 	.word	0x20000000
 8005c14:	20000004 	.word	0x20000004

08005c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	230c      	movs	r3, #12
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d014      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x40>
 8005c2e:	d900      	bls.n	8005c32 <HAL_RCC_GetSysClockFreq+0x1a>
 8005c30:	e07b      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x112>
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x24>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d00b      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c3a:	e076      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c3c:	4b44      	ldr	r3, [pc, #272]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2210      	movs	r2, #16
 8005c42:	4013      	ands	r3, r2
 8005c44:	d002      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005c46:	4b43      	ldr	r3, [pc, #268]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005c4a:	e07c      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005c4c:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c50:	e079      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c52:	4b42      	ldr	r3, [pc, #264]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c56:	e076      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	0c9a      	lsrs	r2, r3, #18
 8005c5c:	230f      	movs	r3, #15
 8005c5e:	401a      	ands	r2, r3
 8005c60:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x148>)
 8005c62:	5c9b      	ldrb	r3, [r3, r2]
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	0d9a      	lsrs	r2, r3, #22
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	3301      	adds	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	025b      	lsls	r3, r3, #9
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d01a      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	4a35      	ldr	r2, [pc, #212]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	69b8      	ldr	r0, [r7, #24]
 8005c8c:	69f9      	ldr	r1, [r7, #28]
 8005c8e:	f7fa fc19 	bl	80004c4 <__aeabi_lmul>
 8005c92:	0002      	movs	r2, r0
 8005c94:	000b      	movs	r3, r1
 8005c96:	0010      	movs	r0, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f7fa fbed 	bl	8000484 <__aeabi_uldivmod>
 8005caa:	0002      	movs	r2, r0
 8005cac:	000b      	movs	r3, r1
 8005cae:	0013      	movs	r3, r2
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb2:	e037      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2210      	movs	r2, #16
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d01a      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	4a23      	ldr	r2, [pc, #140]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	68b8      	ldr	r0, [r7, #8]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	f7fa fbf9 	bl	80004c4 <__aeabi_lmul>
 8005cd2:	0002      	movs	r2, r0
 8005cd4:	000b      	movs	r3, r1
 8005cd6:	0010      	movs	r0, r2
 8005cd8:	0019      	movs	r1, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f7fa fbcd 	bl	8000484 <__aeabi_uldivmod>
 8005cea:	0002      	movs	r2, r0
 8005cec:	000b      	movs	r3, r1
 8005cee:	0013      	movs	r3, r2
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	e017      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f7fa fbe0 	bl	80004c4 <__aeabi_lmul>
 8005d04:	0002      	movs	r2, r0
 8005d06:	000b      	movs	r3, r1
 8005d08:	0010      	movs	r0, r2
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	001c      	movs	r4, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	001d      	movs	r5, r3
 8005d14:	0022      	movs	r2, r4
 8005d16:	002b      	movs	r3, r5
 8005d18:	f7fa fbb4 	bl	8000484 <__aeabi_uldivmod>
 8005d1c:	0002      	movs	r2, r0
 8005d1e:	000b      	movs	r3, r1
 8005d20:	0013      	movs	r3, r2
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d28:	e00d      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	0b5b      	lsrs	r3, r3, #13
 8005d30:	2207      	movs	r2, #7
 8005d32:	4013      	ands	r3, r2
 8005d34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	0212      	lsls	r2, r2, #8
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	0013      	movs	r3, r2
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b00e      	add	sp, #56	; 0x38
 8005d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d50:	40021000 	.word	0x40021000
 8005d54:	003d0900 	.word	0x003d0900
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	007a1200 	.word	0x007a1200
 8005d60:	08008a0c 	.word	0x08008a0c

08005d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	20000000 	.word	0x20000000

08005d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d7c:	f7ff fff2 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005d80:	0001      	movs	r1, r0
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	2207      	movs	r2, #7
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d8e:	5cd3      	ldrb	r3, [r2, r3]
 8005d90:	40d9      	lsrs	r1, r3
 8005d92:	000b      	movs	r3, r1
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	08008a04 	.word	0x08008a04

08005da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005da8:	f7ff ffdc 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005dac:	0001      	movs	r1, r0
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	0adb      	lsrs	r3, r3, #11
 8005db4:	2207      	movs	r2, #7
 8005db6:	4013      	ands	r3, r2
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dba:	5cd3      	ldrb	r3, [r2, r3]
 8005dbc:	40d9      	lsrs	r1, r3
 8005dbe:	000b      	movs	r3, r1
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	08008a04 	.word	0x08008a04

08005dd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005dd8:	2017      	movs	r0, #23
 8005dda:	183b      	adds	r3, r7, r0
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2220      	movs	r2, #32
 8005de6:	4013      	ands	r3, r2
 8005de8:	d100      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005dea:	e0c7      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dec:	4b9b      	ldr	r3, [pc, #620]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	055b      	lsls	r3, r3, #21
 8005df4:	4013      	ands	r3, r2
 8005df6:	d109      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df8:	4b98      	ldr	r3, [pc, #608]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	4b97      	ldr	r3, [pc, #604]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	0549      	lsls	r1, r1, #21
 8005e02:	430a      	orrs	r2, r1
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e06:	183b      	adds	r3, r7, r0
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	4b94      	ldr	r3, [pc, #592]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	d11a      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e18:	4b91      	ldr	r3, [pc, #580]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b90      	ldr	r3, [pc, #576]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e1e:	2180      	movs	r1, #128	; 0x80
 8005e20:	0049      	lsls	r1, r1, #1
 8005e22:	430a      	orrs	r2, r1
 8005e24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e26:	f7fd fde1 	bl	80039ec <HAL_GetTick>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2e:	e008      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e30:	f7fd fddc 	bl	80039ec <HAL_GetTick>
 8005e34:	0002      	movs	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	; 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e107      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e42:	4b87      	ldr	r3, [pc, #540]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005e4e:	4b83      	ldr	r3, [pc, #524]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	23c0      	movs	r3, #192	; 0xc0
 8005e54:	039b      	lsls	r3, r3, #14
 8005e56:	4013      	ands	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	23c0      	movs	r3, #192	; 0xc0
 8005e60:	039b      	lsls	r3, r3, #14
 8005e62:	4013      	ands	r3, r2
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d013      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	23c0      	movs	r3, #192	; 0xc0
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	401a      	ands	r2, r3
 8005e74:	23c0      	movs	r3, #192	; 0xc0
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d10a      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e7c:	4b77      	ldr	r3, [pc, #476]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	401a      	ands	r2, r3
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0df      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005e92:	4b72      	ldr	r3, [pc, #456]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e96:	23c0      	movs	r3, #192	; 0xc0
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d03b      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	23c0      	movs	r3, #192	; 0xc0
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	4013      	ands	r3, r2
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d033      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d02e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ebe:	4b67      	ldr	r3, [pc, #412]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	4a68      	ldr	r2, [pc, #416]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ec8:	4b64      	ldr	r3, [pc, #400]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ecc:	4b63      	ldr	r3, [pc, #396]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ece:	2180      	movs	r1, #128	; 0x80
 8005ed0:	0309      	lsls	r1, r1, #12
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ed6:	4b61      	ldr	r3, [pc, #388]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eda:	4b60      	ldr	r3, [pc, #384]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005edc:	4962      	ldr	r1, [pc, #392]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005ede:	400a      	ands	r2, r1
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005ee2:	4b5e      	ldr	r3, [pc, #376]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d014      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fd fd7b 	bl	80039ec <HAL_GetTick>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005efa:	e009      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efc:	f7fd fd76 	bl	80039ec <HAL_GetTick>
 8005f00:	0002      	movs	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	4a59      	ldr	r2, [pc, #356]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e0a0      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f10:	4b52      	ldr	r3, [pc, #328]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d0ef      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2220      	movs	r2, #32
 8005f22:	4013      	ands	r3, r2
 8005f24:	d01f      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	23c0      	movs	r3, #192	; 0xc0
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	401a      	ands	r2, r3
 8005f30:	23c0      	movs	r3, #192	; 0xc0
 8005f32:	029b      	lsls	r3, r3, #10
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d10c      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005f38:	4b48      	ldr	r3, [pc, #288]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a4c      	ldr	r2, [pc, #304]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	23c0      	movs	r3, #192	; 0xc0
 8005f48:	039b      	lsls	r3, r3, #14
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	4b42      	ldr	r3, [pc, #264]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	23c0      	movs	r3, #192	; 0xc0
 8005f5c:	029b      	lsls	r3, r3, #10
 8005f5e:	401a      	ands	r2, r3
 8005f60:	4b3e      	ldr	r3, [pc, #248]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f62:	430a      	orrs	r2, r1
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f66:	2317      	movs	r3, #23
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f74:	4b39      	ldr	r3, [pc, #228]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f76:	493f      	ldr	r1, [pc, #252]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005f78:	400a      	ands	r2, r1
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2201      	movs	r2, #1
 8005f82:	4013      	ands	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f86:	4b35      	ldr	r3, [pc, #212]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f96:	430a      	orrs	r2, r1
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	220c      	movs	r2, #12
 8005faa:	4393      	bics	r3, r2
 8005fac:	0019      	movs	r1, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	4a2c      	ldr	r2, [pc, #176]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	0019      	movs	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	4b22      	ldr	r3, [pc, #136]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe4:	4a25      	ldr	r2, [pc, #148]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	4b1b      	ldr	r3, [pc, #108]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006010:	430a      	orrs	r2, r1
 8006012:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2240      	movs	r2, #64	; 0x40
 800601a:	4013      	ands	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	4a17      	ldr	r2, [pc, #92]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006024:	4013      	ands	r3, r2
 8006026:	0019      	movs	r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800602e:	430a      	orrs	r2, r1
 8006030:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2280      	movs	r2, #128	; 0x80
 8006038:	4013      	ands	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	4a10      	ldr	r2, [pc, #64]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006042:	4013      	ands	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800604c:	430a      	orrs	r2, r1
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	0018      	movs	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	b006      	add	sp, #24
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
 8006064:	fffcffff 	.word	0xfffcffff
 8006068:	fff7ffff 	.word	0xfff7ffff
 800606c:	00001388 	.word	0x00001388
 8006070:	ffcfffff 	.word	0xffcfffff
 8006074:	efffffff 	.word	0xefffffff
 8006078:	fffff3ff 	.word	0xfffff3ff
 800607c:	ffffcfff 	.word	0xffffcfff
 8006080:	fbffffff 	.word	0xfbffffff
 8006084:	fff3ffff 	.word	0xfff3ffff

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e032      	b.n	8006100 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2239      	movs	r2, #57	; 0x39
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2238      	movs	r2, #56	; 0x38
 80060aa:	2100      	movs	r1, #0
 80060ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7fd fb2b 	bl	800370c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2239      	movs	r2, #57	; 0x39
 80060ba:	2102      	movs	r1, #2
 80060bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3304      	adds	r3, #4
 80060c6:	0019      	movs	r1, r3
 80060c8:	0010      	movs	r0, r2
 80060ca:	f000 f9a9 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	223e      	movs	r2, #62	; 0x3e
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	223a      	movs	r2, #58	; 0x3a
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	223b      	movs	r2, #59	; 0x3b
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	223c      	movs	r2, #60	; 0x3c
 80060ea:	2101      	movs	r1, #1
 80060ec:	5499      	strb	r1, [r3, r2]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	223d      	movs	r2, #61	; 0x3d
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2239      	movs	r2, #57	; 0x39
 80060fa:	2101      	movs	r1, #1
 80060fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	0018      	movs	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	b002      	add	sp, #8
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2239      	movs	r2, #57	; 0x39
 8006114:	5c9b      	ldrb	r3, [r3, r2]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	d001      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e03b      	b.n	8006198 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2239      	movs	r2, #57	; 0x39
 8006124:	2102      	movs	r1, #2
 8006126:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2101      	movs	r1, #1
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	05db      	lsls	r3, r3, #23
 8006140:	429a      	cmp	r2, r3
 8006142:	d00e      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0x5a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <HAL_TIM_Base_Start_IT+0x98>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0x5a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a14      	ldr	r2, [pc, #80]	; (80061a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0x5a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2207      	movs	r2, #7
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b06      	cmp	r3, #6
 8006172:	d010      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2101      	movs	r1, #1
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	e007      	b.n	8006196 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2101      	movs	r1, #1
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b004      	add	sp, #16
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40010800 	.word	0x40010800
 80061a8:	40011400 	.word	0x40011400

080061ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2101      	movs	r1, #1
 80061c0:	438a      	bics	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <HAL_TIM_Base_Stop_IT+0x48>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	d107      	bne.n	80061e0 <HAL_TIM_Base_Stop_IT+0x34>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2101      	movs	r1, #1
 80061dc:	438a      	bics	r2, r1
 80061de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2239      	movs	r2, #57	; 0x39
 80061e4:	2101      	movs	r1, #1
 80061e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b002      	add	sp, #8
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	00001111 	.word	0x00001111

080061f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2202      	movs	r2, #2
 8006208:	4013      	ands	r3, r2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d124      	bne.n	8006258 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	4013      	ands	r3, r2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11d      	bne.n	8006258 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2203      	movs	r2, #3
 8006222:	4252      	negs	r2, r2
 8006224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	2203      	movs	r2, #3
 8006234:	4013      	ands	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	0018      	movs	r0, r3
 800623c:	f000 f8cc 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8006240:	e007      	b.n	8006252 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f000 f8bf 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0018      	movs	r0, r3
 800624e:	f000 f8cb 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2204      	movs	r2, #4
 8006260:	4013      	ands	r3, r2
 8006262:	2b04      	cmp	r3, #4
 8006264:	d125      	bne.n	80062b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2204      	movs	r2, #4
 800626e:	4013      	ands	r3, r2
 8006270:	2b04      	cmp	r3, #4
 8006272:	d11e      	bne.n	80062b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2205      	movs	r2, #5
 800627a:	4252      	negs	r2, r2
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	23c0      	movs	r3, #192	; 0xc0
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4013      	ands	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f89f 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 800629a:	e007      	b.n	80062ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0018      	movs	r0, r3
 80062a0:	f000 f892 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f89e 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2208      	movs	r2, #8
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d124      	bne.n	800630a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2208      	movs	r2, #8
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d11d      	bne.n	800630a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2209      	movs	r2, #9
 80062d4:	4252      	negs	r2, r2
 80062d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2204      	movs	r2, #4
 80062dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2203      	movs	r2, #3
 80062e6:	4013      	ands	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 f873 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 80062f2:	e007      	b.n	8006304 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f000 f866 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0018      	movs	r0, r3
 8006300:	f000 f872 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2210      	movs	r2, #16
 8006312:	4013      	ands	r3, r2
 8006314:	2b10      	cmp	r3, #16
 8006316:	d125      	bne.n	8006364 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2210      	movs	r2, #16
 8006320:	4013      	ands	r3, r2
 8006322:	2b10      	cmp	r3, #16
 8006324:	d11e      	bne.n	8006364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2211      	movs	r2, #17
 800632c:	4252      	negs	r2, r2
 800632e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2208      	movs	r2, #8
 8006334:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	23c0      	movs	r3, #192	; 0xc0
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4013      	ands	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0018      	movs	r0, r3
 8006348:	f000 f846 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 800634c:	e007      	b.n	800635e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f839 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	f000 f845 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2201      	movs	r2, #1
 800636c:	4013      	ands	r3, r2
 800636e:	2b01      	cmp	r3, #1
 8006370:	d10f      	bne.n	8006392 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	4013      	ands	r3, r2
 800637c:	2b01      	cmp	r3, #1
 800637e:	d108      	bne.n	8006392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2202      	movs	r2, #2
 8006386:	4252      	negs	r2, r2
 8006388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0018      	movs	r0, r3
 800638e:	f7fc fbe5 	bl	8002b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2240      	movs	r2, #64	; 0x40
 800639a:	4013      	ands	r3, r2
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d10f      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	2240      	movs	r2, #64	; 0x40
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d108      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2241      	movs	r2, #65	; 0x41
 80063b4:	4252      	negs	r2, r2
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 f81c 	bl	80063f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d0:	46c0      	nop			; (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e0:	46c0      	nop			; (mov r8, r8)
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b002      	add	sp, #8
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b002      	add	sp, #8
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2239      	movs	r2, #57	; 0x39
 8006414:	5c9b      	ldrb	r3, [r3, r2]
 8006416:	b2db      	uxtb	r3, r3
}
 8006418:	0018      	movs	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	b002      	add	sp, #8
 800641e:	bd80      	pop	{r7, pc}

08006420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	429a      	cmp	r2, r3
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x32>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a23      	ldr	r2, [pc, #140]	; (80064cc <TIM_Base_SetConfig+0xac>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x32>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a22      	ldr	r2, [pc, #136]	; (80064d0 <TIM_Base_SetConfig+0xb0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x32>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <TIM_Base_SetConfig+0xb4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2270      	movs	r2, #112	; 0x70
 8006456:	4393      	bics	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	05db      	lsls	r3, r3, #23
 800646a:	429a      	cmp	r2, r3
 800646c:	d00b      	beq.n	8006486 <TIM_Base_SetConfig+0x66>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <TIM_Base_SetConfig+0xac>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_Base_SetConfig+0x66>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <TIM_Base_SetConfig+0xb0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_Base_SetConfig+0x66>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <TIM_Base_SetConfig+0xb4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <TIM_Base_SetConfig+0xb8>)
 800648a:	4013      	ands	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	4393      	bics	r3, r2
 800649e:	001a      	movs	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	615a      	str	r2, [r3, #20]
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b004      	add	sp, #16
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40010800 	.word	0x40010800
 80064d4:	40011400 	.word	0x40011400
 80064d8:	fffffcff 	.word	0xfffffcff

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2238      	movs	r2, #56	; 0x38
 80064ea:	5c9b      	ldrb	r3, [r3, r2]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e047      	b.n	8006584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2238      	movs	r2, #56	; 0x38
 80064f8:	2101      	movs	r1, #1
 80064fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2239      	movs	r2, #57	; 0x39
 8006500:	2102      	movs	r1, #2
 8006502:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2270      	movs	r2, #112	; 0x70
 8006518:	4393      	bics	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	05db      	lsls	r3, r3, #23
 8006536:	429a      	cmp	r2, r3
 8006538:	d00e      	beq.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a11      	ldr	r2, [pc, #68]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a10      	ldr	r2, [pc, #64]	; (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d10c      	bne.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2280      	movs	r2, #128	; 0x80
 800655c:	4393      	bics	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	4313      	orrs	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2239      	movs	r2, #57	; 0x39
 8006576:	2101      	movs	r1, #1
 8006578:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2238      	movs	r2, #56	; 0x38
 800657e:	2100      	movs	r1, #0
 8006580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	0018      	movs	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	b004      	add	sp, #16
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40000400 	.word	0x40000400
 8006590:	40010800 	.word	0x40010800
 8006594:	40011400 	.word	0x40011400

08006598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e044      	b.n	8006634 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2278      	movs	r2, #120	; 0x78
 80065b6:	2100      	movs	r1, #0
 80065b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fd f8c5 	bl	800374c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	; 0x24
 80065c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 f8d0 	bl	8006780 <UART_SetConfig>
 80065e0:	0003      	movs	r3, r0
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e024      	b.n	8006634 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 fb61 	bl	8006cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	490d      	ldr	r1, [pc, #52]	; (800663c <HAL_UART_Init+0xa4>)
 8006606:	400a      	ands	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	212a      	movs	r1, #42	; 0x2a
 8006616:	438a      	bics	r2, r1
 8006618:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0018      	movs	r0, r3
 800662e:	f000 fbf9 	bl	8006e24 <UART_CheckIdleState>
 8006632:	0003      	movs	r3, r0
}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}
 800663c:	ffffb7ff 	.word	0xffffb7ff

08006640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	1dbb      	adds	r3, r7, #6
 800664e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006654:	2b20      	cmp	r3, #32
 8006656:	d000      	beq.n	800665a <HAL_UART_Transmit+0x1a>
 8006658:	e08c      	b.n	8006774 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_UART_Transmit+0x28>
 8006660:	1dbb      	adds	r3, r7, #6
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e084      	b.n	8006776 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	015b      	lsls	r3, r3, #5
 8006674:	429a      	cmp	r2, r3
 8006676:	d109      	bne.n	800668c <HAL_UART_Transmit+0x4c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2201      	movs	r2, #1
 8006684:	4013      	ands	r3, r2
 8006686:	d001      	beq.n	800668c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e074      	b.n	8006776 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2284      	movs	r2, #132	; 0x84
 8006690:	2100      	movs	r1, #0
 8006692:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	; 0x21
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669a:	f7fd f9a7 	bl	80039ec <HAL_GetTick>
 800669e:	0003      	movs	r3, r0
 80066a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1dba      	adds	r2, r7, #6
 80066a6:	2150      	movs	r1, #80	; 0x50
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	1dba      	adds	r2, r7, #6
 80066b0:	2152      	movs	r1, #82	; 0x52
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	429a      	cmp	r2, r3
 80066c0:	d108      	bne.n	80066d4 <HAL_UART_Transmit+0x94>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e003      	b.n	80066dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066dc:	e02f      	b.n	800673e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	0013      	movs	r3, r2
 80066e8:	2200      	movs	r2, #0
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	f000 fc42 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 80066f0:	1e03      	subs	r3, r0, #0
 80066f2:	d004      	beq.n	80066fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e03b      	b.n	8006776 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	001a      	movs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	05d2      	lsls	r2, r2, #23
 8006710:	0dd2      	lsrs	r2, r2, #23
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	3302      	adds	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e007      	b.n	800672c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2252      	movs	r2, #82	; 0x52
 8006730:	5a9b      	ldrh	r3, [r3, r2]
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b299      	uxth	r1, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2252      	movs	r2, #82	; 0x52
 800673c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2252      	movs	r2, #82	; 0x52
 8006742:	5a9b      	ldrh	r3, [r3, r2]
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1c9      	bne.n	80066de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	0013      	movs	r3, r2
 8006754:	2200      	movs	r2, #0
 8006756:	2140      	movs	r1, #64	; 0x40
 8006758:	f000 fc0c 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 800675c:	1e03      	subs	r3, r0, #0
 800675e:	d004      	beq.n	800676a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e005      	b.n	8006776 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b008      	add	sp, #32
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b08e      	sub	sp, #56	; 0x38
 8006784:	af00      	add	r7, sp, #0
 8006786:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006788:	231a      	movs	r3, #26
 800678a:	2218      	movs	r2, #24
 800678c:	189b      	adds	r3, r3, r2
 800678e:	19db      	adds	r3, r3, r7
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4ac3      	ldr	r2, [pc, #780]	; (8006ac0 <UART_SetConfig+0x340>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4abe      	ldr	r2, [pc, #760]	; (8006ac4 <UART_SetConfig+0x344>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4ab8      	ldr	r2, [pc, #736]	; (8006ac8 <UART_SetConfig+0x348>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f0:	4313      	orrs	r3, r2
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4ab4      	ldr	r2, [pc, #720]	; (8006acc <UART_SetConfig+0x34c>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4ab0      	ldr	r2, [pc, #704]	; (8006ad0 <UART_SetConfig+0x350>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d131      	bne.n	8006878 <UART_SetConfig+0xf8>
 8006814:	4baf      	ldr	r3, [pc, #700]	; (8006ad4 <UART_SetConfig+0x354>)
 8006816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006818:	2203      	movs	r2, #3
 800681a:	4013      	ands	r3, r2
 800681c:	2b03      	cmp	r3, #3
 800681e:	d01d      	beq.n	800685c <UART_SetConfig+0xdc>
 8006820:	d823      	bhi.n	800686a <UART_SetConfig+0xea>
 8006822:	2b02      	cmp	r3, #2
 8006824:	d00c      	beq.n	8006840 <UART_SetConfig+0xc0>
 8006826:	d820      	bhi.n	800686a <UART_SetConfig+0xea>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <UART_SetConfig+0xb2>
 800682c:	2b01      	cmp	r3, #1
 800682e:	d00e      	beq.n	800684e <UART_SetConfig+0xce>
 8006830:	e01b      	b.n	800686a <UART_SetConfig+0xea>
 8006832:	231b      	movs	r3, #27
 8006834:	2218      	movs	r2, #24
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e0b4      	b.n	80069aa <UART_SetConfig+0x22a>
 8006840:	231b      	movs	r3, #27
 8006842:	2218      	movs	r2, #24
 8006844:	189b      	adds	r3, r3, r2
 8006846:	19db      	adds	r3, r3, r7
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e0ad      	b.n	80069aa <UART_SetConfig+0x22a>
 800684e:	231b      	movs	r3, #27
 8006850:	2218      	movs	r2, #24
 8006852:	189b      	adds	r3, r3, r2
 8006854:	19db      	adds	r3, r3, r7
 8006856:	2204      	movs	r2, #4
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e0a6      	b.n	80069aa <UART_SetConfig+0x22a>
 800685c:	231b      	movs	r3, #27
 800685e:	2218      	movs	r2, #24
 8006860:	189b      	adds	r3, r3, r2
 8006862:	19db      	adds	r3, r3, r7
 8006864:	2208      	movs	r2, #8
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e09f      	b.n	80069aa <UART_SetConfig+0x22a>
 800686a:	231b      	movs	r3, #27
 800686c:	2218      	movs	r2, #24
 800686e:	189b      	adds	r3, r3, r2
 8006870:	19db      	adds	r3, r3, r7
 8006872:	2210      	movs	r2, #16
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e098      	b.n	80069aa <UART_SetConfig+0x22a>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a96      	ldr	r2, [pc, #600]	; (8006ad8 <UART_SetConfig+0x358>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d131      	bne.n	80068e6 <UART_SetConfig+0x166>
 8006882:	4b94      	ldr	r3, [pc, #592]	; (8006ad4 <UART_SetConfig+0x354>)
 8006884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006886:	220c      	movs	r2, #12
 8006888:	4013      	ands	r3, r2
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d01d      	beq.n	80068ca <UART_SetConfig+0x14a>
 800688e:	d823      	bhi.n	80068d8 <UART_SetConfig+0x158>
 8006890:	2b08      	cmp	r3, #8
 8006892:	d00c      	beq.n	80068ae <UART_SetConfig+0x12e>
 8006894:	d820      	bhi.n	80068d8 <UART_SetConfig+0x158>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <UART_SetConfig+0x120>
 800689a:	2b04      	cmp	r3, #4
 800689c:	d00e      	beq.n	80068bc <UART_SetConfig+0x13c>
 800689e:	e01b      	b.n	80068d8 <UART_SetConfig+0x158>
 80068a0:	231b      	movs	r3, #27
 80068a2:	2218      	movs	r2, #24
 80068a4:	189b      	adds	r3, r3, r2
 80068a6:	19db      	adds	r3, r3, r7
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e07d      	b.n	80069aa <UART_SetConfig+0x22a>
 80068ae:	231b      	movs	r3, #27
 80068b0:	2218      	movs	r2, #24
 80068b2:	189b      	adds	r3, r3, r2
 80068b4:	19db      	adds	r3, r3, r7
 80068b6:	2202      	movs	r2, #2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e076      	b.n	80069aa <UART_SetConfig+0x22a>
 80068bc:	231b      	movs	r3, #27
 80068be:	2218      	movs	r2, #24
 80068c0:	189b      	adds	r3, r3, r2
 80068c2:	19db      	adds	r3, r3, r7
 80068c4:	2204      	movs	r2, #4
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e06f      	b.n	80069aa <UART_SetConfig+0x22a>
 80068ca:	231b      	movs	r3, #27
 80068cc:	2218      	movs	r2, #24
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	19db      	adds	r3, r3, r7
 80068d2:	2208      	movs	r2, #8
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e068      	b.n	80069aa <UART_SetConfig+0x22a>
 80068d8:	231b      	movs	r3, #27
 80068da:	2218      	movs	r2, #24
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	19db      	adds	r3, r3, r7
 80068e0:	2210      	movs	r2, #16
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e061      	b.n	80069aa <UART_SetConfig+0x22a>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7c      	ldr	r2, [pc, #496]	; (8006adc <UART_SetConfig+0x35c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d106      	bne.n	80068fe <UART_SetConfig+0x17e>
 80068f0:	231b      	movs	r3, #27
 80068f2:	2218      	movs	r2, #24
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e055      	b.n	80069aa <UART_SetConfig+0x22a>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a77      	ldr	r2, [pc, #476]	; (8006ae0 <UART_SetConfig+0x360>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d106      	bne.n	8006916 <UART_SetConfig+0x196>
 8006908:	231b      	movs	r3, #27
 800690a:	2218      	movs	r2, #24
 800690c:	189b      	adds	r3, r3, r2
 800690e:	19db      	adds	r3, r3, r7
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e049      	b.n	80069aa <UART_SetConfig+0x22a>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6b      	ldr	r2, [pc, #428]	; (8006ac8 <UART_SetConfig+0x348>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d13e      	bne.n	800699e <UART_SetConfig+0x21e>
 8006920:	4b6c      	ldr	r3, [pc, #432]	; (8006ad4 <UART_SetConfig+0x354>)
 8006922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006924:	23c0      	movs	r3, #192	; 0xc0
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	4013      	ands	r3, r2
 800692a:	22c0      	movs	r2, #192	; 0xc0
 800692c:	0112      	lsls	r2, r2, #4
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <UART_SetConfig+0x202>
 8006932:	22c0      	movs	r2, #192	; 0xc0
 8006934:	0112      	lsls	r2, r2, #4
 8006936:	4293      	cmp	r3, r2
 8006938:	d82a      	bhi.n	8006990 <UART_SetConfig+0x210>
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	0112      	lsls	r2, r2, #4
 800693e:	4293      	cmp	r3, r2
 8006940:	d011      	beq.n	8006966 <UART_SetConfig+0x1e6>
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	0112      	lsls	r2, r2, #4
 8006946:	4293      	cmp	r3, r2
 8006948:	d822      	bhi.n	8006990 <UART_SetConfig+0x210>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <UART_SetConfig+0x1d8>
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	00d2      	lsls	r2, r2, #3
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <UART_SetConfig+0x1f4>
 8006956:	e01b      	b.n	8006990 <UART_SetConfig+0x210>
 8006958:	231b      	movs	r3, #27
 800695a:	2218      	movs	r2, #24
 800695c:	189b      	adds	r3, r3, r2
 800695e:	19db      	adds	r3, r3, r7
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e021      	b.n	80069aa <UART_SetConfig+0x22a>
 8006966:	231b      	movs	r3, #27
 8006968:	2218      	movs	r2, #24
 800696a:	189b      	adds	r3, r3, r2
 800696c:	19db      	adds	r3, r3, r7
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	e01a      	b.n	80069aa <UART_SetConfig+0x22a>
 8006974:	231b      	movs	r3, #27
 8006976:	2218      	movs	r2, #24
 8006978:	189b      	adds	r3, r3, r2
 800697a:	19db      	adds	r3, r3, r7
 800697c:	2204      	movs	r2, #4
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e013      	b.n	80069aa <UART_SetConfig+0x22a>
 8006982:	231b      	movs	r3, #27
 8006984:	2218      	movs	r2, #24
 8006986:	189b      	adds	r3, r3, r2
 8006988:	19db      	adds	r3, r3, r7
 800698a:	2208      	movs	r2, #8
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e00c      	b.n	80069aa <UART_SetConfig+0x22a>
 8006990:	231b      	movs	r3, #27
 8006992:	2218      	movs	r2, #24
 8006994:	189b      	adds	r3, r3, r2
 8006996:	19db      	adds	r3, r3, r7
 8006998:	2210      	movs	r2, #16
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e005      	b.n	80069aa <UART_SetConfig+0x22a>
 800699e:	231b      	movs	r3, #27
 80069a0:	2218      	movs	r2, #24
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	19db      	adds	r3, r3, r7
 80069a6:	2210      	movs	r2, #16
 80069a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a46      	ldr	r2, [pc, #280]	; (8006ac8 <UART_SetConfig+0x348>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d000      	beq.n	80069b6 <UART_SetConfig+0x236>
 80069b4:	e09a      	b.n	8006aec <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069b6:	231b      	movs	r3, #27
 80069b8:	2218      	movs	r2, #24
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	19db      	adds	r3, r3, r7
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d01d      	beq.n	8006a00 <UART_SetConfig+0x280>
 80069c4:	dc20      	bgt.n	8006a08 <UART_SetConfig+0x288>
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d015      	beq.n	80069f6 <UART_SetConfig+0x276>
 80069ca:	dc1d      	bgt.n	8006a08 <UART_SetConfig+0x288>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <UART_SetConfig+0x256>
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d005      	beq.n	80069e0 <UART_SetConfig+0x260>
 80069d4:	e018      	b.n	8006a08 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d6:	f7ff f9cf 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 80069da:	0003      	movs	r3, r0
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069de:	e01c      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e0:	4b3c      	ldr	r3, [pc, #240]	; (8006ad4 <UART_SetConfig+0x354>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2210      	movs	r2, #16
 80069e6:	4013      	ands	r3, r2
 80069e8:	d002      	beq.n	80069f0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80069ea:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <UART_SetConfig+0x364>)
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ee:	e014      	b.n	8006a1a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80069f0:	4b3d      	ldr	r3, [pc, #244]	; (8006ae8 <UART_SetConfig+0x368>)
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069f4:	e011      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f6:	f7ff f90f 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 80069fa:	0003      	movs	r3, r0
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069fe:	e00c      	b.n	8006a1a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a06:	e008      	b.n	8006a1a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a0c:	231a      	movs	r3, #26
 8006a0e:	2218      	movs	r2, #24
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	19db      	adds	r3, r3, r7
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
        break;
 8006a18:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d100      	bne.n	8006a22 <UART_SetConfig+0x2a2>
 8006a20:	e133      	b.n	8006c8a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	0013      	movs	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d305      	bcc.n	8006a3e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d906      	bls.n	8006a4c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006a3e:	231a      	movs	r3, #26
 8006a40:	2218      	movs	r2, #24
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	19db      	adds	r3, r3, r7
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e11e      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	6939      	ldr	r1, [r7, #16]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	000b      	movs	r3, r1
 8006a5a:	0e1b      	lsrs	r3, r3, #24
 8006a5c:	0010      	movs	r0, r2
 8006a5e:	0205      	lsls	r5, r0, #8
 8006a60:	431d      	orrs	r5, r3
 8006a62:	000b      	movs	r3, r1
 8006a64:	021c      	lsls	r4, r3, #8
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68b8      	ldr	r0, [r7, #8]
 8006a74:	68f9      	ldr	r1, [r7, #12]
 8006a76:	1900      	adds	r0, r0, r4
 8006a78:	4169      	adcs	r1, r5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f7f9 fcfc 	bl	8000484 <__aeabi_uldivmod>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	000b      	movs	r3, r1
 8006a90:	0013      	movs	r3, r2
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a96:	23c0      	movs	r3, #192	; 0xc0
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d309      	bcc.n	8006ab2 <UART_SetConfig+0x332>
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	035b      	lsls	r3, r3, #13
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d204      	bcs.n	8006ab2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e0eb      	b.n	8006c8a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab2:	231a      	movs	r3, #26
 8006ab4:	2218      	movs	r2, #24
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	19db      	adds	r3, r3, r7
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e0e4      	b.n	8006c8a <UART_SetConfig+0x50a>
 8006ac0:	efff69f3 	.word	0xefff69f3
 8006ac4:	ffffcfff 	.word	0xffffcfff
 8006ac8:	40004800 	.word	0x40004800
 8006acc:	fffff4ff 	.word	0xfffff4ff
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40004400 	.word	0x40004400
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	003d0900 	.word	0x003d0900
 8006ae8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d000      	beq.n	8006afa <UART_SetConfig+0x37a>
 8006af8:	e070      	b.n	8006bdc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006afa:	231b      	movs	r3, #27
 8006afc:	2218      	movs	r2, #24
 8006afe:	189b      	adds	r3, r3, r2
 8006b00:	19db      	adds	r3, r3, r7
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d822      	bhi.n	8006b4e <UART_SetConfig+0x3ce>
 8006b08:	009a      	lsls	r2, r3, #2
 8006b0a:	4b67      	ldr	r3, [pc, #412]	; (8006ca8 <UART_SetConfig+0x528>)
 8006b0c:	18d3      	adds	r3, r2, r3
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b12:	f7ff f931 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 8006b16:	0003      	movs	r3, r0
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b1a:	e021      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7ff f942 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8006b20:	0003      	movs	r3, r0
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b24:	e01c      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b26:	4b61      	ldr	r3, [pc, #388]	; (8006cac <UART_SetConfig+0x52c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d002      	beq.n	8006b36 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b30:	4b5f      	ldr	r3, [pc, #380]	; (8006cb0 <UART_SetConfig+0x530>)
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b34:	e014      	b.n	8006b60 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006b36:	4b5f      	ldr	r3, [pc, #380]	; (8006cb4 <UART_SetConfig+0x534>)
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b3a:	e011      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3c:	f7ff f86c 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8006b40:	0003      	movs	r3, r0
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b44:	e00c      	b.n	8006b60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4c:	e008      	b.n	8006b60 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b52:	231a      	movs	r3, #26
 8006b54:	2218      	movs	r2, #24
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	19db      	adds	r3, r3, r7
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
        break;
 8006b5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d100      	bne.n	8006b68 <UART_SetConfig+0x3e8>
 8006b66:	e090      	b.n	8006c8a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	005a      	lsls	r2, r3, #1
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	18d2      	adds	r2, r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	0019      	movs	r1, r3
 8006b7a:	0010      	movs	r0, r2
 8006b7c:	f7f9 face 	bl	800011c <__udivsi3>
 8006b80:	0003      	movs	r3, r0
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d921      	bls.n	8006bce <UART_SetConfig+0x44e>
 8006b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	025b      	lsls	r3, r3, #9
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d21c      	bcs.n	8006bce <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	200e      	movs	r0, #14
 8006b9a:	2418      	movs	r4, #24
 8006b9c:	1903      	adds	r3, r0, r4
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	210f      	movs	r1, #15
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2207      	movs	r2, #7
 8006bae:	4013      	ands	r3, r2
 8006bb0:	b299      	uxth	r1, r3
 8006bb2:	1903      	adds	r3, r0, r4
 8006bb4:	19db      	adds	r3, r3, r7
 8006bb6:	1902      	adds	r2, r0, r4
 8006bb8:	19d2      	adds	r2, r2, r7
 8006bba:	8812      	ldrh	r2, [r2, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	1902      	adds	r2, r0, r4
 8006bc6:	19d2      	adds	r2, r2, r7
 8006bc8:	8812      	ldrh	r2, [r2, #0]
 8006bca:	60da      	str	r2, [r3, #12]
 8006bcc:	e05d      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bce:	231a      	movs	r3, #26
 8006bd0:	2218      	movs	r2, #24
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	19db      	adds	r3, r3, r7
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e056      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bdc:	231b      	movs	r3, #27
 8006bde:	2218      	movs	r2, #24
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d822      	bhi.n	8006c30 <UART_SetConfig+0x4b0>
 8006bea:	009a      	lsls	r2, r3, #2
 8006bec:	4b32      	ldr	r3, [pc, #200]	; (8006cb8 <UART_SetConfig+0x538>)
 8006bee:	18d3      	adds	r3, r2, r3
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7ff f8c0 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bfc:	e021      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfe:	f7ff f8d1 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8006c02:	0003      	movs	r3, r0
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c06:	e01c      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <UART_SetConfig+0x52c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d002      	beq.n	8006c18 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c12:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <UART_SetConfig+0x530>)
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c16:	e014      	b.n	8006c42 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <UART_SetConfig+0x534>)
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c1c:	e011      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fe fffb 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8006c22:	0003      	movs	r3, r0
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c26:	e00c      	b.n	8006c42 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e008      	b.n	8006c42 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c34:	231a      	movs	r3, #26
 8006c36:	2218      	movs	r2, #24
 8006c38:	189b      	adds	r3, r3, r2
 8006c3a:	19db      	adds	r3, r3, r7
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
        break;
 8006c40:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085a      	lsrs	r2, r3, #1
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	18d2      	adds	r2, r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	0019      	movs	r1, r3
 8006c58:	0010      	movs	r0, r2
 8006c5a:	f7f9 fa5f 	bl	800011c <__udivsi3>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d90a      	bls.n	8006c7e <UART_SetConfig+0x4fe>
 8006c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	025b      	lsls	r3, r3, #9
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d205      	bcs.n	8006c7e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c7e:	231a      	movs	r3, #26
 8006c80:	2218      	movs	r2, #24
 8006c82:	189b      	adds	r3, r3, r2
 8006c84:	19db      	adds	r3, r3, r7
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2200      	movs	r2, #0
 8006c94:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c96:	231a      	movs	r3, #26
 8006c98:	2218      	movs	r2, #24
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	19db      	adds	r3, r3, r7
 8006c9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b00e      	add	sp, #56	; 0x38
 8006ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca8:	08008a18 	.word	0x08008a18
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	003d0900 	.word	0x003d0900
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	08008a3c 	.word	0x08008a3c

08006cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <UART_AdvFeatureConfig+0x144>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	0019      	movs	r1, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2202      	movs	r2, #2
 8006cec:	4013      	ands	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4a43      	ldr	r2, [pc, #268]	; (8006e04 <UART_AdvFeatureConfig+0x148>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a3b      	ldr	r2, [pc, #236]	; (8006e08 <UART_AdvFeatureConfig+0x14c>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2208      	movs	r2, #8
 8006d30:	4013      	ands	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	4a34      	ldr	r2, [pc, #208]	; (8006e0c <UART_AdvFeatureConfig+0x150>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	0019      	movs	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2210      	movs	r2, #16
 8006d52:	4013      	ands	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <UART_AdvFeatureConfig+0x154>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	0019      	movs	r1, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2220      	movs	r2, #32
 8006d74:	4013      	ands	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <UART_AdvFeatureConfig+0x158>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	4013      	ands	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <UART_AdvFeatureConfig+0x15c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	0019      	movs	r1, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db6:	2380      	movs	r3, #128	; 0x80
 8006db8:	035b      	lsls	r3, r3, #13
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10b      	bne.n	8006dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <UART_AdvFeatureConfig+0x160>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	0019      	movs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d00b      	beq.n	8006df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <UART_AdvFeatureConfig+0x164>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	0019      	movs	r1, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	fffdffff 	.word	0xfffdffff
 8006e04:	fffeffff 	.word	0xfffeffff
 8006e08:	fffbffff 	.word	0xfffbffff
 8006e0c:	ffff7fff 	.word	0xffff7fff
 8006e10:	ffffefff 	.word	0xffffefff
 8006e14:	ffffdfff 	.word	0xffffdfff
 8006e18:	ffefffff 	.word	0xffefffff
 8006e1c:	ff9fffff 	.word	0xff9fffff
 8006e20:	fff7ffff 	.word	0xfff7ffff

08006e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b092      	sub	sp, #72	; 0x48
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2284      	movs	r2, #132	; 0x84
 8006e30:	2100      	movs	r1, #0
 8006e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e34:	f7fc fdda 	bl	80039ec <HAL_GetTick>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2208      	movs	r2, #8
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d12c      	bne.n	8006ea4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	2280      	movs	r2, #128	; 0x80
 8006e4e:	0391      	lsls	r1, r2, #14
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4a46      	ldr	r2, [pc, #280]	; (8006f6c <UART_CheckIdleState+0x148>)
 8006e54:	9200      	str	r2, [sp, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f000 f88c 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 8006e5c:	1e03      	subs	r3, r0, #0
 8006e5e:	d021      	beq.n	8006ea4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	f383 8810 	msr	PRIMASK, r3
}
 8006e74:	46c0      	nop			; (mov r8, r8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	438a      	bics	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	f383 8810 	msr	PRIMASK, r3
}
 8006e90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2278      	movs	r2, #120	; 0x78
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e05f      	b.n	8006f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d146      	bne.n	8006f40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	2280      	movs	r2, #128	; 0x80
 8006eb6:	03d1      	lsls	r1, r2, #15
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4a2c      	ldr	r2, [pc, #176]	; (8006f6c <UART_CheckIdleState+0x148>)
 8006ebc:	9200      	str	r2, [sp, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f000 f858 	bl	8006f74 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	1e03      	subs	r3, r0, #0
 8006ec6:	d03b      	beq.n	8006f40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ece:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f383 8810 	msr	PRIMASK, r3
}
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4921      	ldr	r1, [pc, #132]	; (8006f70 <UART_CheckIdleState+0x14c>)
 8006eea:	400a      	ands	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f383 8810 	msr	PRIMASK, r3
}
 8006ef8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efa:	f3ef 8310 	mrs	r3, PRIMASK
 8006efe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
 8006f04:	2301      	movs	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	438a      	bics	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	2120      	movs	r1, #32
 8006f32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2278      	movs	r2, #120	; 0x78
 8006f38:	2100      	movs	r1, #0
 8006f3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e011      	b.n	8006f64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2280      	movs	r2, #128	; 0x80
 8006f4a:	2120      	movs	r1, #32
 8006f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2278      	movs	r2, #120	; 0x78
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	0018      	movs	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b010      	add	sp, #64	; 0x40
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	01ffffff 	.word	0x01ffffff
 8006f70:	fffffedf 	.word	0xfffffedf

08006f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	1dfb      	adds	r3, r7, #7
 8006f82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f84:	e04b      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	d048      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8c:	f7fc fd2e 	bl	80039ec <HAL_GetTick>
 8006f90:	0002      	movs	r2, r0
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d302      	bcc.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e04b      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2204      	movs	r2, #4
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d035      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d111      	bne.n	8006fe4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f83c 	bl	8007048 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2284      	movs	r2, #132	; 0x84
 8006fd4:	2108      	movs	r1, #8
 8006fd6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2278      	movs	r2, #120	; 0x78
 8006fdc:	2100      	movs	r1, #0
 8006fde:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e02c      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69da      	ldr	r2, [r3, #28]
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	401a      	ands	r2, r3
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d112      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	0112      	lsls	r2, r2, #4
 8007000:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	0018      	movs	r0, r3
 8007006:	f000 f81f 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2284      	movs	r2, #132	; 0x84
 800700e:	2120      	movs	r1, #32
 8007010:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2278      	movs	r2, #120	; 0x78
 8007016:	2100      	movs	r1, #0
 8007018:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e00f      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	425a      	negs	r2, r3
 800702e:	4153      	adcs	r3, r2
 8007030:	b2db      	uxtb	r3, r3
 8007032:	001a      	movs	r2, r3
 8007034:	1dfb      	adds	r3, r7, #7
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d0a4      	beq.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	0018      	movs	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	b004      	add	sp, #16
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	617b      	str	r3, [r7, #20]
  return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4926      	ldr	r1, [pc, #152]	; (800710c <UART_EndRxTransfer+0xc4>)
 8007072:	400a      	ands	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007082:	f3ef 8310 	mrs	r3, PRIMASK
 8007086:	623b      	str	r3, [r7, #32]
  return(result);
 8007088:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
 800708c:	2301      	movs	r3, #1
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	f383 8810 	msr	PRIMASK, r3
}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2101      	movs	r1, #1
 80070a4:	438a      	bics	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f383 8810 	msr	PRIMASK, r3
}
 80070b2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d118      	bne.n	80070ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c6:	2301      	movs	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2110      	movs	r1, #16
 80070de:	438a      	bics	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f383 8810 	msr	PRIMASK, r3
}
 80070ec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	2120      	movs	r1, #32
 80070f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	46bd      	mov	sp, r7
 8007106:	b00e      	add	sp, #56	; 0x38
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	fffffedf 	.word	0xfffffedf

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	2000000c 	.word	0x2000000c

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	2600      	movs	r6, #0
 8007120:	4d0c      	ldr	r5, [pc, #48]	; (8007154 <__libc_init_array+0x38>)
 8007122:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	2600      	movs	r6, #0
 800712e:	f001 fb8f 	bl	8008850 <_init>
 8007132:	4d0a      	ldr	r5, [pc, #40]	; (800715c <__libc_init_array+0x40>)
 8007134:	4c0a      	ldr	r4, [pc, #40]	; (8007160 <__libc_init_array+0x44>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	00b3      	lsls	r3, r6, #2
 8007142:	58eb      	ldr	r3, [r5, r3]
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	00b3      	lsls	r3, r6, #2
 800714c:	58eb      	ldr	r3, [r5, r3]
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	08008ad0 	.word	0x08008ad0
 8007158:	08008ad0 	.word	0x08008ad0
 800715c:	08008ad0 	.word	0x08008ad0
 8007160:	08008ad4 	.word	0x08008ad4

08007164 <memset>:
 8007164:	0003      	movs	r3, r0
 8007166:	1882      	adds	r2, r0, r2
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	7019      	strb	r1, [r3, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <siprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b500      	push	{lr}
 8007178:	490b      	ldr	r1, [pc, #44]	; (80071a8 <siprintf+0x34>)
 800717a:	b09c      	sub	sp, #112	; 0x70
 800717c:	ab1d      	add	r3, sp, #116	; 0x74
 800717e:	9002      	str	r0, [sp, #8]
 8007180:	9006      	str	r0, [sp, #24]
 8007182:	9107      	str	r1, [sp, #28]
 8007184:	9104      	str	r1, [sp, #16]
 8007186:	4809      	ldr	r0, [pc, #36]	; (80071ac <siprintf+0x38>)
 8007188:	4909      	ldr	r1, [pc, #36]	; (80071b0 <siprintf+0x3c>)
 800718a:	cb04      	ldmia	r3!, {r2}
 800718c:	9105      	str	r1, [sp, #20]
 800718e:	6800      	ldr	r0, [r0, #0]
 8007190:	a902      	add	r1, sp, #8
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	f000 f870 	bl	8007278 <_svfiprintf_r>
 8007198:	2300      	movs	r3, #0
 800719a:	9a02      	ldr	r2, [sp, #8]
 800719c:	7013      	strb	r3, [r2, #0]
 800719e:	b01c      	add	sp, #112	; 0x70
 80071a0:	bc08      	pop	{r3}
 80071a2:	b003      	add	sp, #12
 80071a4:	4718      	bx	r3
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	7fffffff 	.word	0x7fffffff
 80071ac:	2000000c 	.word	0x2000000c
 80071b0:	ffff0208 	.word	0xffff0208

080071b4 <__ssputs_r>:
 80071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b6:	688e      	ldr	r6, [r1, #8]
 80071b8:	b085      	sub	sp, #20
 80071ba:	0007      	movs	r7, r0
 80071bc:	000c      	movs	r4, r1
 80071be:	9203      	str	r2, [sp, #12]
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	429e      	cmp	r6, r3
 80071c4:	d83c      	bhi.n	8007240 <__ssputs_r+0x8c>
 80071c6:	2390      	movs	r3, #144	; 0x90
 80071c8:	898a      	ldrh	r2, [r1, #12]
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	421a      	tst	r2, r3
 80071ce:	d034      	beq.n	800723a <__ssputs_r+0x86>
 80071d0:	6909      	ldr	r1, [r1, #16]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	6960      	ldr	r0, [r4, #20]
 80071d6:	1a5b      	subs	r3, r3, r1
 80071d8:	9302      	str	r3, [sp, #8]
 80071da:	2303      	movs	r3, #3
 80071dc:	4343      	muls	r3, r0
 80071de:	0fdd      	lsrs	r5, r3, #31
 80071e0:	18ed      	adds	r5, r5, r3
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	9802      	ldr	r0, [sp, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	181b      	adds	r3, r3, r0
 80071ea:	106d      	asrs	r5, r5, #1
 80071ec:	42ab      	cmp	r3, r5
 80071ee:	d900      	bls.n	80071f2 <__ssputs_r+0x3e>
 80071f0:	001d      	movs	r5, r3
 80071f2:	0553      	lsls	r3, r2, #21
 80071f4:	d532      	bpl.n	800725c <__ssputs_r+0xa8>
 80071f6:	0029      	movs	r1, r5
 80071f8:	0038      	movs	r0, r7
 80071fa:	f000 fb53 	bl	80078a4 <_malloc_r>
 80071fe:	1e06      	subs	r6, r0, #0
 8007200:	d109      	bne.n	8007216 <__ssputs_r+0x62>
 8007202:	230c      	movs	r3, #12
 8007204:	603b      	str	r3, [r7, #0]
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	2001      	movs	r0, #1
 800720a:	89a2      	ldrh	r2, [r4, #12]
 800720c:	4240      	negs	r0, r0
 800720e:	4313      	orrs	r3, r2
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	b005      	add	sp, #20
 8007214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007216:	9a02      	ldr	r2, [sp, #8]
 8007218:	6921      	ldr	r1, [r4, #16]
 800721a:	f000 faba 	bl	8007792 <memcpy>
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <__ssputs_r+0xc0>)
 8007222:	401a      	ands	r2, r3
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	4313      	orrs	r3, r2
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	9b02      	ldr	r3, [sp, #8]
 800722c:	6126      	str	r6, [r4, #16]
 800722e:	18f6      	adds	r6, r6, r3
 8007230:	6026      	str	r6, [r4, #0]
 8007232:	6165      	str	r5, [r4, #20]
 8007234:	9e01      	ldr	r6, [sp, #4]
 8007236:	1aed      	subs	r5, r5, r3
 8007238:	60a5      	str	r5, [r4, #8]
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	429e      	cmp	r6, r3
 800723e:	d900      	bls.n	8007242 <__ssputs_r+0x8e>
 8007240:	9e01      	ldr	r6, [sp, #4]
 8007242:	0032      	movs	r2, r6
 8007244:	9903      	ldr	r1, [sp, #12]
 8007246:	6820      	ldr	r0, [r4, #0]
 8007248:	f000 faac 	bl	80077a4 <memmove>
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	2000      	movs	r0, #0
 8007250:	1b9b      	subs	r3, r3, r6
 8007252:	60a3      	str	r3, [r4, #8]
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	199e      	adds	r6, r3, r6
 8007258:	6026      	str	r6, [r4, #0]
 800725a:	e7da      	b.n	8007212 <__ssputs_r+0x5e>
 800725c:	002a      	movs	r2, r5
 800725e:	0038      	movs	r0, r7
 8007260:	f000 fb96 	bl	8007990 <_realloc_r>
 8007264:	1e06      	subs	r6, r0, #0
 8007266:	d1e0      	bne.n	800722a <__ssputs_r+0x76>
 8007268:	0038      	movs	r0, r7
 800726a:	6921      	ldr	r1, [r4, #16]
 800726c:	f000 faae 	bl	80077cc <_free_r>
 8007270:	e7c7      	b.n	8007202 <__ssputs_r+0x4e>
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	fffffb7f 	.word	0xfffffb7f

08007278 <_svfiprintf_r>:
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727a:	b0a1      	sub	sp, #132	; 0x84
 800727c:	9003      	str	r0, [sp, #12]
 800727e:	001d      	movs	r5, r3
 8007280:	898b      	ldrh	r3, [r1, #12]
 8007282:	000f      	movs	r7, r1
 8007284:	0016      	movs	r6, r2
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	d511      	bpl.n	80072ae <_svfiprintf_r+0x36>
 800728a:	690b      	ldr	r3, [r1, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10e      	bne.n	80072ae <_svfiprintf_r+0x36>
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	f000 fb07 	bl	80078a4 <_malloc_r>
 8007296:	6038      	str	r0, [r7, #0]
 8007298:	6138      	str	r0, [r7, #16]
 800729a:	2800      	cmp	r0, #0
 800729c:	d105      	bne.n	80072aa <_svfiprintf_r+0x32>
 800729e:	230c      	movs	r3, #12
 80072a0:	9a03      	ldr	r2, [sp, #12]
 80072a2:	3801      	subs	r0, #1
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	b021      	add	sp, #132	; 0x84
 80072a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072aa:	2340      	movs	r3, #64	; 0x40
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	2300      	movs	r3, #0
 80072b0:	ac08      	add	r4, sp, #32
 80072b2:	6163      	str	r3, [r4, #20]
 80072b4:	3320      	adds	r3, #32
 80072b6:	7663      	strb	r3, [r4, #25]
 80072b8:	3310      	adds	r3, #16
 80072ba:	76a3      	strb	r3, [r4, #26]
 80072bc:	9507      	str	r5, [sp, #28]
 80072be:	0035      	movs	r5, r6
 80072c0:	782b      	ldrb	r3, [r5, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <_svfiprintf_r+0x52>
 80072c6:	2b25      	cmp	r3, #37	; 0x25
 80072c8:	d147      	bne.n	800735a <_svfiprintf_r+0xe2>
 80072ca:	1bab      	subs	r3, r5, r6
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	42b5      	cmp	r5, r6
 80072d0:	d00c      	beq.n	80072ec <_svfiprintf_r+0x74>
 80072d2:	0032      	movs	r2, r6
 80072d4:	0039      	movs	r1, r7
 80072d6:	9803      	ldr	r0, [sp, #12]
 80072d8:	f7ff ff6c 	bl	80071b4 <__ssputs_r>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d100      	bne.n	80072e2 <_svfiprintf_r+0x6a>
 80072e0:	e0ae      	b.n	8007440 <_svfiprintf_r+0x1c8>
 80072e2:	6962      	ldr	r2, [r4, #20]
 80072e4:	9b05      	ldr	r3, [sp, #20]
 80072e6:	4694      	mov	ip, r2
 80072e8:	4463      	add	r3, ip
 80072ea:	6163      	str	r3, [r4, #20]
 80072ec:	782b      	ldrb	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d100      	bne.n	80072f4 <_svfiprintf_r+0x7c>
 80072f2:	e0a5      	b.n	8007440 <_svfiprintf_r+0x1c8>
 80072f4:	2201      	movs	r2, #1
 80072f6:	2300      	movs	r3, #0
 80072f8:	4252      	negs	r2, r2
 80072fa:	6062      	str	r2, [r4, #4]
 80072fc:	a904      	add	r1, sp, #16
 80072fe:	3254      	adds	r2, #84	; 0x54
 8007300:	1852      	adds	r2, r2, r1
 8007302:	1c6e      	adds	r6, r5, #1
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	60e3      	str	r3, [r4, #12]
 8007308:	60a3      	str	r3, [r4, #8]
 800730a:	7013      	strb	r3, [r2, #0]
 800730c:	65a3      	str	r3, [r4, #88]	; 0x58
 800730e:	2205      	movs	r2, #5
 8007310:	7831      	ldrb	r1, [r6, #0]
 8007312:	4854      	ldr	r0, [pc, #336]	; (8007464 <_svfiprintf_r+0x1ec>)
 8007314:	f000 fa32 	bl	800777c <memchr>
 8007318:	1c75      	adds	r5, r6, #1
 800731a:	2800      	cmp	r0, #0
 800731c:	d11f      	bne.n	800735e <_svfiprintf_r+0xe6>
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	06d3      	lsls	r3, r2, #27
 8007322:	d504      	bpl.n	800732e <_svfiprintf_r+0xb6>
 8007324:	2353      	movs	r3, #83	; 0x53
 8007326:	a904      	add	r1, sp, #16
 8007328:	185b      	adds	r3, r3, r1
 800732a:	2120      	movs	r1, #32
 800732c:	7019      	strb	r1, [r3, #0]
 800732e:	0713      	lsls	r3, r2, #28
 8007330:	d504      	bpl.n	800733c <_svfiprintf_r+0xc4>
 8007332:	2353      	movs	r3, #83	; 0x53
 8007334:	a904      	add	r1, sp, #16
 8007336:	185b      	adds	r3, r3, r1
 8007338:	212b      	movs	r1, #43	; 0x2b
 800733a:	7019      	strb	r1, [r3, #0]
 800733c:	7833      	ldrb	r3, [r6, #0]
 800733e:	2b2a      	cmp	r3, #42	; 0x2a
 8007340:	d016      	beq.n	8007370 <_svfiprintf_r+0xf8>
 8007342:	0035      	movs	r5, r6
 8007344:	2100      	movs	r1, #0
 8007346:	200a      	movs	r0, #10
 8007348:	68e3      	ldr	r3, [r4, #12]
 800734a:	782a      	ldrb	r2, [r5, #0]
 800734c:	1c6e      	adds	r6, r5, #1
 800734e:	3a30      	subs	r2, #48	; 0x30
 8007350:	2a09      	cmp	r2, #9
 8007352:	d94e      	bls.n	80073f2 <_svfiprintf_r+0x17a>
 8007354:	2900      	cmp	r1, #0
 8007356:	d111      	bne.n	800737c <_svfiprintf_r+0x104>
 8007358:	e017      	b.n	800738a <_svfiprintf_r+0x112>
 800735a:	3501      	adds	r5, #1
 800735c:	e7b0      	b.n	80072c0 <_svfiprintf_r+0x48>
 800735e:	4b41      	ldr	r3, [pc, #260]	; (8007464 <_svfiprintf_r+0x1ec>)
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	1ac0      	subs	r0, r0, r3
 8007364:	2301      	movs	r3, #1
 8007366:	4083      	lsls	r3, r0
 8007368:	4313      	orrs	r3, r2
 800736a:	002e      	movs	r6, r5
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	e7ce      	b.n	800730e <_svfiprintf_r+0x96>
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	1d19      	adds	r1, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9107      	str	r1, [sp, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db01      	blt.n	8007380 <_svfiprintf_r+0x108>
 800737c:	930b      	str	r3, [sp, #44]	; 0x2c
 800737e:	e004      	b.n	800738a <_svfiprintf_r+0x112>
 8007380:	425b      	negs	r3, r3
 8007382:	60e3      	str	r3, [r4, #12]
 8007384:	2302      	movs	r3, #2
 8007386:	4313      	orrs	r3, r2
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	782b      	ldrb	r3, [r5, #0]
 800738c:	2b2e      	cmp	r3, #46	; 0x2e
 800738e:	d10a      	bne.n	80073a6 <_svfiprintf_r+0x12e>
 8007390:	786b      	ldrb	r3, [r5, #1]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d135      	bne.n	8007402 <_svfiprintf_r+0x18a>
 8007396:	9b07      	ldr	r3, [sp, #28]
 8007398:	3502      	adds	r5, #2
 800739a:	1d1a      	adds	r2, r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	9207      	str	r2, [sp, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db2b      	blt.n	80073fc <_svfiprintf_r+0x184>
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	4e30      	ldr	r6, [pc, #192]	; (8007468 <_svfiprintf_r+0x1f0>)
 80073a8:	2203      	movs	r2, #3
 80073aa:	0030      	movs	r0, r6
 80073ac:	7829      	ldrb	r1, [r5, #0]
 80073ae:	f000 f9e5 	bl	800777c <memchr>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d006      	beq.n	80073c4 <_svfiprintf_r+0x14c>
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	1b80      	subs	r0, r0, r6
 80073ba:	4083      	lsls	r3, r0
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	3501      	adds	r5, #1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	7829      	ldrb	r1, [r5, #0]
 80073c6:	2206      	movs	r2, #6
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_svfiprintf_r+0x1f4>)
 80073ca:	1c6e      	adds	r6, r5, #1
 80073cc:	7621      	strb	r1, [r4, #24]
 80073ce:	f000 f9d5 	bl	800777c <memchr>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d03c      	beq.n	8007450 <_svfiprintf_r+0x1d8>
 80073d6:	4b26      	ldr	r3, [pc, #152]	; (8007470 <_svfiprintf_r+0x1f8>)
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d125      	bne.n	8007428 <_svfiprintf_r+0x1b0>
 80073dc:	2207      	movs	r2, #7
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	3307      	adds	r3, #7
 80073e2:	4393      	bics	r3, r2
 80073e4:	3308      	adds	r3, #8
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	6963      	ldr	r3, [r4, #20]
 80073ea:	9a04      	ldr	r2, [sp, #16]
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	6163      	str	r3, [r4, #20]
 80073f0:	e765      	b.n	80072be <_svfiprintf_r+0x46>
 80073f2:	4343      	muls	r3, r0
 80073f4:	0035      	movs	r5, r6
 80073f6:	2101      	movs	r1, #1
 80073f8:	189b      	adds	r3, r3, r2
 80073fa:	e7a6      	b.n	800734a <_svfiprintf_r+0xd2>
 80073fc:	2301      	movs	r3, #1
 80073fe:	425b      	negs	r3, r3
 8007400:	e7d0      	b.n	80073a4 <_svfiprintf_r+0x12c>
 8007402:	2300      	movs	r3, #0
 8007404:	200a      	movs	r0, #10
 8007406:	001a      	movs	r2, r3
 8007408:	3501      	adds	r5, #1
 800740a:	6063      	str	r3, [r4, #4]
 800740c:	7829      	ldrb	r1, [r5, #0]
 800740e:	1c6e      	adds	r6, r5, #1
 8007410:	3930      	subs	r1, #48	; 0x30
 8007412:	2909      	cmp	r1, #9
 8007414:	d903      	bls.n	800741e <_svfiprintf_r+0x1a6>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0c5      	beq.n	80073a6 <_svfiprintf_r+0x12e>
 800741a:	9209      	str	r2, [sp, #36]	; 0x24
 800741c:	e7c3      	b.n	80073a6 <_svfiprintf_r+0x12e>
 800741e:	4342      	muls	r2, r0
 8007420:	0035      	movs	r5, r6
 8007422:	2301      	movs	r3, #1
 8007424:	1852      	adds	r2, r2, r1
 8007426:	e7f1      	b.n	800740c <_svfiprintf_r+0x194>
 8007428:	ab07      	add	r3, sp, #28
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	003a      	movs	r2, r7
 800742e:	0021      	movs	r1, r4
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <_svfiprintf_r+0x1fc>)
 8007432:	9803      	ldr	r0, [sp, #12]
 8007434:	e000      	b.n	8007438 <_svfiprintf_r+0x1c0>
 8007436:	bf00      	nop
 8007438:	9004      	str	r0, [sp, #16]
 800743a:	9b04      	ldr	r3, [sp, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	d1d3      	bne.n	80073e8 <_svfiprintf_r+0x170>
 8007440:	89bb      	ldrh	r3, [r7, #12]
 8007442:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007444:	065b      	lsls	r3, r3, #25
 8007446:	d400      	bmi.n	800744a <_svfiprintf_r+0x1d2>
 8007448:	e72d      	b.n	80072a6 <_svfiprintf_r+0x2e>
 800744a:	2001      	movs	r0, #1
 800744c:	4240      	negs	r0, r0
 800744e:	e72a      	b.n	80072a6 <_svfiprintf_r+0x2e>
 8007450:	ab07      	add	r3, sp, #28
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	003a      	movs	r2, r7
 8007456:	0021      	movs	r1, r4
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <_svfiprintf_r+0x1fc>)
 800745a:	9803      	ldr	r0, [sp, #12]
 800745c:	f000 f87c 	bl	8007558 <_printf_i>
 8007460:	e7ea      	b.n	8007438 <_svfiprintf_r+0x1c0>
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	08008a60 	.word	0x08008a60
 8007468:	08008a66 	.word	0x08008a66
 800746c:	08008a6a 	.word	0x08008a6a
 8007470:	00000000 	.word	0x00000000
 8007474:	080071b5 	.word	0x080071b5

08007478 <_printf_common>:
 8007478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800747a:	0015      	movs	r5, r2
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	688a      	ldr	r2, [r1, #8]
 8007480:	690b      	ldr	r3, [r1, #16]
 8007482:	000c      	movs	r4, r1
 8007484:	9000      	str	r0, [sp, #0]
 8007486:	4293      	cmp	r3, r2
 8007488:	da00      	bge.n	800748c <_printf_common+0x14>
 800748a:	0013      	movs	r3, r2
 800748c:	0022      	movs	r2, r4
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	3243      	adds	r2, #67	; 0x43
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	2a00      	cmp	r2, #0
 8007496:	d001      	beq.n	800749c <_printf_common+0x24>
 8007498:	3301      	adds	r3, #1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	069b      	lsls	r3, r3, #26
 80074a0:	d502      	bpl.n	80074a8 <_printf_common+0x30>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	3302      	adds	r3, #2
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	2306      	movs	r3, #6
 80074ac:	0017      	movs	r7, r2
 80074ae:	401f      	ands	r7, r3
 80074b0:	421a      	tst	r2, r3
 80074b2:	d027      	beq.n	8007504 <_printf_common+0x8c>
 80074b4:	0023      	movs	r3, r4
 80074b6:	3343      	adds	r3, #67	; 0x43
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	4193      	sbcs	r3, r2
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	0692      	lsls	r2, r2, #26
 80074c2:	d430      	bmi.n	8007526 <_printf_common+0xae>
 80074c4:	0022      	movs	r2, r4
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	9800      	ldr	r0, [sp, #0]
 80074ca:	9e08      	ldr	r6, [sp, #32]
 80074cc:	3243      	adds	r2, #67	; 0x43
 80074ce:	47b0      	blx	r6
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d025      	beq.n	8007520 <_printf_common+0xa8>
 80074d4:	2306      	movs	r3, #6
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	682a      	ldr	r2, [r5, #0]
 80074da:	68e1      	ldr	r1, [r4, #12]
 80074dc:	2500      	movs	r5, #0
 80074de:	4003      	ands	r3, r0
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d103      	bne.n	80074ec <_printf_common+0x74>
 80074e4:	1a8d      	subs	r5, r1, r2
 80074e6:	43eb      	mvns	r3, r5
 80074e8:	17db      	asrs	r3, r3, #31
 80074ea:	401d      	ands	r5, r3
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	6922      	ldr	r2, [r4, #16]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	dd01      	ble.n	80074f8 <_printf_common+0x80>
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	18ed      	adds	r5, r5, r3
 80074f8:	2700      	movs	r7, #0
 80074fa:	42bd      	cmp	r5, r7
 80074fc:	d120      	bne.n	8007540 <_printf_common+0xc8>
 80074fe:	2000      	movs	r0, #0
 8007500:	e010      	b.n	8007524 <_printf_common+0xac>
 8007502:	3701      	adds	r7, #1
 8007504:	68e3      	ldr	r3, [r4, #12]
 8007506:	682a      	ldr	r2, [r5, #0]
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	42bb      	cmp	r3, r7
 800750c:	ddd2      	ble.n	80074b4 <_printf_common+0x3c>
 800750e:	0022      	movs	r2, r4
 8007510:	2301      	movs	r3, #1
 8007512:	9901      	ldr	r1, [sp, #4]
 8007514:	9800      	ldr	r0, [sp, #0]
 8007516:	9e08      	ldr	r6, [sp, #32]
 8007518:	3219      	adds	r2, #25
 800751a:	47b0      	blx	r6
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d1f0      	bne.n	8007502 <_printf_common+0x8a>
 8007520:	2001      	movs	r0, #1
 8007522:	4240      	negs	r0, r0
 8007524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007526:	2030      	movs	r0, #48	; 0x30
 8007528:	18e1      	adds	r1, r4, r3
 800752a:	3143      	adds	r1, #67	; 0x43
 800752c:	7008      	strb	r0, [r1, #0]
 800752e:	0021      	movs	r1, r4
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	3145      	adds	r1, #69	; 0x45
 8007534:	7809      	ldrb	r1, [r1, #0]
 8007536:	18a2      	adds	r2, r4, r2
 8007538:	3243      	adds	r2, #67	; 0x43
 800753a:	3302      	adds	r3, #2
 800753c:	7011      	strb	r1, [r2, #0]
 800753e:	e7c1      	b.n	80074c4 <_printf_common+0x4c>
 8007540:	0022      	movs	r2, r4
 8007542:	2301      	movs	r3, #1
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	9800      	ldr	r0, [sp, #0]
 8007548:	9e08      	ldr	r6, [sp, #32]
 800754a:	321a      	adds	r2, #26
 800754c:	47b0      	blx	r6
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d0e6      	beq.n	8007520 <_printf_common+0xa8>
 8007552:	3701      	adds	r7, #1
 8007554:	e7d1      	b.n	80074fa <_printf_common+0x82>
	...

08007558 <_printf_i>:
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b08b      	sub	sp, #44	; 0x2c
 800755c:	9206      	str	r2, [sp, #24]
 800755e:	000a      	movs	r2, r1
 8007560:	3243      	adds	r2, #67	; 0x43
 8007562:	9307      	str	r3, [sp, #28]
 8007564:	9005      	str	r0, [sp, #20]
 8007566:	9204      	str	r2, [sp, #16]
 8007568:	7e0a      	ldrb	r2, [r1, #24]
 800756a:	000c      	movs	r4, r1
 800756c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800756e:	2a78      	cmp	r2, #120	; 0x78
 8007570:	d807      	bhi.n	8007582 <_printf_i+0x2a>
 8007572:	2a62      	cmp	r2, #98	; 0x62
 8007574:	d809      	bhi.n	800758a <_printf_i+0x32>
 8007576:	2a00      	cmp	r2, #0
 8007578:	d100      	bne.n	800757c <_printf_i+0x24>
 800757a:	e0c1      	b.n	8007700 <_printf_i+0x1a8>
 800757c:	2a58      	cmp	r2, #88	; 0x58
 800757e:	d100      	bne.n	8007582 <_printf_i+0x2a>
 8007580:	e08c      	b.n	800769c <_printf_i+0x144>
 8007582:	0026      	movs	r6, r4
 8007584:	3642      	adds	r6, #66	; 0x42
 8007586:	7032      	strb	r2, [r6, #0]
 8007588:	e022      	b.n	80075d0 <_printf_i+0x78>
 800758a:	0010      	movs	r0, r2
 800758c:	3863      	subs	r0, #99	; 0x63
 800758e:	2815      	cmp	r0, #21
 8007590:	d8f7      	bhi.n	8007582 <_printf_i+0x2a>
 8007592:	f7f8 fdb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8007596:	0016      	.short	0x0016
 8007598:	fff6001f 	.word	0xfff6001f
 800759c:	fff6fff6 	.word	0xfff6fff6
 80075a0:	001ffff6 	.word	0x001ffff6
 80075a4:	fff6fff6 	.word	0xfff6fff6
 80075a8:	fff6fff6 	.word	0xfff6fff6
 80075ac:	003600a8 	.word	0x003600a8
 80075b0:	fff6009a 	.word	0xfff6009a
 80075b4:	00b9fff6 	.word	0x00b9fff6
 80075b8:	0036fff6 	.word	0x0036fff6
 80075bc:	fff6fff6 	.word	0xfff6fff6
 80075c0:	009e      	.short	0x009e
 80075c2:	0026      	movs	r6, r4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	3642      	adds	r6, #66	; 0x42
 80075c8:	1d11      	adds	r1, r2, #4
 80075ca:	6019      	str	r1, [r3, #0]
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	7033      	strb	r3, [r6, #0]
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0a7      	b.n	8007724 <_printf_i+0x1cc>
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	1d0a      	adds	r2, r1, #4
 80075da:	0605      	lsls	r5, r0, #24
 80075dc:	d50b      	bpl.n	80075f6 <_printf_i+0x9e>
 80075de:	680d      	ldr	r5, [r1, #0]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	da03      	bge.n	80075ee <_printf_i+0x96>
 80075e6:	232d      	movs	r3, #45	; 0x2d
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	426d      	negs	r5, r5
 80075ec:	7013      	strb	r3, [r2, #0]
 80075ee:	4b61      	ldr	r3, [pc, #388]	; (8007774 <_printf_i+0x21c>)
 80075f0:	270a      	movs	r7, #10
 80075f2:	9303      	str	r3, [sp, #12]
 80075f4:	e01b      	b.n	800762e <_printf_i+0xd6>
 80075f6:	680d      	ldr	r5, [r1, #0]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	0641      	lsls	r1, r0, #25
 80075fc:	d5f1      	bpl.n	80075e2 <_printf_i+0x8a>
 80075fe:	b22d      	sxth	r5, r5
 8007600:	e7ef      	b.n	80075e2 <_printf_i+0x8a>
 8007602:	680d      	ldr	r5, [r1, #0]
 8007604:	6819      	ldr	r1, [r3, #0]
 8007606:	1d08      	adds	r0, r1, #4
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	062e      	lsls	r6, r5, #24
 800760c:	d501      	bpl.n	8007612 <_printf_i+0xba>
 800760e:	680d      	ldr	r5, [r1, #0]
 8007610:	e003      	b.n	800761a <_printf_i+0xc2>
 8007612:	066d      	lsls	r5, r5, #25
 8007614:	d5fb      	bpl.n	800760e <_printf_i+0xb6>
 8007616:	680d      	ldr	r5, [r1, #0]
 8007618:	b2ad      	uxth	r5, r5
 800761a:	4b56      	ldr	r3, [pc, #344]	; (8007774 <_printf_i+0x21c>)
 800761c:	2708      	movs	r7, #8
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	2a6f      	cmp	r2, #111	; 0x6f
 8007622:	d000      	beq.n	8007626 <_printf_i+0xce>
 8007624:	3702      	adds	r7, #2
 8007626:	0023      	movs	r3, r4
 8007628:	2200      	movs	r2, #0
 800762a:	3343      	adds	r3, #67	; 0x43
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	60a3      	str	r3, [r4, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	db03      	blt.n	800763e <_printf_i+0xe6>
 8007636:	2204      	movs	r2, #4
 8007638:	6821      	ldr	r1, [r4, #0]
 800763a:	4391      	bics	r1, r2
 800763c:	6021      	str	r1, [r4, #0]
 800763e:	2d00      	cmp	r5, #0
 8007640:	d102      	bne.n	8007648 <_printf_i+0xf0>
 8007642:	9e04      	ldr	r6, [sp, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <_printf_i+0x10a>
 8007648:	9e04      	ldr	r6, [sp, #16]
 800764a:	0028      	movs	r0, r5
 800764c:	0039      	movs	r1, r7
 800764e:	f7f8 fdeb 	bl	8000228 <__aeabi_uidivmod>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	3e01      	subs	r6, #1
 8007656:	5c5b      	ldrb	r3, [r3, r1]
 8007658:	7033      	strb	r3, [r6, #0]
 800765a:	002b      	movs	r3, r5
 800765c:	0005      	movs	r5, r0
 800765e:	429f      	cmp	r7, r3
 8007660:	d9f3      	bls.n	800764a <_printf_i+0xf2>
 8007662:	2f08      	cmp	r7, #8
 8007664:	d109      	bne.n	800767a <_printf_i+0x122>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	07db      	lsls	r3, r3, #31
 800766a:	d506      	bpl.n	800767a <_printf_i+0x122>
 800766c:	6863      	ldr	r3, [r4, #4]
 800766e:	6922      	ldr	r2, [r4, #16]
 8007670:	4293      	cmp	r3, r2
 8007672:	dc02      	bgt.n	800767a <_printf_i+0x122>
 8007674:	2330      	movs	r3, #48	; 0x30
 8007676:	3e01      	subs	r6, #1
 8007678:	7033      	strb	r3, [r6, #0]
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	1b9b      	subs	r3, r3, r6
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	0021      	movs	r1, r4
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	9805      	ldr	r0, [sp, #20]
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	aa09      	add	r2, sp, #36	; 0x24
 800768c:	f7ff fef4 	bl	8007478 <_printf_common>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d14c      	bne.n	800772e <_printf_i+0x1d6>
 8007694:	2001      	movs	r0, #1
 8007696:	4240      	negs	r0, r0
 8007698:	b00b      	add	sp, #44	; 0x2c
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	3145      	adds	r1, #69	; 0x45
 800769e:	700a      	strb	r2, [r1, #0]
 80076a0:	4a34      	ldr	r2, [pc, #208]	; (8007774 <_printf_i+0x21c>)
 80076a2:	9203      	str	r2, [sp, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	ca20      	ldmia	r2!, {r5}
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	0608      	lsls	r0, r1, #24
 80076ae:	d516      	bpl.n	80076de <_printf_i+0x186>
 80076b0:	07cb      	lsls	r3, r1, #31
 80076b2:	d502      	bpl.n	80076ba <_printf_i+0x162>
 80076b4:	2320      	movs	r3, #32
 80076b6:	4319      	orrs	r1, r3
 80076b8:	6021      	str	r1, [r4, #0]
 80076ba:	2710      	movs	r7, #16
 80076bc:	2d00      	cmp	r5, #0
 80076be:	d1b2      	bne.n	8007626 <_printf_i+0xce>
 80076c0:	2320      	movs	r3, #32
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	439a      	bics	r2, r3
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	e7ad      	b.n	8007626 <_printf_i+0xce>
 80076ca:	2220      	movs	r2, #32
 80076cc:	6809      	ldr	r1, [r1, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	0022      	movs	r2, r4
 80076d4:	2178      	movs	r1, #120	; 0x78
 80076d6:	3245      	adds	r2, #69	; 0x45
 80076d8:	7011      	strb	r1, [r2, #0]
 80076da:	4a27      	ldr	r2, [pc, #156]	; (8007778 <_printf_i+0x220>)
 80076dc:	e7e1      	b.n	80076a2 <_printf_i+0x14a>
 80076de:	0648      	lsls	r0, r1, #25
 80076e0:	d5e6      	bpl.n	80076b0 <_printf_i+0x158>
 80076e2:	b2ad      	uxth	r5, r5
 80076e4:	e7e4      	b.n	80076b0 <_printf_i+0x158>
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	680d      	ldr	r5, [r1, #0]
 80076ea:	1d10      	adds	r0, r2, #4
 80076ec:	6949      	ldr	r1, [r1, #20]
 80076ee:	6018      	str	r0, [r3, #0]
 80076f0:	6813      	ldr	r3, [r2, #0]
 80076f2:	062e      	lsls	r6, r5, #24
 80076f4:	d501      	bpl.n	80076fa <_printf_i+0x1a2>
 80076f6:	6019      	str	r1, [r3, #0]
 80076f8:	e002      	b.n	8007700 <_printf_i+0x1a8>
 80076fa:	066d      	lsls	r5, r5, #25
 80076fc:	d5fb      	bpl.n	80076f6 <_printf_i+0x19e>
 80076fe:	8019      	strh	r1, [r3, #0]
 8007700:	2300      	movs	r3, #0
 8007702:	9e04      	ldr	r6, [sp, #16]
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	e7bb      	b.n	8007680 <_printf_i+0x128>
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	1d11      	adds	r1, r2, #4
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	6816      	ldr	r6, [r2, #0]
 8007710:	2100      	movs	r1, #0
 8007712:	0030      	movs	r0, r6
 8007714:	6862      	ldr	r2, [r4, #4]
 8007716:	f000 f831 	bl	800777c <memchr>
 800771a:	2800      	cmp	r0, #0
 800771c:	d001      	beq.n	8007722 <_printf_i+0x1ca>
 800771e:	1b80      	subs	r0, r0, r6
 8007720:	6060      	str	r0, [r4, #4]
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	2300      	movs	r3, #0
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	7013      	strb	r3, [r2, #0]
 800772c:	e7a8      	b.n	8007680 <_printf_i+0x128>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	0032      	movs	r2, r6
 8007732:	9906      	ldr	r1, [sp, #24]
 8007734:	9805      	ldr	r0, [sp, #20]
 8007736:	9d07      	ldr	r5, [sp, #28]
 8007738:	47a8      	blx	r5
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d0aa      	beq.n	8007694 <_printf_i+0x13c>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	079b      	lsls	r3, r3, #30
 8007742:	d415      	bmi.n	8007770 <_printf_i+0x218>
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	4298      	cmp	r0, r3
 800774a:	daa5      	bge.n	8007698 <_printf_i+0x140>
 800774c:	0018      	movs	r0, r3
 800774e:	e7a3      	b.n	8007698 <_printf_i+0x140>
 8007750:	0022      	movs	r2, r4
 8007752:	2301      	movs	r3, #1
 8007754:	9906      	ldr	r1, [sp, #24]
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	9e07      	ldr	r6, [sp, #28]
 800775a:	3219      	adds	r2, #25
 800775c:	47b0      	blx	r6
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d098      	beq.n	8007694 <_printf_i+0x13c>
 8007762:	3501      	adds	r5, #1
 8007764:	68e3      	ldr	r3, [r4, #12]
 8007766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	42ab      	cmp	r3, r5
 800776c:	dcf0      	bgt.n	8007750 <_printf_i+0x1f8>
 800776e:	e7e9      	b.n	8007744 <_printf_i+0x1ec>
 8007770:	2500      	movs	r5, #0
 8007772:	e7f7      	b.n	8007764 <_printf_i+0x20c>
 8007774:	08008a71 	.word	0x08008a71
 8007778:	08008a82 	.word	0x08008a82

0800777c <memchr>:
 800777c:	b2c9      	uxtb	r1, r1
 800777e:	1882      	adds	r2, r0, r2
 8007780:	4290      	cmp	r0, r2
 8007782:	d101      	bne.n	8007788 <memchr+0xc>
 8007784:	2000      	movs	r0, #0
 8007786:	4770      	bx	lr
 8007788:	7803      	ldrb	r3, [r0, #0]
 800778a:	428b      	cmp	r3, r1
 800778c:	d0fb      	beq.n	8007786 <memchr+0xa>
 800778e:	3001      	adds	r0, #1
 8007790:	e7f6      	b.n	8007780 <memchr+0x4>

08007792 <memcpy>:
 8007792:	2300      	movs	r3, #0
 8007794:	b510      	push	{r4, lr}
 8007796:	429a      	cmp	r2, r3
 8007798:	d100      	bne.n	800779c <memcpy+0xa>
 800779a:	bd10      	pop	{r4, pc}
 800779c:	5ccc      	ldrb	r4, [r1, r3]
 800779e:	54c4      	strb	r4, [r0, r3]
 80077a0:	3301      	adds	r3, #1
 80077a2:	e7f8      	b.n	8007796 <memcpy+0x4>

080077a4 <memmove>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4288      	cmp	r0, r1
 80077a8:	d902      	bls.n	80077b0 <memmove+0xc>
 80077aa:	188b      	adds	r3, r1, r2
 80077ac:	4298      	cmp	r0, r3
 80077ae:	d303      	bcc.n	80077b8 <memmove+0x14>
 80077b0:	2300      	movs	r3, #0
 80077b2:	e007      	b.n	80077c4 <memmove+0x20>
 80077b4:	5c8b      	ldrb	r3, [r1, r2]
 80077b6:	5483      	strb	r3, [r0, r2]
 80077b8:	3a01      	subs	r2, #1
 80077ba:	d2fb      	bcs.n	80077b4 <memmove+0x10>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	5ccc      	ldrb	r4, [r1, r3]
 80077c0:	54c4      	strb	r4, [r0, r3]
 80077c2:	3301      	adds	r3, #1
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1fa      	bne.n	80077be <memmove+0x1a>
 80077c8:	e7f8      	b.n	80077bc <memmove+0x18>
	...

080077cc <_free_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	0005      	movs	r5, r0
 80077d0:	2900      	cmp	r1, #0
 80077d2:	d010      	beq.n	80077f6 <_free_r+0x2a>
 80077d4:	1f0c      	subs	r4, r1, #4
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da00      	bge.n	80077de <_free_r+0x12>
 80077dc:	18e4      	adds	r4, r4, r3
 80077de:	0028      	movs	r0, r5
 80077e0:	f000 f918 	bl	8007a14 <__malloc_lock>
 80077e4:	4a1d      	ldr	r2, [pc, #116]	; (800785c <_free_r+0x90>)
 80077e6:	6813      	ldr	r3, [r2, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d105      	bne.n	80077f8 <_free_r+0x2c>
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	6014      	str	r4, [r2, #0]
 80077f0:	0028      	movs	r0, r5
 80077f2:	f000 f917 	bl	8007a24 <__malloc_unlock>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d908      	bls.n	800780e <_free_r+0x42>
 80077fc:	6821      	ldr	r1, [r4, #0]
 80077fe:	1860      	adds	r0, r4, r1
 8007800:	4283      	cmp	r3, r0
 8007802:	d1f3      	bne.n	80077ec <_free_r+0x20>
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	1841      	adds	r1, r0, r1
 800780a:	6021      	str	r1, [r4, #0]
 800780c:	e7ee      	b.n	80077ec <_free_r+0x20>
 800780e:	001a      	movs	r2, r3
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <_free_r+0x4e>
 8007816:	42a3      	cmp	r3, r4
 8007818:	d9f9      	bls.n	800780e <_free_r+0x42>
 800781a:	6811      	ldr	r1, [r2, #0]
 800781c:	1850      	adds	r0, r2, r1
 800781e:	42a0      	cmp	r0, r4
 8007820:	d10b      	bne.n	800783a <_free_r+0x6e>
 8007822:	6820      	ldr	r0, [r4, #0]
 8007824:	1809      	adds	r1, r1, r0
 8007826:	1850      	adds	r0, r2, r1
 8007828:	6011      	str	r1, [r2, #0]
 800782a:	4283      	cmp	r3, r0
 800782c:	d1e0      	bne.n	80077f0 <_free_r+0x24>
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	1841      	adds	r1, r0, r1
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	6053      	str	r3, [r2, #4]
 8007838:	e7da      	b.n	80077f0 <_free_r+0x24>
 800783a:	42a0      	cmp	r0, r4
 800783c:	d902      	bls.n	8007844 <_free_r+0x78>
 800783e:	230c      	movs	r3, #12
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	e7d5      	b.n	80077f0 <_free_r+0x24>
 8007844:	6821      	ldr	r1, [r4, #0]
 8007846:	1860      	adds	r0, r4, r1
 8007848:	4283      	cmp	r3, r0
 800784a:	d103      	bne.n	8007854 <_free_r+0x88>
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	1841      	adds	r1, r0, r1
 8007852:	6021      	str	r1, [r4, #0]
 8007854:	6063      	str	r3, [r4, #4]
 8007856:	6054      	str	r4, [r2, #4]
 8007858:	e7ca      	b.n	80077f0 <_free_r+0x24>
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	200005e8 	.word	0x200005e8

08007860 <sbrk_aligned>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4e0f      	ldr	r6, [pc, #60]	; (80078a0 <sbrk_aligned+0x40>)
 8007864:	000d      	movs	r5, r1
 8007866:	6831      	ldr	r1, [r6, #0]
 8007868:	0004      	movs	r4, r0
 800786a:	2900      	cmp	r1, #0
 800786c:	d102      	bne.n	8007874 <sbrk_aligned+0x14>
 800786e:	f000 f8bf 	bl	80079f0 <_sbrk_r>
 8007872:	6030      	str	r0, [r6, #0]
 8007874:	0029      	movs	r1, r5
 8007876:	0020      	movs	r0, r4
 8007878:	f000 f8ba 	bl	80079f0 <_sbrk_r>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d00a      	beq.n	8007896 <sbrk_aligned+0x36>
 8007880:	2303      	movs	r3, #3
 8007882:	1cc5      	adds	r5, r0, #3
 8007884:	439d      	bics	r5, r3
 8007886:	42a8      	cmp	r0, r5
 8007888:	d007      	beq.n	800789a <sbrk_aligned+0x3a>
 800788a:	1a29      	subs	r1, r5, r0
 800788c:	0020      	movs	r0, r4
 800788e:	f000 f8af 	bl	80079f0 <_sbrk_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d101      	bne.n	800789a <sbrk_aligned+0x3a>
 8007896:	2501      	movs	r5, #1
 8007898:	426d      	negs	r5, r5
 800789a:	0028      	movs	r0, r5
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	200005ec 	.word	0x200005ec

080078a4 <_malloc_r>:
 80078a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078a6:	2203      	movs	r2, #3
 80078a8:	1ccb      	adds	r3, r1, #3
 80078aa:	4393      	bics	r3, r2
 80078ac:	3308      	adds	r3, #8
 80078ae:	0006      	movs	r6, r0
 80078b0:	001f      	movs	r7, r3
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d232      	bcs.n	800791c <_malloc_r+0x78>
 80078b6:	270c      	movs	r7, #12
 80078b8:	42b9      	cmp	r1, r7
 80078ba:	d831      	bhi.n	8007920 <_malloc_r+0x7c>
 80078bc:	0030      	movs	r0, r6
 80078be:	f000 f8a9 	bl	8007a14 <__malloc_lock>
 80078c2:	4d32      	ldr	r5, [pc, #200]	; (800798c <_malloc_r+0xe8>)
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	001c      	movs	r4, r3
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d12e      	bne.n	800792a <_malloc_r+0x86>
 80078cc:	0039      	movs	r1, r7
 80078ce:	0030      	movs	r0, r6
 80078d0:	f7ff ffc6 	bl	8007860 <sbrk_aligned>
 80078d4:	0004      	movs	r4, r0
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d11e      	bne.n	8007918 <_malloc_r+0x74>
 80078da:	682c      	ldr	r4, [r5, #0]
 80078dc:	0025      	movs	r5, r4
 80078de:	2d00      	cmp	r5, #0
 80078e0:	d14a      	bne.n	8007978 <_malloc_r+0xd4>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	0029      	movs	r1, r5
 80078e6:	18e3      	adds	r3, r4, r3
 80078e8:	0030      	movs	r0, r6
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f000 f880 	bl	80079f0 <_sbrk_r>
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	4283      	cmp	r3, r0
 80078f4:	d143      	bne.n	800797e <_malloc_r+0xda>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	3703      	adds	r7, #3
 80078fa:	1aff      	subs	r7, r7, r3
 80078fc:	2303      	movs	r3, #3
 80078fe:	439f      	bics	r7, r3
 8007900:	3708      	adds	r7, #8
 8007902:	2f0c      	cmp	r7, #12
 8007904:	d200      	bcs.n	8007908 <_malloc_r+0x64>
 8007906:	270c      	movs	r7, #12
 8007908:	0039      	movs	r1, r7
 800790a:	0030      	movs	r0, r6
 800790c:	f7ff ffa8 	bl	8007860 <sbrk_aligned>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d034      	beq.n	800797e <_malloc_r+0xda>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	19df      	adds	r7, r3, r7
 8007918:	6027      	str	r7, [r4, #0]
 800791a:	e013      	b.n	8007944 <_malloc_r+0xa0>
 800791c:	2b00      	cmp	r3, #0
 800791e:	dacb      	bge.n	80078b8 <_malloc_r+0x14>
 8007920:	230c      	movs	r3, #12
 8007922:	2500      	movs	r5, #0
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	0028      	movs	r0, r5
 8007928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	1bd1      	subs	r1, r2, r7
 800792e:	d420      	bmi.n	8007972 <_malloc_r+0xce>
 8007930:	290b      	cmp	r1, #11
 8007932:	d917      	bls.n	8007964 <_malloc_r+0xc0>
 8007934:	19e2      	adds	r2, r4, r7
 8007936:	6027      	str	r7, [r4, #0]
 8007938:	42a3      	cmp	r3, r4
 800793a:	d111      	bne.n	8007960 <_malloc_r+0xbc>
 800793c:	602a      	str	r2, [r5, #0]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	6011      	str	r1, [r2, #0]
 8007942:	6053      	str	r3, [r2, #4]
 8007944:	0030      	movs	r0, r6
 8007946:	0025      	movs	r5, r4
 8007948:	f000 f86c 	bl	8007a24 <__malloc_unlock>
 800794c:	2207      	movs	r2, #7
 800794e:	350b      	adds	r5, #11
 8007950:	1d23      	adds	r3, r4, #4
 8007952:	4395      	bics	r5, r2
 8007954:	1aea      	subs	r2, r5, r3
 8007956:	429d      	cmp	r5, r3
 8007958:	d0e5      	beq.n	8007926 <_malloc_r+0x82>
 800795a:	1b5b      	subs	r3, r3, r5
 800795c:	50a3      	str	r3, [r4, r2]
 800795e:	e7e2      	b.n	8007926 <_malloc_r+0x82>
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	e7ec      	b.n	800793e <_malloc_r+0x9a>
 8007964:	6862      	ldr	r2, [r4, #4]
 8007966:	42a3      	cmp	r3, r4
 8007968:	d101      	bne.n	800796e <_malloc_r+0xca>
 800796a:	602a      	str	r2, [r5, #0]
 800796c:	e7ea      	b.n	8007944 <_malloc_r+0xa0>
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	e7e8      	b.n	8007944 <_malloc_r+0xa0>
 8007972:	0023      	movs	r3, r4
 8007974:	6864      	ldr	r4, [r4, #4]
 8007976:	e7a7      	b.n	80078c8 <_malloc_r+0x24>
 8007978:	002c      	movs	r4, r5
 800797a:	686d      	ldr	r5, [r5, #4]
 800797c:	e7af      	b.n	80078de <_malloc_r+0x3a>
 800797e:	230c      	movs	r3, #12
 8007980:	0030      	movs	r0, r6
 8007982:	6033      	str	r3, [r6, #0]
 8007984:	f000 f84e 	bl	8007a24 <__malloc_unlock>
 8007988:	e7cd      	b.n	8007926 <_malloc_r+0x82>
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	200005e8 	.word	0x200005e8

08007990 <_realloc_r>:
 8007990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007992:	0007      	movs	r7, r0
 8007994:	000e      	movs	r6, r1
 8007996:	0014      	movs	r4, r2
 8007998:	2900      	cmp	r1, #0
 800799a:	d105      	bne.n	80079a8 <_realloc_r+0x18>
 800799c:	0011      	movs	r1, r2
 800799e:	f7ff ff81 	bl	80078a4 <_malloc_r>
 80079a2:	0005      	movs	r5, r0
 80079a4:	0028      	movs	r0, r5
 80079a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d103      	bne.n	80079b4 <_realloc_r+0x24>
 80079ac:	f7ff ff0e 	bl	80077cc <_free_r>
 80079b0:	0025      	movs	r5, r4
 80079b2:	e7f7      	b.n	80079a4 <_realloc_r+0x14>
 80079b4:	f000 f83e 	bl	8007a34 <_malloc_usable_size_r>
 80079b8:	9001      	str	r0, [sp, #4]
 80079ba:	4284      	cmp	r4, r0
 80079bc:	d803      	bhi.n	80079c6 <_realloc_r+0x36>
 80079be:	0035      	movs	r5, r6
 80079c0:	0843      	lsrs	r3, r0, #1
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	d3ee      	bcc.n	80079a4 <_realloc_r+0x14>
 80079c6:	0021      	movs	r1, r4
 80079c8:	0038      	movs	r0, r7
 80079ca:	f7ff ff6b 	bl	80078a4 <_malloc_r>
 80079ce:	1e05      	subs	r5, r0, #0
 80079d0:	d0e8      	beq.n	80079a4 <_realloc_r+0x14>
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	0022      	movs	r2, r4
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d900      	bls.n	80079dc <_realloc_r+0x4c>
 80079da:	001a      	movs	r2, r3
 80079dc:	0031      	movs	r1, r6
 80079de:	0028      	movs	r0, r5
 80079e0:	f7ff fed7 	bl	8007792 <memcpy>
 80079e4:	0031      	movs	r1, r6
 80079e6:	0038      	movs	r0, r7
 80079e8:	f7ff fef0 	bl	80077cc <_free_r>
 80079ec:	e7da      	b.n	80079a4 <_realloc_r+0x14>
	...

080079f0 <_sbrk_r>:
 80079f0:	2300      	movs	r3, #0
 80079f2:	b570      	push	{r4, r5, r6, lr}
 80079f4:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_sbrk_r+0x20>)
 80079f6:	0004      	movs	r4, r0
 80079f8:	0008      	movs	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7fb ff2a 	bl	8003854 <_sbrk>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d103      	bne.n	8007a0c <_sbrk_r+0x1c>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d000      	beq.n	8007a0c <_sbrk_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	200005f0 	.word	0x200005f0

08007a14 <__malloc_lock>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <__malloc_lock+0xc>)
 8007a18:	f000 f814 	bl	8007a44 <__retarget_lock_acquire_recursive>
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	200005f4 	.word	0x200005f4

08007a24 <__malloc_unlock>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	4802      	ldr	r0, [pc, #8]	; (8007a30 <__malloc_unlock+0xc>)
 8007a28:	f000 f80d 	bl	8007a46 <__retarget_lock_release_recursive>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	200005f4 	.word	0x200005f4

08007a34 <_malloc_usable_size_r>:
 8007a34:	1f0b      	subs	r3, r1, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	1f18      	subs	r0, r3, #4
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da01      	bge.n	8007a42 <_malloc_usable_size_r+0xe>
 8007a3e:	580b      	ldr	r3, [r1, r0]
 8007a40:	18c0      	adds	r0, r0, r3
 8007a42:	4770      	bx	lr

08007a44 <__retarget_lock_acquire_recursive>:
 8007a44:	4770      	bx	lr

08007a46 <__retarget_lock_release_recursive>:
 8007a46:	4770      	bx	lr

08007a48 <pow>:
 8007a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4a:	0014      	movs	r4, r2
 8007a4c:	001d      	movs	r5, r3
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	9101      	str	r1, [sp, #4]
 8007a52:	f000 f88d 	bl	8007b70 <__ieee754_pow>
 8007a56:	0022      	movs	r2, r4
 8007a58:	0006      	movs	r6, r0
 8007a5a:	000f      	movs	r7, r1
 8007a5c:	002b      	movs	r3, r5
 8007a5e:	0020      	movs	r0, r4
 8007a60:	0029      	movs	r1, r5
 8007a62:	f7fa fb65 	bl	8002130 <__aeabi_dcmpun>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d13f      	bne.n	8007aea <pow+0xa2>
 8007a6a:	9800      	ldr	r0, [sp, #0]
 8007a6c:	9901      	ldr	r1, [sp, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2300      	movs	r3, #0
 8007a72:	f7f8 fcd9 	bl	8000428 <__aeabi_dcmpeq>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d019      	beq.n	8007aae <pow+0x66>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	0020      	movs	r0, r4
 8007a80:	0029      	movs	r1, r5
 8007a82:	f7f8 fcd1 	bl	8000428 <__aeabi_dcmpeq>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d146      	bne.n	8007b18 <pow+0xd0>
 8007a8a:	0020      	movs	r0, r4
 8007a8c:	0029      	movs	r1, r5
 8007a8e:	f000 fe63 	bl	8008758 <finite>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d029      	beq.n	8007aea <pow+0xa2>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	0029      	movs	r1, r5
 8007a9e:	f7f8 fcc9 	bl	8000434 <__aeabi_dcmplt>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d021      	beq.n	8007aea <pow+0xa2>
 8007aa6:	f7ff fb33 	bl	8007110 <__errno>
 8007aaa:	2322      	movs	r3, #34	; 0x22
 8007aac:	e01c      	b.n	8007ae8 <pow+0xa0>
 8007aae:	0030      	movs	r0, r6
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	f000 fe51 	bl	8008758 <finite>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d11b      	bne.n	8007af2 <pow+0xaa>
 8007aba:	9800      	ldr	r0, [sp, #0]
 8007abc:	9901      	ldr	r1, [sp, #4]
 8007abe:	f000 fe4b 	bl	8008758 <finite>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d015      	beq.n	8007af2 <pow+0xaa>
 8007ac6:	0020      	movs	r0, r4
 8007ac8:	0029      	movs	r1, r5
 8007aca:	f000 fe45 	bl	8008758 <finite>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d00f      	beq.n	8007af2 <pow+0xaa>
 8007ad2:	0032      	movs	r2, r6
 8007ad4:	003b      	movs	r3, r7
 8007ad6:	0030      	movs	r0, r6
 8007ad8:	0039      	movs	r1, r7
 8007ada:	f7fa fb29 	bl	8002130 <__aeabi_dcmpun>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d0e1      	beq.n	8007aa6 <pow+0x5e>
 8007ae2:	f7ff fb15 	bl	8007110 <__errno>
 8007ae6:	2321      	movs	r3, #33	; 0x21
 8007ae8:	6003      	str	r3, [r0, #0]
 8007aea:	0030      	movs	r0, r6
 8007aec:	0039      	movs	r1, r7
 8007aee:	b003      	add	sp, #12
 8007af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	0030      	movs	r0, r6
 8007af8:	0039      	movs	r1, r7
 8007afa:	f7f8 fc95 	bl	8000428 <__aeabi_dcmpeq>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d0f3      	beq.n	8007aea <pow+0xa2>
 8007b02:	9800      	ldr	r0, [sp, #0]
 8007b04:	9901      	ldr	r1, [sp, #4]
 8007b06:	f000 fe27 	bl	8008758 <finite>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d0ed      	beq.n	8007aea <pow+0xa2>
 8007b0e:	0020      	movs	r0, r4
 8007b10:	0029      	movs	r1, r5
 8007b12:	f000 fe21 	bl	8008758 <finite>
 8007b16:	e7c4      	b.n	8007aa2 <pow+0x5a>
 8007b18:	2600      	movs	r6, #0
 8007b1a:	4f01      	ldr	r7, [pc, #4]	; (8007b20 <pow+0xd8>)
 8007b1c:	e7e5      	b.n	8007aea <pow+0xa2>
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	3ff00000 	.word	0x3ff00000

08007b24 <sqrt>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	0004      	movs	r4, r0
 8007b28:	000d      	movs	r5, r1
 8007b2a:	f000 fd2b 	bl	8008584 <__ieee754_sqrt>
 8007b2e:	0022      	movs	r2, r4
 8007b30:	0006      	movs	r6, r0
 8007b32:	000f      	movs	r7, r1
 8007b34:	002b      	movs	r3, r5
 8007b36:	0020      	movs	r0, r4
 8007b38:	0029      	movs	r1, r5
 8007b3a:	f7fa faf9 	bl	8002130 <__aeabi_dcmpun>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d113      	bne.n	8007b6a <sqrt+0x46>
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	0020      	movs	r0, r4
 8007b48:	0029      	movs	r1, r5
 8007b4a:	f7f8 fc73 	bl	8000434 <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d00b      	beq.n	8007b6a <sqrt+0x46>
 8007b52:	f7ff fadd 	bl	8007110 <__errno>
 8007b56:	2321      	movs	r3, #33	; 0x21
 8007b58:	2200      	movs	r2, #0
 8007b5a:	6003      	str	r3, [r0, #0]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	0010      	movs	r0, r2
 8007b60:	0019      	movs	r1, r3
 8007b62:	f7f9 f8e5 	bl	8000d30 <__aeabi_ddiv>
 8007b66:	0006      	movs	r6, r0
 8007b68:	000f      	movs	r7, r1
 8007b6a:	0030      	movs	r0, r6
 8007b6c:	0039      	movs	r1, r7
 8007b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b70 <__ieee754_pow>:
 8007b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b72:	b095      	sub	sp, #84	; 0x54
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	0056      	lsls	r6, r2, #1
 8007b82:	001a      	movs	r2, r3
 8007b84:	0876      	lsrs	r6, r6, #1
 8007b86:	0007      	movs	r7, r0
 8007b88:	000d      	movs	r5, r1
 8007b8a:	4332      	orrs	r2, r6
 8007b8c:	d119      	bne.n	8007bc2 <__ieee754_pow+0x52>
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	0309      	lsls	r1, r1, #12
 8007b92:	4069      	eors	r1, r5
 8007b94:	0002      	movs	r2, r0
 8007b96:	000b      	movs	r3, r1
 8007b98:	1892      	adds	r2, r2, r2
 8007b9a:	415b      	adcs	r3, r3
 8007b9c:	4989      	ldr	r1, [pc, #548]	; (8007dc4 <__ieee754_pow+0x254>)
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d806      	bhi.n	8007bb0 <__ieee754_pow+0x40>
 8007ba2:	d001      	beq.n	8007ba8 <__ieee754_pow+0x38>
 8007ba4:	f000 fcb6 	bl	8008514 <__ieee754_pow+0x9a4>
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d101      	bne.n	8007bb0 <__ieee754_pow+0x40>
 8007bac:	f000 fcb2 	bl	8008514 <__ieee754_pow+0x9a4>
 8007bb0:	9a02      	ldr	r2, [sp, #8]
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	0038      	movs	r0, r7
 8007bb6:	0029      	movs	r1, r5
 8007bb8:	f7f8 fd7e 	bl	80006b8 <__aeabi_dadd>
 8007bbc:	9000      	str	r0, [sp, #0]
 8007bbe:	9101      	str	r1, [sp, #4]
 8007bc0:	e0ad      	b.n	8007d1e <__ieee754_pow+0x1ae>
 8007bc2:	4a81      	ldr	r2, [pc, #516]	; (8007dc8 <__ieee754_pow+0x258>)
 8007bc4:	004c      	lsls	r4, r1, #1
 8007bc6:	9108      	str	r1, [sp, #32]
 8007bc8:	9000      	str	r0, [sp, #0]
 8007bca:	0864      	lsrs	r4, r4, #1
 8007bcc:	4294      	cmp	r4, r2
 8007bce:	dc08      	bgt.n	8007be2 <__ieee754_pow+0x72>
 8007bd0:	d101      	bne.n	8007bd6 <__ieee754_pow+0x66>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1ec      	bne.n	8007bb0 <__ieee754_pow+0x40>
 8007bd6:	4a7c      	ldr	r2, [pc, #496]	; (8007dc8 <__ieee754_pow+0x258>)
 8007bd8:	4296      	cmp	r6, r2
 8007bda:	dc02      	bgt.n	8007be2 <__ieee754_pow+0x72>
 8007bdc:	d10c      	bne.n	8007bf8 <__ieee754_pow+0x88>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <__ieee754_pow+0x88>
 8007be2:	4b7a      	ldr	r3, [pc, #488]	; (8007dcc <__ieee754_pow+0x25c>)
 8007be4:	18eb      	adds	r3, r5, r3
 8007be6:	433b      	orrs	r3, r7
 8007be8:	d1e2      	bne.n	8007bb0 <__ieee754_pow+0x40>
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	9803      	ldr	r0, [sp, #12]
 8007bee:	0309      	lsls	r1, r1, #12
 8007bf0:	4048      	eors	r0, r1
 8007bf2:	0003      	movs	r3, r0
 8007bf4:	9a02      	ldr	r2, [sp, #8]
 8007bf6:	e7cf      	b.n	8007b98 <__ieee754_pow+0x28>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	9206      	str	r2, [sp, #24]
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	da69      	bge.n	8007cd4 <__ieee754_pow+0x164>
 8007c00:	4a73      	ldr	r2, [pc, #460]	; (8007dd0 <__ieee754_pow+0x260>)
 8007c02:	4296      	cmp	r6, r2
 8007c04:	dc64      	bgt.n	8007cd0 <__ieee754_pow+0x160>
 8007c06:	4a73      	ldr	r2, [pc, #460]	; (8007dd4 <__ieee754_pow+0x264>)
 8007c08:	4296      	cmp	r6, r2
 8007c0a:	dd11      	ble.n	8007c30 <__ieee754_pow+0xc0>
 8007c0c:	4972      	ldr	r1, [pc, #456]	; (8007dd8 <__ieee754_pow+0x268>)
 8007c0e:	1532      	asrs	r2, r6, #20
 8007c10:	1852      	adds	r2, r2, r1
 8007c12:	2a14      	cmp	r2, #20
 8007c14:	dd3c      	ble.n	8007c90 <__ieee754_pow+0x120>
 8007c16:	2134      	movs	r1, #52	; 0x34
 8007c18:	1a8a      	subs	r2, r1, r2
 8007c1a:	9902      	ldr	r1, [sp, #8]
 8007c1c:	40d1      	lsrs	r1, r2
 8007c1e:	0008      	movs	r0, r1
 8007c20:	4090      	lsls	r0, r2
 8007c22:	4298      	cmp	r0, r3
 8007c24:	d104      	bne.n	8007c30 <__ieee754_pow+0xc0>
 8007c26:	2201      	movs	r2, #1
 8007c28:	4011      	ands	r1, r2
 8007c2a:	1892      	adds	r2, r2, r2
 8007c2c:	1a52      	subs	r2, r2, r1
 8007c2e:	9206      	str	r2, [sp, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d03c      	beq.n	8007cae <__ieee754_pow+0x13e>
 8007c34:	0038      	movs	r0, r7
 8007c36:	0029      	movs	r1, r5
 8007c38:	f000 fd8b 	bl	8008752 <fabs>
 8007c3c:	9000      	str	r0, [sp, #0]
 8007c3e:	9101      	str	r1, [sp, #4]
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	d000      	beq.n	8007c46 <__ieee754_pow+0xd6>
 8007c44:	e094      	b.n	8007d70 <__ieee754_pow+0x200>
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	d005      	beq.n	8007c56 <__ieee754_pow+0xe6>
 8007c4a:	4a64      	ldr	r2, [pc, #400]	; (8007ddc <__ieee754_pow+0x26c>)
 8007c4c:	00ab      	lsls	r3, r5, #2
 8007c4e:	089b      	lsrs	r3, r3, #2
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d000      	beq.n	8007c56 <__ieee754_pow+0xe6>
 8007c54:	e08c      	b.n	8007d70 <__ieee754_pow+0x200>
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da07      	bge.n	8007c6c <__ieee754_pow+0xfc>
 8007c5c:	9a00      	ldr	r2, [sp, #0]
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	2000      	movs	r0, #0
 8007c62:	495e      	ldr	r1, [pc, #376]	; (8007ddc <__ieee754_pow+0x26c>)
 8007c64:	f7f9 f864 	bl	8000d30 <__aeabi_ddiv>
 8007c68:	9000      	str	r0, [sp, #0]
 8007c6a:	9101      	str	r1, [sp, #4]
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da55      	bge.n	8007d1e <__ieee754_pow+0x1ae>
 8007c72:	4b56      	ldr	r3, [pc, #344]	; (8007dcc <__ieee754_pow+0x25c>)
 8007c74:	18e4      	adds	r4, r4, r3
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	431c      	orrs	r4, r3
 8007c7a:	d000      	beq.n	8007c7e <__ieee754_pow+0x10e>
 8007c7c:	e06c      	b.n	8007d58 <__ieee754_pow+0x1e8>
 8007c7e:	9a00      	ldr	r2, [sp, #0]
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	0010      	movs	r0, r2
 8007c84:	0019      	movs	r1, r3
 8007c86:	f7f9 fec1 	bl	8001a0c <__aeabi_dsub>
 8007c8a:	0002      	movs	r2, r0
 8007c8c:	000b      	movs	r3, r1
 8007c8e:	e01c      	b.n	8007cca <__ieee754_pow+0x15a>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1cf      	bne.n	8007c34 <__ieee754_pow+0xc4>
 8007c94:	3314      	adds	r3, #20
 8007c96:	1a9a      	subs	r2, r3, r2
 8007c98:	0033      	movs	r3, r6
 8007c9a:	4113      	asrs	r3, r2
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	4091      	lsls	r1, r2
 8007ca0:	42b1      	cmp	r1, r6
 8007ca2:	d104      	bne.n	8007cae <__ieee754_pow+0x13e>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	1892      	adds	r2, r2, r2
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	9306      	str	r3, [sp, #24]
 8007cae:	4b4b      	ldr	r3, [pc, #300]	; (8007ddc <__ieee754_pow+0x26c>)
 8007cb0:	429e      	cmp	r6, r3
 8007cb2:	d138      	bne.n	8007d26 <__ieee754_pow+0x1b6>
 8007cb4:	0038      	movs	r0, r7
 8007cb6:	0029      	movs	r1, r5
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	9000      	str	r0, [sp, #0]
 8007cbc:	9101      	str	r1, [sp, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da2d      	bge.n	8007d1e <__ieee754_pow+0x1ae>
 8007cc2:	003a      	movs	r2, r7
 8007cc4:	002b      	movs	r3, r5
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	4944      	ldr	r1, [pc, #272]	; (8007ddc <__ieee754_pow+0x26c>)
 8007cca:	f7f9 f831 	bl	8000d30 <__aeabi_ddiv>
 8007cce:	e775      	b.n	8007bbc <__ieee754_pow+0x4c>
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	9206      	str	r2, [sp, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ad      	bne.n	8007c34 <__ieee754_pow+0xc4>
 8007cd8:	4b3b      	ldr	r3, [pc, #236]	; (8007dc8 <__ieee754_pow+0x258>)
 8007cda:	429e      	cmp	r6, r3
 8007cdc:	d1e7      	bne.n	8007cae <__ieee754_pow+0x13e>
 8007cde:	4b3b      	ldr	r3, [pc, #236]	; (8007dcc <__ieee754_pow+0x25c>)
 8007ce0:	18e3      	adds	r3, r4, r3
 8007ce2:	431f      	orrs	r7, r3
 8007ce4:	d101      	bne.n	8007cea <__ieee754_pow+0x17a>
 8007ce6:	f000 fc15 	bl	8008514 <__ieee754_pow+0x9a4>
 8007cea:	4b3a      	ldr	r3, [pc, #232]	; (8007dd4 <__ieee754_pow+0x264>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	dd09      	ble.n	8007d04 <__ieee754_pow+0x194>
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da01      	bge.n	8007cfa <__ieee754_pow+0x18a>
 8007cf6:	f000 fc11 	bl	800851c <__ieee754_pow+0x9ac>
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	9c03      	ldr	r4, [sp, #12]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	9401      	str	r4, [sp, #4]
 8007d02:	e00c      	b.n	8007d1e <__ieee754_pow+0x1ae>
 8007d04:	9b04      	ldr	r3, [sp, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	db01      	blt.n	8007d0e <__ieee754_pow+0x19e>
 8007d0a:	f000 fc07 	bl	800851c <__ieee754_pow+0x9ac>
 8007d0e:	2280      	movs	r2, #128	; 0x80
 8007d10:	0612      	lsls	r2, r2, #24
 8007d12:	4694      	mov	ip, r2
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	4463      	add	r3, ip
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	9800      	ldr	r0, [sp, #0]
 8007d20:	9901      	ldr	r1, [sp, #4]
 8007d22:	b015      	add	sp, #84	; 0x54
 8007d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d26:	2380      	movs	r3, #128	; 0x80
 8007d28:	9a04      	ldr	r2, [sp, #16]
 8007d2a:	05db      	lsls	r3, r3, #23
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d106      	bne.n	8007d3e <__ieee754_pow+0x1ce>
 8007d30:	003a      	movs	r2, r7
 8007d32:	002b      	movs	r3, r5
 8007d34:	0038      	movs	r0, r7
 8007d36:	0029      	movs	r1, r5
 8007d38:	f7f9 fbfc 	bl	8001534 <__aeabi_dmul>
 8007d3c:	e73e      	b.n	8007bbc <__ieee754_pow+0x4c>
 8007d3e:	4b28      	ldr	r3, [pc, #160]	; (8007de0 <__ieee754_pow+0x270>)
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d000      	beq.n	8007d48 <__ieee754_pow+0x1d8>
 8007d46:	e775      	b.n	8007c34 <__ieee754_pow+0xc4>
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	da00      	bge.n	8007d4e <__ieee754_pow+0x1de>
 8007d4c:	e772      	b.n	8007c34 <__ieee754_pow+0xc4>
 8007d4e:	0038      	movs	r0, r7
 8007d50:	0029      	movs	r1, r5
 8007d52:	f000 fc17 	bl	8008584 <__ieee754_sqrt>
 8007d56:	e731      	b.n	8007bbc <__ieee754_pow+0x4c>
 8007d58:	9b06      	ldr	r3, [sp, #24]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d1df      	bne.n	8007d1e <__ieee754_pow+0x1ae>
 8007d5e:	9800      	ldr	r0, [sp, #0]
 8007d60:	2180      	movs	r1, #128	; 0x80
 8007d62:	0002      	movs	r2, r0
 8007d64:	9801      	ldr	r0, [sp, #4]
 8007d66:	0609      	lsls	r1, r1, #24
 8007d68:	1843      	adds	r3, r0, r1
 8007d6a:	9200      	str	r2, [sp, #0]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	e7d6      	b.n	8007d1e <__ieee754_pow+0x1ae>
 8007d70:	0feb      	lsrs	r3, r5, #31
 8007d72:	3b01      	subs	r3, #1
 8007d74:	930e      	str	r3, [sp, #56]	; 0x38
 8007d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d78:	9b06      	ldr	r3, [sp, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	d104      	bne.n	8007d88 <__ieee754_pow+0x218>
 8007d7e:	003a      	movs	r2, r7
 8007d80:	002b      	movs	r3, r5
 8007d82:	0038      	movs	r0, r7
 8007d84:	0029      	movs	r1, r5
 8007d86:	e77e      	b.n	8007c86 <__ieee754_pow+0x116>
 8007d88:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <__ieee754_pow+0x274>)
 8007d8a:	429e      	cmp	r6, r3
 8007d8c:	dc00      	bgt.n	8007d90 <__ieee754_pow+0x220>
 8007d8e:	e0ef      	b.n	8007f70 <__ieee754_pow+0x400>
 8007d90:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <__ieee754_pow+0x278>)
 8007d92:	429e      	cmp	r6, r3
 8007d94:	dd09      	ble.n	8007daa <__ieee754_pow+0x23a>
 8007d96:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <__ieee754_pow+0x264>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	dc0c      	bgt.n	8007db6 <__ieee754_pow+0x246>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da0c      	bge.n	8007dbc <__ieee754_pow+0x24c>
 8007da2:	2000      	movs	r0, #0
 8007da4:	f000 fcce 	bl	8008744 <__math_oflow>
 8007da8:	e708      	b.n	8007bbc <__ieee754_pow+0x4c>
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <__ieee754_pow+0x27c>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	ddf5      	ble.n	8007d9c <__ieee754_pow+0x22c>
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <__ieee754_pow+0x26c>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	dd1c      	ble.n	8007df0 <__ieee754_pow+0x280>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dcf2      	bgt.n	8007da2 <__ieee754_pow+0x232>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f000 fcba 	bl	8008736 <__math_uflow>
 8007dc2:	e6fb      	b.n	8007bbc <__ieee754_pow+0x4c>
 8007dc4:	fff00000 	.word	0xfff00000
 8007dc8:	7ff00000 	.word	0x7ff00000
 8007dcc:	c0100000 	.word	0xc0100000
 8007dd0:	433fffff 	.word	0x433fffff
 8007dd4:	3fefffff 	.word	0x3fefffff
 8007dd8:	fffffc01 	.word	0xfffffc01
 8007ddc:	3ff00000 	.word	0x3ff00000
 8007de0:	3fe00000 	.word	0x3fe00000
 8007de4:	41e00000 	.word	0x41e00000
 8007de8:	43f00000 	.word	0x43f00000
 8007dec:	3feffffe 	.word	0x3feffffe
 8007df0:	2200      	movs	r2, #0
 8007df2:	9800      	ldr	r0, [sp, #0]
 8007df4:	9901      	ldr	r1, [sp, #4]
 8007df6:	4b52      	ldr	r3, [pc, #328]	; (8007f40 <__ieee754_pow+0x3d0>)
 8007df8:	f7f9 fe08 	bl	8001a0c <__aeabi_dsub>
 8007dfc:	22c0      	movs	r2, #192	; 0xc0
 8007dfe:	4b51      	ldr	r3, [pc, #324]	; (8007f44 <__ieee754_pow+0x3d4>)
 8007e00:	05d2      	lsls	r2, r2, #23
 8007e02:	0004      	movs	r4, r0
 8007e04:	000d      	movs	r5, r1
 8007e06:	f7f9 fb95 	bl	8001534 <__aeabi_dmul>
 8007e0a:	4a4f      	ldr	r2, [pc, #316]	; (8007f48 <__ieee754_pow+0x3d8>)
 8007e0c:	9000      	str	r0, [sp, #0]
 8007e0e:	9101      	str	r1, [sp, #4]
 8007e10:	4b4e      	ldr	r3, [pc, #312]	; (8007f4c <__ieee754_pow+0x3dc>)
 8007e12:	0020      	movs	r0, r4
 8007e14:	0029      	movs	r1, r5
 8007e16:	f7f9 fb8d 	bl	8001534 <__aeabi_dmul>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9004      	str	r0, [sp, #16]
 8007e1e:	9105      	str	r1, [sp, #20]
 8007e20:	4b4b      	ldr	r3, [pc, #300]	; (8007f50 <__ieee754_pow+0x3e0>)
 8007e22:	0020      	movs	r0, r4
 8007e24:	0029      	movs	r1, r5
 8007e26:	f7f9 fb85 	bl	8001534 <__aeabi_dmul>
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	000b      	movs	r3, r1
 8007e2e:	4849      	ldr	r0, [pc, #292]	; (8007f54 <__ieee754_pow+0x3e4>)
 8007e30:	4949      	ldr	r1, [pc, #292]	; (8007f58 <__ieee754_pow+0x3e8>)
 8007e32:	f7f9 fdeb 	bl	8001a0c <__aeabi_dsub>
 8007e36:	0022      	movs	r2, r4
 8007e38:	002b      	movs	r3, r5
 8007e3a:	f7f9 fb7b 	bl	8001534 <__aeabi_dmul>
 8007e3e:	0002      	movs	r2, r0
 8007e40:	000b      	movs	r3, r1
 8007e42:	2000      	movs	r0, #0
 8007e44:	4945      	ldr	r1, [pc, #276]	; (8007f5c <__ieee754_pow+0x3ec>)
 8007e46:	f7f9 fde1 	bl	8001a0c <__aeabi_dsub>
 8007e4a:	0022      	movs	r2, r4
 8007e4c:	0006      	movs	r6, r0
 8007e4e:	000f      	movs	r7, r1
 8007e50:	002b      	movs	r3, r5
 8007e52:	0020      	movs	r0, r4
 8007e54:	0029      	movs	r1, r5
 8007e56:	f7f9 fb6d 	bl	8001534 <__aeabi_dmul>
 8007e5a:	0002      	movs	r2, r0
 8007e5c:	000b      	movs	r3, r1
 8007e5e:	0030      	movs	r0, r6
 8007e60:	0039      	movs	r1, r7
 8007e62:	f7f9 fb67 	bl	8001534 <__aeabi_dmul>
 8007e66:	4a3e      	ldr	r2, [pc, #248]	; (8007f60 <__ieee754_pow+0x3f0>)
 8007e68:	4b36      	ldr	r3, [pc, #216]	; (8007f44 <__ieee754_pow+0x3d4>)
 8007e6a:	f7f9 fb63 	bl	8001534 <__aeabi_dmul>
 8007e6e:	0002      	movs	r2, r0
 8007e70:	000b      	movs	r3, r1
 8007e72:	9804      	ldr	r0, [sp, #16]
 8007e74:	9905      	ldr	r1, [sp, #20]
 8007e76:	f7f9 fdc9 	bl	8001a0c <__aeabi_dsub>
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	000b      	movs	r3, r1
 8007e7e:	0004      	movs	r4, r0
 8007e80:	000d      	movs	r5, r1
 8007e82:	9800      	ldr	r0, [sp, #0]
 8007e84:	9901      	ldr	r1, [sp, #4]
 8007e86:	f7f8 fc17 	bl	80006b8 <__aeabi_dadd>
 8007e8a:	9a00      	ldr	r2, [sp, #0]
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	000f      	movs	r7, r1
 8007e92:	0006      	movs	r6, r0
 8007e94:	f7f9 fdba 	bl	8001a0c <__aeabi_dsub>
 8007e98:	0002      	movs	r2, r0
 8007e9a:	000b      	movs	r3, r1
 8007e9c:	0020      	movs	r0, r4
 8007e9e:	0029      	movs	r1, r5
 8007ea0:	f7f9 fdb4 	bl	8001a0c <__aeabi_dsub>
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	9004      	str	r0, [sp, #16]
 8007eac:	9105      	str	r1, [sp, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	d000      	beq.n	8007eb4 <__ieee754_pow+0x344>
 8007eb2:	e1db      	b.n	800826c <__ieee754_pow+0x6fc>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4c2b      	ldr	r4, [pc, #172]	; (8007f64 <__ieee754_pow+0x3f4>)
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	9401      	str	r4, [sp, #4]
 8007ebc:	9c02      	ldr	r4, [sp, #8]
 8007ebe:	9d03      	ldr	r5, [sp, #12]
 8007ec0:	9802      	ldr	r0, [sp, #8]
 8007ec2:	9903      	ldr	r1, [sp, #12]
 8007ec4:	2400      	movs	r4, #0
 8007ec6:	002b      	movs	r3, r5
 8007ec8:	0022      	movs	r2, r4
 8007eca:	f7f9 fd9f 	bl	8001a0c <__aeabi_dsub>
 8007ece:	0032      	movs	r2, r6
 8007ed0:	003b      	movs	r3, r7
 8007ed2:	f7f9 fb2f 	bl	8001534 <__aeabi_dmul>
 8007ed6:	9a02      	ldr	r2, [sp, #8]
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	9006      	str	r0, [sp, #24]
 8007edc:	9107      	str	r1, [sp, #28]
 8007ede:	9804      	ldr	r0, [sp, #16]
 8007ee0:	9905      	ldr	r1, [sp, #20]
 8007ee2:	f7f9 fb27 	bl	8001534 <__aeabi_dmul>
 8007ee6:	0002      	movs	r2, r0
 8007ee8:	000b      	movs	r3, r1
 8007eea:	9806      	ldr	r0, [sp, #24]
 8007eec:	9907      	ldr	r1, [sp, #28]
 8007eee:	f7f8 fbe3 	bl	80006b8 <__aeabi_dadd>
 8007ef2:	0022      	movs	r2, r4
 8007ef4:	002b      	movs	r3, r5
 8007ef6:	9004      	str	r0, [sp, #16]
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	0030      	movs	r0, r6
 8007efc:	0039      	movs	r1, r7
 8007efe:	f7f9 fb19 	bl	8001534 <__aeabi_dmul>
 8007f02:	0006      	movs	r6, r0
 8007f04:	000f      	movs	r7, r1
 8007f06:	000b      	movs	r3, r1
 8007f08:	0002      	movs	r2, r0
 8007f0a:	9804      	ldr	r0, [sp, #16]
 8007f0c:	9905      	ldr	r1, [sp, #20]
 8007f0e:	9606      	str	r6, [sp, #24]
 8007f10:	9707      	str	r7, [sp, #28]
 8007f12:	f7f8 fbd1 	bl	80006b8 <__aeabi_dadd>
 8007f16:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <__ieee754_pow+0x3f8>)
 8007f18:	0005      	movs	r5, r0
 8007f1a:	000c      	movs	r4, r1
 8007f1c:	9108      	str	r1, [sp, #32]
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	dc00      	bgt.n	8007f24 <__ieee754_pow+0x3b4>
 8007f22:	e2d6      	b.n	80084d2 <__ieee754_pow+0x962>
 8007f24:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <__ieee754_pow+0x3fc>)
 8007f26:	18cb      	adds	r3, r1, r3
 8007f28:	4303      	orrs	r3, r0
 8007f2a:	d100      	bne.n	8007f2e <__ieee754_pow+0x3be>
 8007f2c:	e1d8      	b.n	80082e0 <__ieee754_pow+0x770>
 8007f2e:	9800      	ldr	r0, [sp, #0]
 8007f30:	9901      	ldr	r1, [sp, #4]
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	f7f8 fa7d 	bl	8000434 <__aeabi_dcmplt>
 8007f3a:	1e43      	subs	r3, r0, #1
 8007f3c:	4198      	sbcs	r0, r3
 8007f3e:	e731      	b.n	8007da4 <__ieee754_pow+0x234>
 8007f40:	3ff00000 	.word	0x3ff00000
 8007f44:	3ff71547 	.word	0x3ff71547
 8007f48:	f85ddf44 	.word	0xf85ddf44
 8007f4c:	3e54ae0b 	.word	0x3e54ae0b
 8007f50:	3fd00000 	.word	0x3fd00000
 8007f54:	55555555 	.word	0x55555555
 8007f58:	3fd55555 	.word	0x3fd55555
 8007f5c:	3fe00000 	.word	0x3fe00000
 8007f60:	652b82fe 	.word	0x652b82fe
 8007f64:	bff00000 	.word	0xbff00000
 8007f68:	408fffff 	.word	0x408fffff
 8007f6c:	bf700000 	.word	0xbf700000
 8007f70:	4bc0      	ldr	r3, [pc, #768]	; (8008274 <__ieee754_pow+0x704>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	422b      	tst	r3, r5
 8007f76:	d10a      	bne.n	8007f8e <__ieee754_pow+0x41e>
 8007f78:	9800      	ldr	r0, [sp, #0]
 8007f7a:	9901      	ldr	r1, [sp, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4bbe      	ldr	r3, [pc, #760]	; (8008278 <__ieee754_pow+0x708>)
 8007f80:	f7f9 fad8 	bl	8001534 <__aeabi_dmul>
 8007f84:	2235      	movs	r2, #53	; 0x35
 8007f86:	9000      	str	r0, [sp, #0]
 8007f88:	9101      	str	r1, [sp, #4]
 8007f8a:	9c01      	ldr	r4, [sp, #4]
 8007f8c:	4252      	negs	r2, r2
 8007f8e:	49bb      	ldr	r1, [pc, #748]	; (800827c <__ieee754_pow+0x70c>)
 8007f90:	1523      	asrs	r3, r4, #20
 8007f92:	185b      	adds	r3, r3, r1
 8007f94:	189b      	adds	r3, r3, r2
 8007f96:	0324      	lsls	r4, r4, #12
 8007f98:	4db9      	ldr	r5, [pc, #740]	; (8008280 <__ieee754_pow+0x710>)
 8007f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f9c:	4bb9      	ldr	r3, [pc, #740]	; (8008284 <__ieee754_pow+0x714>)
 8007f9e:	0b22      	lsrs	r2, r4, #12
 8007fa0:	4315      	orrs	r5, r2
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	dd09      	ble.n	8007fbc <__ieee754_pow+0x44c>
 8007fa8:	4bb7      	ldr	r3, [pc, #732]	; (8008288 <__ieee754_pow+0x718>)
 8007faa:	3401      	adds	r4, #1
 8007fac:	429a      	cmp	r2, r3
 8007fae:	dd05      	ble.n	8007fbc <__ieee754_pow+0x44c>
 8007fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb2:	191b      	adds	r3, r3, r4
 8007fb4:	2400      	movs	r4, #0
 8007fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fb8:	4bb4      	ldr	r3, [pc, #720]	; (800828c <__ieee754_pow+0x71c>)
 8007fba:	18ed      	adds	r5, r5, r3
 8007fbc:	00e3      	lsls	r3, r4, #3
 8007fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fc0:	4bb3      	ldr	r3, [pc, #716]	; (8008290 <__ieee754_pow+0x720>)
 8007fc2:	00e2      	lsls	r2, r4, #3
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	9800      	ldr	r0, [sp, #0]
 8007fc8:	9901      	ldr	r1, [sp, #4]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	0029      	movs	r1, r5
 8007fd0:	0006      	movs	r6, r0
 8007fd2:	920a      	str	r2, [sp, #40]	; 0x28
 8007fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fd6:	f7f9 fd19 	bl	8001a0c <__aeabi_dsub>
 8007fda:	0032      	movs	r2, r6
 8007fdc:	002b      	movs	r3, r5
 8007fde:	9010      	str	r0, [sp, #64]	; 0x40
 8007fe0:	9111      	str	r1, [sp, #68]	; 0x44
 8007fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe6:	f7f8 fb67 	bl	80006b8 <__aeabi_dadd>
 8007fea:	0002      	movs	r2, r0
 8007fec:	000b      	movs	r3, r1
 8007fee:	2000      	movs	r0, #0
 8007ff0:	49a3      	ldr	r1, [pc, #652]	; (8008280 <__ieee754_pow+0x710>)
 8007ff2:	f7f8 fe9d 	bl	8000d30 <__aeabi_ddiv>
 8007ff6:	0002      	movs	r2, r0
 8007ff8:	000b      	movs	r3, r1
 8007ffa:	9012      	str	r0, [sp, #72]	; 0x48
 8007ffc:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ffe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008000:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008002:	f7f9 fa97 	bl	8001534 <__aeabi_dmul>
 8008006:	9008      	str	r0, [sp, #32]
 8008008:	9109      	str	r1, [sp, #36]	; 0x24
 800800a:	9a08      	ldr	r2, [sp, #32]
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	9204      	str	r2, [sp, #16]
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	2300      	movs	r3, #0
 8008016:	002f      	movs	r7, r5
 8008018:	0589      	lsls	r1, r1, #22
 800801a:	106d      	asrs	r5, r5, #1
 800801c:	430d      	orrs	r5, r1
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	9a04      	ldr	r2, [sp, #16]
 8008024:	9b05      	ldr	r3, [sp, #20]
 8008026:	9200      	str	r2, [sp, #0]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	0309      	lsls	r1, r1, #12
 800802e:	186d      	adds	r5, r5, r1
 8008030:	04a1      	lsls	r1, r4, #18
 8008032:	186b      	adds	r3, r5, r1
 8008034:	9800      	ldr	r0, [sp, #0]
 8008036:	9901      	ldr	r1, [sp, #4]
 8008038:	0014      	movs	r4, r2
 800803a:	001d      	movs	r5, r3
 800803c:	f7f9 fa7a 	bl	8001534 <__aeabi_dmul>
 8008040:	0002      	movs	r2, r0
 8008042:	000b      	movs	r3, r1
 8008044:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008046:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008048:	f7f9 fce0 	bl	8001a0c <__aeabi_dsub>
 800804c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008050:	9010      	str	r0, [sp, #64]	; 0x40
 8008052:	9111      	str	r1, [sp, #68]	; 0x44
 8008054:	0020      	movs	r0, r4
 8008056:	0029      	movs	r1, r5
 8008058:	f7f9 fcd8 	bl	8001a0c <__aeabi_dsub>
 800805c:	0002      	movs	r2, r0
 800805e:	000b      	movs	r3, r1
 8008060:	0030      	movs	r0, r6
 8008062:	0039      	movs	r1, r7
 8008064:	f7f9 fcd2 	bl	8001a0c <__aeabi_dsub>
 8008068:	9a00      	ldr	r2, [sp, #0]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	f7f9 fa62 	bl	8001534 <__aeabi_dmul>
 8008070:	0002      	movs	r2, r0
 8008072:	000b      	movs	r3, r1
 8008074:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008076:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008078:	f7f9 fcc8 	bl	8001a0c <__aeabi_dsub>
 800807c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800807e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008080:	f7f9 fa58 	bl	8001534 <__aeabi_dmul>
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	900a      	str	r0, [sp, #40]	; 0x28
 800808a:	910b      	str	r1, [sp, #44]	; 0x2c
 800808c:	0010      	movs	r0, r2
 800808e:	0019      	movs	r1, r3
 8008090:	f7f9 fa50 	bl	8001534 <__aeabi_dmul>
 8008094:	0006      	movs	r6, r0
 8008096:	000f      	movs	r7, r1
 8008098:	4a7e      	ldr	r2, [pc, #504]	; (8008294 <__ieee754_pow+0x724>)
 800809a:	4b7f      	ldr	r3, [pc, #508]	; (8008298 <__ieee754_pow+0x728>)
 800809c:	f7f9 fa4a 	bl	8001534 <__aeabi_dmul>
 80080a0:	4a7e      	ldr	r2, [pc, #504]	; (800829c <__ieee754_pow+0x72c>)
 80080a2:	4b7f      	ldr	r3, [pc, #508]	; (80082a0 <__ieee754_pow+0x730>)
 80080a4:	f7f8 fb08 	bl	80006b8 <__aeabi_dadd>
 80080a8:	0032      	movs	r2, r6
 80080aa:	003b      	movs	r3, r7
 80080ac:	f7f9 fa42 	bl	8001534 <__aeabi_dmul>
 80080b0:	4a7c      	ldr	r2, [pc, #496]	; (80082a4 <__ieee754_pow+0x734>)
 80080b2:	4b7d      	ldr	r3, [pc, #500]	; (80082a8 <__ieee754_pow+0x738>)
 80080b4:	f7f8 fb00 	bl	80006b8 <__aeabi_dadd>
 80080b8:	0032      	movs	r2, r6
 80080ba:	003b      	movs	r3, r7
 80080bc:	f7f9 fa3a 	bl	8001534 <__aeabi_dmul>
 80080c0:	4a7a      	ldr	r2, [pc, #488]	; (80082ac <__ieee754_pow+0x73c>)
 80080c2:	4b7b      	ldr	r3, [pc, #492]	; (80082b0 <__ieee754_pow+0x740>)
 80080c4:	f7f8 faf8 	bl	80006b8 <__aeabi_dadd>
 80080c8:	0032      	movs	r2, r6
 80080ca:	003b      	movs	r3, r7
 80080cc:	f7f9 fa32 	bl	8001534 <__aeabi_dmul>
 80080d0:	4a78      	ldr	r2, [pc, #480]	; (80082b4 <__ieee754_pow+0x744>)
 80080d2:	4b79      	ldr	r3, [pc, #484]	; (80082b8 <__ieee754_pow+0x748>)
 80080d4:	f7f8 faf0 	bl	80006b8 <__aeabi_dadd>
 80080d8:	0032      	movs	r2, r6
 80080da:	003b      	movs	r3, r7
 80080dc:	f7f9 fa2a 	bl	8001534 <__aeabi_dmul>
 80080e0:	4a76      	ldr	r2, [pc, #472]	; (80082bc <__ieee754_pow+0x74c>)
 80080e2:	4b77      	ldr	r3, [pc, #476]	; (80082c0 <__ieee754_pow+0x750>)
 80080e4:	f7f8 fae8 	bl	80006b8 <__aeabi_dadd>
 80080e8:	0032      	movs	r2, r6
 80080ea:	0004      	movs	r4, r0
 80080ec:	000d      	movs	r5, r1
 80080ee:	003b      	movs	r3, r7
 80080f0:	0030      	movs	r0, r6
 80080f2:	0039      	movs	r1, r7
 80080f4:	f7f9 fa1e 	bl	8001534 <__aeabi_dmul>
 80080f8:	0002      	movs	r2, r0
 80080fa:	000b      	movs	r3, r1
 80080fc:	0020      	movs	r0, r4
 80080fe:	0029      	movs	r1, r5
 8008100:	f7f9 fa18 	bl	8001534 <__aeabi_dmul>
 8008104:	9a00      	ldr	r2, [sp, #0]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	0004      	movs	r4, r0
 800810a:	000d      	movs	r5, r1
 800810c:	9808      	ldr	r0, [sp, #32]
 800810e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008110:	f7f8 fad2 	bl	80006b8 <__aeabi_dadd>
 8008114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008118:	f7f9 fa0c 	bl	8001534 <__aeabi_dmul>
 800811c:	0022      	movs	r2, r4
 800811e:	002b      	movs	r3, r5
 8008120:	f7f8 faca 	bl	80006b8 <__aeabi_dadd>
 8008124:	9a00      	ldr	r2, [sp, #0]
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	9010      	str	r0, [sp, #64]	; 0x40
 800812a:	9111      	str	r1, [sp, #68]	; 0x44
 800812c:	0010      	movs	r0, r2
 800812e:	0019      	movs	r1, r3
 8008130:	f7f9 fa00 	bl	8001534 <__aeabi_dmul>
 8008134:	2200      	movs	r2, #0
 8008136:	4b63      	ldr	r3, [pc, #396]	; (80082c4 <__ieee754_pow+0x754>)
 8008138:	0004      	movs	r4, r0
 800813a:	000d      	movs	r5, r1
 800813c:	f7f8 fabc 	bl	80006b8 <__aeabi_dadd>
 8008140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008144:	f7f8 fab8 	bl	80006b8 <__aeabi_dadd>
 8008148:	2600      	movs	r6, #0
 800814a:	000f      	movs	r7, r1
 800814c:	0032      	movs	r2, r6
 800814e:	000b      	movs	r3, r1
 8008150:	9800      	ldr	r0, [sp, #0]
 8008152:	9901      	ldr	r1, [sp, #4]
 8008154:	f7f9 f9ee 	bl	8001534 <__aeabi_dmul>
 8008158:	2200      	movs	r2, #0
 800815a:	9000      	str	r0, [sp, #0]
 800815c:	9101      	str	r1, [sp, #4]
 800815e:	4b59      	ldr	r3, [pc, #356]	; (80082c4 <__ieee754_pow+0x754>)
 8008160:	0030      	movs	r0, r6
 8008162:	0039      	movs	r1, r7
 8008164:	f7f9 fc52 	bl	8001a0c <__aeabi_dsub>
 8008168:	0022      	movs	r2, r4
 800816a:	002b      	movs	r3, r5
 800816c:	f7f9 fc4e 	bl	8001a0c <__aeabi_dsub>
 8008170:	0002      	movs	r2, r0
 8008172:	000b      	movs	r3, r1
 8008174:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008176:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008178:	f7f9 fc48 	bl	8001a0c <__aeabi_dsub>
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	f7f9 f9d8 	bl	8001534 <__aeabi_dmul>
 8008184:	0032      	movs	r2, r6
 8008186:	0004      	movs	r4, r0
 8008188:	000d      	movs	r5, r1
 800818a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800818c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800818e:	003b      	movs	r3, r7
 8008190:	f7f9 f9d0 	bl	8001534 <__aeabi_dmul>
 8008194:	0002      	movs	r2, r0
 8008196:	000b      	movs	r3, r1
 8008198:	0020      	movs	r0, r4
 800819a:	0029      	movs	r1, r5
 800819c:	f7f8 fa8c 	bl	80006b8 <__aeabi_dadd>
 80081a0:	0004      	movs	r4, r0
 80081a2:	000d      	movs	r5, r1
 80081a4:	0002      	movs	r2, r0
 80081a6:	000b      	movs	r3, r1
 80081a8:	9800      	ldr	r0, [sp, #0]
 80081aa:	9901      	ldr	r1, [sp, #4]
 80081ac:	f7f8 fa84 	bl	80006b8 <__aeabi_dadd>
 80081b0:	2600      	movs	r6, #0
 80081b2:	22e0      	movs	r2, #224	; 0xe0
 80081b4:	4b44      	ldr	r3, [pc, #272]	; (80082c8 <__ieee754_pow+0x758>)
 80081b6:	0612      	lsls	r2, r2, #24
 80081b8:	0030      	movs	r0, r6
 80081ba:	000f      	movs	r7, r1
 80081bc:	f7f9 f9ba 	bl	8001534 <__aeabi_dmul>
 80081c0:	9008      	str	r0, [sp, #32]
 80081c2:	9109      	str	r1, [sp, #36]	; 0x24
 80081c4:	9a00      	ldr	r2, [sp, #0]
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	0039      	movs	r1, r7
 80081ca:	0030      	movs	r0, r6
 80081cc:	f7f9 fc1e 	bl	8001a0c <__aeabi_dsub>
 80081d0:	0002      	movs	r2, r0
 80081d2:	000b      	movs	r3, r1
 80081d4:	0020      	movs	r0, r4
 80081d6:	0029      	movs	r1, r5
 80081d8:	f7f9 fc18 	bl	8001a0c <__aeabi_dsub>
 80081dc:	4a3b      	ldr	r2, [pc, #236]	; (80082cc <__ieee754_pow+0x75c>)
 80081de:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <__ieee754_pow+0x758>)
 80081e0:	f7f9 f9a8 	bl	8001534 <__aeabi_dmul>
 80081e4:	4a3a      	ldr	r2, [pc, #232]	; (80082d0 <__ieee754_pow+0x760>)
 80081e6:	0004      	movs	r4, r0
 80081e8:	000d      	movs	r5, r1
 80081ea:	4b3a      	ldr	r3, [pc, #232]	; (80082d4 <__ieee754_pow+0x764>)
 80081ec:	0039      	movs	r1, r7
 80081ee:	0030      	movs	r0, r6
 80081f0:	f7f9 f9a0 	bl	8001534 <__aeabi_dmul>
 80081f4:	0002      	movs	r2, r0
 80081f6:	000b      	movs	r3, r1
 80081f8:	0020      	movs	r0, r4
 80081fa:	0029      	movs	r1, r5
 80081fc:	f7f8 fa5c 	bl	80006b8 <__aeabi_dadd>
 8008200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008202:	4b35      	ldr	r3, [pc, #212]	; (80082d8 <__ieee754_pow+0x768>)
 8008204:	189b      	adds	r3, r3, r2
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f7f8 fa55 	bl	80006b8 <__aeabi_dadd>
 800820e:	900a      	str	r0, [sp, #40]	; 0x28
 8008210:	910b      	str	r1, [sp, #44]	; 0x2c
 8008212:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008214:	f7f9 ffe0 	bl	80021d8 <__aeabi_i2d>
 8008218:	0004      	movs	r4, r0
 800821a:	000d      	movs	r5, r1
 800821c:	9808      	ldr	r0, [sp, #32]
 800821e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008222:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <__ieee754_pow+0x76c>)
 8008224:	189b      	adds	r3, r3, r2
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	9200      	str	r2, [sp, #0]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008232:	f7f8 fa41 	bl	80006b8 <__aeabi_dadd>
 8008236:	9a00      	ldr	r2, [sp, #0]
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	f7f8 fa3d 	bl	80006b8 <__aeabi_dadd>
 800823e:	0022      	movs	r2, r4
 8008240:	002b      	movs	r3, r5
 8008242:	f7f8 fa39 	bl	80006b8 <__aeabi_dadd>
 8008246:	0022      	movs	r2, r4
 8008248:	002b      	movs	r3, r5
 800824a:	0030      	movs	r0, r6
 800824c:	000f      	movs	r7, r1
 800824e:	f7f9 fbdd 	bl	8001a0c <__aeabi_dsub>
 8008252:	9a00      	ldr	r2, [sp, #0]
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	f7f9 fbd9 	bl	8001a0c <__aeabi_dsub>
 800825a:	9a08      	ldr	r2, [sp, #32]
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	f7f9 fbd5 	bl	8001a0c <__aeabi_dsub>
 8008262:	0002      	movs	r2, r0
 8008264:	000b      	movs	r3, r1
 8008266:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800826a:	e619      	b.n	8007ea0 <__ieee754_pow+0x330>
 800826c:	2300      	movs	r3, #0
 800826e:	4c04      	ldr	r4, [pc, #16]	; (8008280 <__ieee754_pow+0x710>)
 8008270:	e622      	b.n	8007eb8 <__ieee754_pow+0x348>
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	7ff00000 	.word	0x7ff00000
 8008278:	43400000 	.word	0x43400000
 800827c:	fffffc01 	.word	0xfffffc01
 8008280:	3ff00000 	.word	0x3ff00000
 8008284:	0003988e 	.word	0x0003988e
 8008288:	000bb679 	.word	0x000bb679
 800828c:	fff00000 	.word	0xfff00000
 8008290:	08008a98 	.word	0x08008a98
 8008294:	4a454eef 	.word	0x4a454eef
 8008298:	3fca7e28 	.word	0x3fca7e28
 800829c:	93c9db65 	.word	0x93c9db65
 80082a0:	3fcd864a 	.word	0x3fcd864a
 80082a4:	a91d4101 	.word	0xa91d4101
 80082a8:	3fd17460 	.word	0x3fd17460
 80082ac:	518f264d 	.word	0x518f264d
 80082b0:	3fd55555 	.word	0x3fd55555
 80082b4:	db6fabff 	.word	0xdb6fabff
 80082b8:	3fdb6db6 	.word	0x3fdb6db6
 80082bc:	33333303 	.word	0x33333303
 80082c0:	3fe33333 	.word	0x3fe33333
 80082c4:	40080000 	.word	0x40080000
 80082c8:	3feec709 	.word	0x3feec709
 80082cc:	dc3a03fd 	.word	0xdc3a03fd
 80082d0:	145b01f5 	.word	0x145b01f5
 80082d4:	be3e2fe0 	.word	0xbe3e2fe0
 80082d8:	08008ab8 	.word	0x08008ab8
 80082dc:	08008aa8 	.word	0x08008aa8
 80082e0:	4a90      	ldr	r2, [pc, #576]	; (8008524 <__ieee754_pow+0x9b4>)
 80082e2:	4b91      	ldr	r3, [pc, #580]	; (8008528 <__ieee754_pow+0x9b8>)
 80082e4:	9804      	ldr	r0, [sp, #16]
 80082e6:	9905      	ldr	r1, [sp, #20]
 80082e8:	f7f8 f9e6 	bl	80006b8 <__aeabi_dadd>
 80082ec:	0032      	movs	r2, r6
 80082ee:	9002      	str	r0, [sp, #8]
 80082f0:	9103      	str	r1, [sp, #12]
 80082f2:	003b      	movs	r3, r7
 80082f4:	0028      	movs	r0, r5
 80082f6:	0021      	movs	r1, r4
 80082f8:	f7f9 fb88 	bl	8001a0c <__aeabi_dsub>
 80082fc:	0002      	movs	r2, r0
 80082fe:	000b      	movs	r3, r1
 8008300:	9802      	ldr	r0, [sp, #8]
 8008302:	9903      	ldr	r1, [sp, #12]
 8008304:	f7f8 f8aa 	bl	800045c <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d000      	beq.n	800830e <__ieee754_pow+0x79e>
 800830c:	e60f      	b.n	8007f2e <__ieee754_pow+0x3be>
 800830e:	2100      	movs	r1, #0
 8008310:	4a86      	ldr	r2, [pc, #536]	; (800852c <__ieee754_pow+0x9bc>)
 8008312:	0063      	lsls	r3, r4, #1
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	9102      	str	r1, [sp, #8]
 8008318:	4293      	cmp	r3, r2
 800831a:	dd25      	ble.n	8008368 <__ieee754_pow+0x7f8>
 800831c:	4a84      	ldr	r2, [pc, #528]	; (8008530 <__ieee754_pow+0x9c0>)
 800831e:	151b      	asrs	r3, r3, #20
 8008320:	189b      	adds	r3, r3, r2
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	0352      	lsls	r2, r2, #13
 8008326:	4694      	mov	ip, r2
 8008328:	411a      	asrs	r2, r3
 800832a:	1914      	adds	r4, r2, r4
 800832c:	4b81      	ldr	r3, [pc, #516]	; (8008534 <__ieee754_pow+0x9c4>)
 800832e:	0060      	lsls	r0, r4, #1
 8008330:	4d81      	ldr	r5, [pc, #516]	; (8008538 <__ieee754_pow+0x9c8>)
 8008332:	0d40      	lsrs	r0, r0, #21
 8008334:	18c0      	adds	r0, r0, r3
 8008336:	4105      	asrs	r5, r0
 8008338:	0021      	movs	r1, r4
 800833a:	43a9      	bics	r1, r5
 800833c:	000b      	movs	r3, r1
 800833e:	4661      	mov	r1, ip
 8008340:	0324      	lsls	r4, r4, #12
 8008342:	0b24      	lsrs	r4, r4, #12
 8008344:	4321      	orrs	r1, r4
 8008346:	2414      	movs	r4, #20
 8008348:	1a20      	subs	r0, r4, r0
 800834a:	4101      	asrs	r1, r0
 800834c:	9102      	str	r1, [sp, #8]
 800834e:	9908      	ldr	r1, [sp, #32]
 8008350:	2200      	movs	r2, #0
 8008352:	2900      	cmp	r1, #0
 8008354:	da02      	bge.n	800835c <__ieee754_pow+0x7ec>
 8008356:	9902      	ldr	r1, [sp, #8]
 8008358:	4249      	negs	r1, r1
 800835a:	9102      	str	r1, [sp, #8]
 800835c:	0030      	movs	r0, r6
 800835e:	0039      	movs	r1, r7
 8008360:	f7f9 fb54 	bl	8001a0c <__aeabi_dsub>
 8008364:	9006      	str	r0, [sp, #24]
 8008366:	9107      	str	r1, [sp, #28]
 8008368:	9a04      	ldr	r2, [sp, #16]
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	9806      	ldr	r0, [sp, #24]
 800836e:	9907      	ldr	r1, [sp, #28]
 8008370:	2600      	movs	r6, #0
 8008372:	f7f8 f9a1 	bl	80006b8 <__aeabi_dadd>
 8008376:	2200      	movs	r2, #0
 8008378:	0030      	movs	r0, r6
 800837a:	4b70      	ldr	r3, [pc, #448]	; (800853c <__ieee754_pow+0x9cc>)
 800837c:	000f      	movs	r7, r1
 800837e:	f7f9 f8d9 	bl	8001534 <__aeabi_dmul>
 8008382:	9a06      	ldr	r2, [sp, #24]
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	9008      	str	r0, [sp, #32]
 8008388:	9109      	str	r1, [sp, #36]	; 0x24
 800838a:	0030      	movs	r0, r6
 800838c:	0039      	movs	r1, r7
 800838e:	f7f9 fb3d 	bl	8001a0c <__aeabi_dsub>
 8008392:	0002      	movs	r2, r0
 8008394:	000b      	movs	r3, r1
 8008396:	9804      	ldr	r0, [sp, #16]
 8008398:	9905      	ldr	r1, [sp, #20]
 800839a:	f7f9 fb37 	bl	8001a0c <__aeabi_dsub>
 800839e:	4a68      	ldr	r2, [pc, #416]	; (8008540 <__ieee754_pow+0x9d0>)
 80083a0:	4b68      	ldr	r3, [pc, #416]	; (8008544 <__ieee754_pow+0x9d4>)
 80083a2:	f7f9 f8c7 	bl	8001534 <__aeabi_dmul>
 80083a6:	4a68      	ldr	r2, [pc, #416]	; (8008548 <__ieee754_pow+0x9d8>)
 80083a8:	0004      	movs	r4, r0
 80083aa:	000d      	movs	r5, r1
 80083ac:	0030      	movs	r0, r6
 80083ae:	0039      	movs	r1, r7
 80083b0:	4b66      	ldr	r3, [pc, #408]	; (800854c <__ieee754_pow+0x9dc>)
 80083b2:	f7f9 f8bf 	bl	8001534 <__aeabi_dmul>
 80083b6:	0002      	movs	r2, r0
 80083b8:	000b      	movs	r3, r1
 80083ba:	0020      	movs	r0, r4
 80083bc:	0029      	movs	r1, r5
 80083be:	f7f8 f97b 	bl	80006b8 <__aeabi_dadd>
 80083c2:	0004      	movs	r4, r0
 80083c4:	000d      	movs	r5, r1
 80083c6:	0002      	movs	r2, r0
 80083c8:	000b      	movs	r3, r1
 80083ca:	9808      	ldr	r0, [sp, #32]
 80083cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ce:	f7f8 f973 	bl	80006b8 <__aeabi_dadd>
 80083d2:	9a08      	ldr	r2, [sp, #32]
 80083d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d6:	0006      	movs	r6, r0
 80083d8:	000f      	movs	r7, r1
 80083da:	f7f9 fb17 	bl	8001a0c <__aeabi_dsub>
 80083de:	0002      	movs	r2, r0
 80083e0:	000b      	movs	r3, r1
 80083e2:	0020      	movs	r0, r4
 80083e4:	0029      	movs	r1, r5
 80083e6:	f7f9 fb11 	bl	8001a0c <__aeabi_dsub>
 80083ea:	0032      	movs	r2, r6
 80083ec:	9004      	str	r0, [sp, #16]
 80083ee:	9105      	str	r1, [sp, #20]
 80083f0:	003b      	movs	r3, r7
 80083f2:	0030      	movs	r0, r6
 80083f4:	0039      	movs	r1, r7
 80083f6:	f7f9 f89d 	bl	8001534 <__aeabi_dmul>
 80083fa:	0004      	movs	r4, r0
 80083fc:	000d      	movs	r5, r1
 80083fe:	4a54      	ldr	r2, [pc, #336]	; (8008550 <__ieee754_pow+0x9e0>)
 8008400:	4b54      	ldr	r3, [pc, #336]	; (8008554 <__ieee754_pow+0x9e4>)
 8008402:	f7f9 f897 	bl	8001534 <__aeabi_dmul>
 8008406:	4a54      	ldr	r2, [pc, #336]	; (8008558 <__ieee754_pow+0x9e8>)
 8008408:	4b54      	ldr	r3, [pc, #336]	; (800855c <__ieee754_pow+0x9ec>)
 800840a:	f7f9 faff 	bl	8001a0c <__aeabi_dsub>
 800840e:	0022      	movs	r2, r4
 8008410:	002b      	movs	r3, r5
 8008412:	f7f9 f88f 	bl	8001534 <__aeabi_dmul>
 8008416:	4a52      	ldr	r2, [pc, #328]	; (8008560 <__ieee754_pow+0x9f0>)
 8008418:	4b52      	ldr	r3, [pc, #328]	; (8008564 <__ieee754_pow+0x9f4>)
 800841a:	f7f8 f94d 	bl	80006b8 <__aeabi_dadd>
 800841e:	0022      	movs	r2, r4
 8008420:	002b      	movs	r3, r5
 8008422:	f7f9 f887 	bl	8001534 <__aeabi_dmul>
 8008426:	4a50      	ldr	r2, [pc, #320]	; (8008568 <__ieee754_pow+0x9f8>)
 8008428:	4b50      	ldr	r3, [pc, #320]	; (800856c <__ieee754_pow+0x9fc>)
 800842a:	f7f9 faef 	bl	8001a0c <__aeabi_dsub>
 800842e:	0022      	movs	r2, r4
 8008430:	002b      	movs	r3, r5
 8008432:	f7f9 f87f 	bl	8001534 <__aeabi_dmul>
 8008436:	4a4e      	ldr	r2, [pc, #312]	; (8008570 <__ieee754_pow+0xa00>)
 8008438:	4b4e      	ldr	r3, [pc, #312]	; (8008574 <__ieee754_pow+0xa04>)
 800843a:	f7f8 f93d 	bl	80006b8 <__aeabi_dadd>
 800843e:	0022      	movs	r2, r4
 8008440:	002b      	movs	r3, r5
 8008442:	f7f9 f877 	bl	8001534 <__aeabi_dmul>
 8008446:	0002      	movs	r2, r0
 8008448:	000b      	movs	r3, r1
 800844a:	0030      	movs	r0, r6
 800844c:	0039      	movs	r1, r7
 800844e:	f7f9 fadd 	bl	8001a0c <__aeabi_dsub>
 8008452:	0004      	movs	r4, r0
 8008454:	000d      	movs	r5, r1
 8008456:	0002      	movs	r2, r0
 8008458:	000b      	movs	r3, r1
 800845a:	0030      	movs	r0, r6
 800845c:	0039      	movs	r1, r7
 800845e:	f7f9 f869 	bl	8001534 <__aeabi_dmul>
 8008462:	2380      	movs	r3, #128	; 0x80
 8008464:	9006      	str	r0, [sp, #24]
 8008466:	9107      	str	r1, [sp, #28]
 8008468:	2200      	movs	r2, #0
 800846a:	0020      	movs	r0, r4
 800846c:	0029      	movs	r1, r5
 800846e:	05db      	lsls	r3, r3, #23
 8008470:	f7f9 facc 	bl	8001a0c <__aeabi_dsub>
 8008474:	0002      	movs	r2, r0
 8008476:	000b      	movs	r3, r1
 8008478:	9806      	ldr	r0, [sp, #24]
 800847a:	9907      	ldr	r1, [sp, #28]
 800847c:	f7f8 fc58 	bl	8000d30 <__aeabi_ddiv>
 8008480:	9a04      	ldr	r2, [sp, #16]
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	0004      	movs	r4, r0
 8008486:	000d      	movs	r5, r1
 8008488:	0030      	movs	r0, r6
 800848a:	0039      	movs	r1, r7
 800848c:	f7f9 f852 	bl	8001534 <__aeabi_dmul>
 8008490:	9a04      	ldr	r2, [sp, #16]
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	f7f8 f910 	bl	80006b8 <__aeabi_dadd>
 8008498:	0002      	movs	r2, r0
 800849a:	000b      	movs	r3, r1
 800849c:	0020      	movs	r0, r4
 800849e:	0029      	movs	r1, r5
 80084a0:	f7f9 fab4 	bl	8001a0c <__aeabi_dsub>
 80084a4:	0032      	movs	r2, r6
 80084a6:	003b      	movs	r3, r7
 80084a8:	f7f9 fab0 	bl	8001a0c <__aeabi_dsub>
 80084ac:	0002      	movs	r2, r0
 80084ae:	000b      	movs	r3, r1
 80084b0:	2000      	movs	r0, #0
 80084b2:	4931      	ldr	r1, [pc, #196]	; (8008578 <__ieee754_pow+0xa08>)
 80084b4:	f7f9 faaa 	bl	8001a0c <__aeabi_dsub>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	051b      	lsls	r3, r3, #20
 80084bc:	185b      	adds	r3, r3, r1
 80084be:	151a      	asrs	r2, r3, #20
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	dc25      	bgt.n	8008510 <__ieee754_pow+0x9a0>
 80084c4:	9a02      	ldr	r2, [sp, #8]
 80084c6:	f000 f94f 	bl	8008768 <scalbn>
 80084ca:	9a00      	ldr	r2, [sp, #0]
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	f7ff fc33 	bl	8007d38 <__ieee754_pow+0x1c8>
 80084d2:	4a2a      	ldr	r2, [pc, #168]	; (800857c <__ieee754_pow+0xa0c>)
 80084d4:	004b      	lsls	r3, r1, #1
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	4293      	cmp	r3, r2
 80084da:	dc00      	bgt.n	80084de <__ieee754_pow+0x96e>
 80084dc:	e717      	b.n	800830e <__ieee754_pow+0x79e>
 80084de:	4b28      	ldr	r3, [pc, #160]	; (8008580 <__ieee754_pow+0xa10>)
 80084e0:	18cb      	adds	r3, r1, r3
 80084e2:	4303      	orrs	r3, r0
 80084e4:	d008      	beq.n	80084f8 <__ieee754_pow+0x988>
 80084e6:	9800      	ldr	r0, [sp, #0]
 80084e8:	9901      	ldr	r1, [sp, #4]
 80084ea:	2300      	movs	r3, #0
 80084ec:	2200      	movs	r2, #0
 80084ee:	f7f7 ffa1 	bl	8000434 <__aeabi_dcmplt>
 80084f2:	1e43      	subs	r3, r0, #1
 80084f4:	4198      	sbcs	r0, r3
 80084f6:	e462      	b.n	8007dbe <__ieee754_pow+0x24e>
 80084f8:	0032      	movs	r2, r6
 80084fa:	003b      	movs	r3, r7
 80084fc:	f7f9 fa86 	bl	8001a0c <__aeabi_dsub>
 8008500:	9a04      	ldr	r2, [sp, #16]
 8008502:	9b05      	ldr	r3, [sp, #20]
 8008504:	f7f7 ffb4 	bl	8000470 <__aeabi_dcmpge>
 8008508:	2800      	cmp	r0, #0
 800850a:	d100      	bne.n	800850e <__ieee754_pow+0x99e>
 800850c:	e6ff      	b.n	800830e <__ieee754_pow+0x79e>
 800850e:	e7ea      	b.n	80084e6 <__ieee754_pow+0x976>
 8008510:	0019      	movs	r1, r3
 8008512:	e7da      	b.n	80084ca <__ieee754_pow+0x95a>
 8008514:	2300      	movs	r3, #0
 8008516:	4c18      	ldr	r4, [pc, #96]	; (8008578 <__ieee754_pow+0xa08>)
 8008518:	f7ff fbf1 	bl	8007cfe <__ieee754_pow+0x18e>
 800851c:	2300      	movs	r3, #0
 800851e:	2400      	movs	r4, #0
 8008520:	f7ff fbed 	bl	8007cfe <__ieee754_pow+0x18e>
 8008524:	652b82fe 	.word	0x652b82fe
 8008528:	3c971547 	.word	0x3c971547
 800852c:	3fe00000 	.word	0x3fe00000
 8008530:	fffffc02 	.word	0xfffffc02
 8008534:	fffffc01 	.word	0xfffffc01
 8008538:	000fffff 	.word	0x000fffff
 800853c:	3fe62e43 	.word	0x3fe62e43
 8008540:	fefa39ef 	.word	0xfefa39ef
 8008544:	3fe62e42 	.word	0x3fe62e42
 8008548:	0ca86c39 	.word	0x0ca86c39
 800854c:	be205c61 	.word	0xbe205c61
 8008550:	72bea4d0 	.word	0x72bea4d0
 8008554:	3e663769 	.word	0x3e663769
 8008558:	c5d26bf1 	.word	0xc5d26bf1
 800855c:	3ebbbd41 	.word	0x3ebbbd41
 8008560:	af25de2c 	.word	0xaf25de2c
 8008564:	3f11566a 	.word	0x3f11566a
 8008568:	16bebd93 	.word	0x16bebd93
 800856c:	3f66c16c 	.word	0x3f66c16c
 8008570:	5555553e 	.word	0x5555553e
 8008574:	3fc55555 	.word	0x3fc55555
 8008578:	3ff00000 	.word	0x3ff00000
 800857c:	4090cbff 	.word	0x4090cbff
 8008580:	3f6f3400 	.word	0x3f6f3400

08008584 <__ieee754_sqrt>:
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	000b      	movs	r3, r1
 8008588:	000c      	movs	r4, r1
 800858a:	4956      	ldr	r1, [pc, #344]	; (80086e4 <__ieee754_sqrt+0x160>)
 800858c:	0005      	movs	r5, r0
 800858e:	0002      	movs	r2, r0
 8008590:	0008      	movs	r0, r1
 8008592:	b085      	sub	sp, #20
 8008594:	4020      	ands	r0, r4
 8008596:	4288      	cmp	r0, r1
 8008598:	d10f      	bne.n	80085ba <__ieee754_sqrt+0x36>
 800859a:	0028      	movs	r0, r5
 800859c:	0021      	movs	r1, r4
 800859e:	f7f8 ffc9 	bl	8001534 <__aeabi_dmul>
 80085a2:	0002      	movs	r2, r0
 80085a4:	000b      	movs	r3, r1
 80085a6:	0028      	movs	r0, r5
 80085a8:	0021      	movs	r1, r4
 80085aa:	f7f8 f885 	bl	80006b8 <__aeabi_dadd>
 80085ae:	0005      	movs	r5, r0
 80085b0:	000c      	movs	r4, r1
 80085b2:	0028      	movs	r0, r5
 80085b4:	0021      	movs	r1, r4
 80085b6:	b005      	add	sp, #20
 80085b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	dc10      	bgt.n	80085e0 <__ieee754_sqrt+0x5c>
 80085be:	0061      	lsls	r1, r4, #1
 80085c0:	0849      	lsrs	r1, r1, #1
 80085c2:	4329      	orrs	r1, r5
 80085c4:	d0f5      	beq.n	80085b2 <__ieee754_sqrt+0x2e>
 80085c6:	2100      	movs	r1, #0
 80085c8:	428c      	cmp	r4, r1
 80085ca:	d100      	bne.n	80085ce <__ieee754_sqrt+0x4a>
 80085cc:	e080      	b.n	80086d0 <__ieee754_sqrt+0x14c>
 80085ce:	0028      	movs	r0, r5
 80085d0:	0021      	movs	r1, r4
 80085d2:	f7f9 fa1b 	bl	8001a0c <__aeabi_dsub>
 80085d6:	0002      	movs	r2, r0
 80085d8:	000b      	movs	r3, r1
 80085da:	f7f8 fba9 	bl	8000d30 <__aeabi_ddiv>
 80085de:	e7e6      	b.n	80085ae <__ieee754_sqrt+0x2a>
 80085e0:	1521      	asrs	r1, r4, #20
 80085e2:	d075      	beq.n	80086d0 <__ieee754_sqrt+0x14c>
 80085e4:	4840      	ldr	r0, [pc, #256]	; (80086e8 <__ieee754_sqrt+0x164>)
 80085e6:	031b      	lsls	r3, r3, #12
 80085e8:	180c      	adds	r4, r1, r0
 80085ea:	2080      	movs	r0, #128	; 0x80
 80085ec:	0b1b      	lsrs	r3, r3, #12
 80085ee:	0340      	lsls	r0, r0, #13
 80085f0:	4303      	orrs	r3, r0
 80085f2:	07c9      	lsls	r1, r1, #31
 80085f4:	d403      	bmi.n	80085fe <__ieee754_sqrt+0x7a>
 80085f6:	0fd1      	lsrs	r1, r2, #31
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	185b      	adds	r3, r3, r1
 80085fc:	0052      	lsls	r2, r2, #1
 80085fe:	1061      	asrs	r1, r4, #1
 8008600:	2400      	movs	r4, #0
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	0fd1      	lsrs	r1, r2, #31
 8008608:	185b      	adds	r3, r3, r1
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	2516      	movs	r5, #22
 800860e:	0020      	movs	r0, r4
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	0389      	lsls	r1, r1, #14
 8008614:	1846      	adds	r6, r0, r1
 8008616:	429e      	cmp	r6, r3
 8008618:	dc02      	bgt.n	8008620 <__ieee754_sqrt+0x9c>
 800861a:	1870      	adds	r0, r6, r1
 800861c:	1b9b      	subs	r3, r3, r6
 800861e:	1864      	adds	r4, r4, r1
 8008620:	0fd6      	lsrs	r6, r2, #31
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	3d01      	subs	r5, #1
 8008626:	18f3      	adds	r3, r6, r3
 8008628:	0052      	lsls	r2, r2, #1
 800862a:	0849      	lsrs	r1, r1, #1
 800862c:	2d00      	cmp	r5, #0
 800862e:	d1f1      	bne.n	8008614 <__ieee754_sqrt+0x90>
 8008630:	2620      	movs	r6, #32
 8008632:	2780      	movs	r7, #128	; 0x80
 8008634:	0029      	movs	r1, r5
 8008636:	9601      	str	r6, [sp, #4]
 8008638:	063f      	lsls	r7, r7, #24
 800863a:	197e      	adds	r6, r7, r5
 800863c:	46b4      	mov	ip, r6
 800863e:	4283      	cmp	r3, r0
 8008640:	dc02      	bgt.n	8008648 <__ieee754_sqrt+0xc4>
 8008642:	d114      	bne.n	800866e <__ieee754_sqrt+0xea>
 8008644:	4296      	cmp	r6, r2
 8008646:	d812      	bhi.n	800866e <__ieee754_sqrt+0xea>
 8008648:	4665      	mov	r5, ip
 800864a:	4666      	mov	r6, ip
 800864c:	19ed      	adds	r5, r5, r7
 800864e:	9002      	str	r0, [sp, #8]
 8008650:	2e00      	cmp	r6, #0
 8008652:	da03      	bge.n	800865c <__ieee754_sqrt+0xd8>
 8008654:	43ee      	mvns	r6, r5
 8008656:	0ff6      	lsrs	r6, r6, #31
 8008658:	1986      	adds	r6, r0, r6
 800865a:	9602      	str	r6, [sp, #8]
 800865c:	1a1b      	subs	r3, r3, r0
 800865e:	4562      	cmp	r2, ip
 8008660:	4180      	sbcs	r0, r0
 8008662:	4240      	negs	r0, r0
 8008664:	1a1b      	subs	r3, r3, r0
 8008666:	4660      	mov	r0, ip
 8008668:	1a12      	subs	r2, r2, r0
 800866a:	9802      	ldr	r0, [sp, #8]
 800866c:	19c9      	adds	r1, r1, r7
 800866e:	0fd6      	lsrs	r6, r2, #31
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	199b      	adds	r3, r3, r6
 8008674:	9e01      	ldr	r6, [sp, #4]
 8008676:	0052      	lsls	r2, r2, #1
 8008678:	3e01      	subs	r6, #1
 800867a:	087f      	lsrs	r7, r7, #1
 800867c:	9601      	str	r6, [sp, #4]
 800867e:	2e00      	cmp	r6, #0
 8008680:	d1db      	bne.n	800863a <__ieee754_sqrt+0xb6>
 8008682:	4313      	orrs	r3, r2
 8008684:	d003      	beq.n	800868e <__ieee754_sqrt+0x10a>
 8008686:	1c4b      	adds	r3, r1, #1
 8008688:	d127      	bne.n	80086da <__ieee754_sqrt+0x156>
 800868a:	0031      	movs	r1, r6
 800868c:	3401      	adds	r4, #1
 800868e:	4b17      	ldr	r3, [pc, #92]	; (80086ec <__ieee754_sqrt+0x168>)
 8008690:	1060      	asrs	r0, r4, #1
 8008692:	18c0      	adds	r0, r0, r3
 8008694:	0849      	lsrs	r1, r1, #1
 8008696:	07e3      	lsls	r3, r4, #31
 8008698:	d502      	bpl.n	80086a0 <__ieee754_sqrt+0x11c>
 800869a:	2380      	movs	r3, #128	; 0x80
 800869c:	061b      	lsls	r3, r3, #24
 800869e:	4319      	orrs	r1, r3
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	000d      	movs	r5, r1
 80086a4:	051c      	lsls	r4, r3, #20
 80086a6:	1823      	adds	r3, r4, r0
 80086a8:	001c      	movs	r4, r3
 80086aa:	e782      	b.n	80085b2 <__ieee754_sqrt+0x2e>
 80086ac:	0ad3      	lsrs	r3, r2, #11
 80086ae:	3815      	subs	r0, #21
 80086b0:	0552      	lsls	r2, r2, #21
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0fa      	beq.n	80086ac <__ieee754_sqrt+0x128>
 80086b6:	2480      	movs	r4, #128	; 0x80
 80086b8:	0364      	lsls	r4, r4, #13
 80086ba:	4223      	tst	r3, r4
 80086bc:	d00a      	beq.n	80086d4 <__ieee754_sqrt+0x150>
 80086be:	2420      	movs	r4, #32
 80086c0:	0016      	movs	r6, r2
 80086c2:	1a64      	subs	r4, r4, r1
 80086c4:	40e6      	lsrs	r6, r4
 80086c6:	1e4d      	subs	r5, r1, #1
 80086c8:	408a      	lsls	r2, r1
 80086ca:	4333      	orrs	r3, r6
 80086cc:	1b41      	subs	r1, r0, r5
 80086ce:	e789      	b.n	80085e4 <__ieee754_sqrt+0x60>
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7ee      	b.n	80086b2 <__ieee754_sqrt+0x12e>
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	3101      	adds	r1, #1
 80086d8:	e7ef      	b.n	80086ba <__ieee754_sqrt+0x136>
 80086da:	2301      	movs	r3, #1
 80086dc:	3101      	adds	r1, #1
 80086de:	4399      	bics	r1, r3
 80086e0:	e7d5      	b.n	800868e <__ieee754_sqrt+0x10a>
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	fffffc01 	.word	0xfffffc01
 80086ec:	3fe00000 	.word	0x3fe00000

080086f0 <with_errno>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	000d      	movs	r5, r1
 80086f4:	0016      	movs	r6, r2
 80086f6:	0004      	movs	r4, r0
 80086f8:	f7fe fd0a 	bl	8007110 <__errno>
 80086fc:	0029      	movs	r1, r5
 80086fe:	6006      	str	r6, [r0, #0]
 8008700:	0020      	movs	r0, r4
 8008702:	bd70      	pop	{r4, r5, r6, pc}

08008704 <xflow>:
 8008704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008706:	0015      	movs	r5, r2
 8008708:	001c      	movs	r4, r3
 800870a:	2800      	cmp	r0, #0
 800870c:	d010      	beq.n	8008730 <xflow+0x2c>
 800870e:	2380      	movs	r3, #128	; 0x80
 8008710:	0010      	movs	r0, r2
 8008712:	061b      	lsls	r3, r3, #24
 8008714:	18e1      	adds	r1, r4, r3
 8008716:	9000      	str	r0, [sp, #0]
 8008718:	9101      	str	r1, [sp, #4]
 800871a:	9a00      	ldr	r2, [sp, #0]
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	0028      	movs	r0, r5
 8008720:	0021      	movs	r1, r4
 8008722:	f7f8 ff07 	bl	8001534 <__aeabi_dmul>
 8008726:	2222      	movs	r2, #34	; 0x22
 8008728:	f7ff ffe2 	bl	80086f0 <with_errno>
 800872c:	b003      	add	sp, #12
 800872e:	bd30      	pop	{r4, r5, pc}
 8008730:	0010      	movs	r0, r2
 8008732:	0019      	movs	r1, r3
 8008734:	e7ef      	b.n	8008716 <xflow+0x12>

08008736 <__math_uflow>:
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	b510      	push	{r4, lr}
 800873a:	2200      	movs	r2, #0
 800873c:	055b      	lsls	r3, r3, #21
 800873e:	f7ff ffe1 	bl	8008704 <xflow>
 8008742:	bd10      	pop	{r4, pc}

08008744 <__math_oflow>:
 8008744:	23e0      	movs	r3, #224	; 0xe0
 8008746:	b510      	push	{r4, lr}
 8008748:	2200      	movs	r2, #0
 800874a:	05db      	lsls	r3, r3, #23
 800874c:	f7ff ffda 	bl	8008704 <xflow>
 8008750:	bd10      	pop	{r4, pc}

08008752 <fabs>:
 8008752:	004b      	lsls	r3, r1, #1
 8008754:	0859      	lsrs	r1, r3, #1
 8008756:	4770      	bx	lr

08008758 <finite>:
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <finite+0xc>)
 800875a:	0048      	lsls	r0, r1, #1
 800875c:	0840      	lsrs	r0, r0, #1
 800875e:	18c0      	adds	r0, r0, r3
 8008760:	0fc0      	lsrs	r0, r0, #31
 8008762:	4770      	bx	lr
 8008764:	80100000 	.word	0x80100000

08008768 <scalbn>:
 8008768:	004b      	lsls	r3, r1, #1
 800876a:	b570      	push	{r4, r5, r6, lr}
 800876c:	0d5b      	lsrs	r3, r3, #21
 800876e:	0014      	movs	r4, r2
 8008770:	000a      	movs	r2, r1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <scalbn+0x2a>
 8008776:	004b      	lsls	r3, r1, #1
 8008778:	085b      	lsrs	r3, r3, #1
 800877a:	4303      	orrs	r3, r0
 800877c:	d010      	beq.n	80087a0 <scalbn+0x38>
 800877e:	4b27      	ldr	r3, [pc, #156]	; (800881c <scalbn+0xb4>)
 8008780:	2200      	movs	r2, #0
 8008782:	f7f8 fed7 	bl	8001534 <__aeabi_dmul>
 8008786:	4b26      	ldr	r3, [pc, #152]	; (8008820 <scalbn+0xb8>)
 8008788:	429c      	cmp	r4, r3
 800878a:	da0a      	bge.n	80087a2 <scalbn+0x3a>
 800878c:	4a25      	ldr	r2, [pc, #148]	; (8008824 <scalbn+0xbc>)
 800878e:	4b26      	ldr	r3, [pc, #152]	; (8008828 <scalbn+0xc0>)
 8008790:	e019      	b.n	80087c6 <scalbn+0x5e>
 8008792:	4d26      	ldr	r5, [pc, #152]	; (800882c <scalbn+0xc4>)
 8008794:	42ab      	cmp	r3, r5
 8008796:	d108      	bne.n	80087aa <scalbn+0x42>
 8008798:	0002      	movs	r2, r0
 800879a:	000b      	movs	r3, r1
 800879c:	f7f7 ff8c 	bl	80006b8 <__aeabi_dadd>
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	000a      	movs	r2, r1
 80087a4:	004b      	lsls	r3, r1, #1
 80087a6:	0d5b      	lsrs	r3, r3, #21
 80087a8:	3b36      	subs	r3, #54	; 0x36
 80087aa:	4d21      	ldr	r5, [pc, #132]	; (8008830 <scalbn+0xc8>)
 80087ac:	18e3      	adds	r3, r4, r3
 80087ae:	42ab      	cmp	r3, r5
 80087b0:	dd0c      	ble.n	80087cc <scalbn+0x64>
 80087b2:	4c20      	ldr	r4, [pc, #128]	; (8008834 <scalbn+0xcc>)
 80087b4:	4d20      	ldr	r5, [pc, #128]	; (8008838 <scalbn+0xd0>)
 80087b6:	2900      	cmp	r1, #0
 80087b8:	da01      	bge.n	80087be <scalbn+0x56>
 80087ba:	4c1e      	ldr	r4, [pc, #120]	; (8008834 <scalbn+0xcc>)
 80087bc:	4d1f      	ldr	r5, [pc, #124]	; (800883c <scalbn+0xd4>)
 80087be:	0020      	movs	r0, r4
 80087c0:	0029      	movs	r1, r5
 80087c2:	4a1c      	ldr	r2, [pc, #112]	; (8008834 <scalbn+0xcc>)
 80087c4:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <scalbn+0xd0>)
 80087c6:	f7f8 feb5 	bl	8001534 <__aeabi_dmul>
 80087ca:	e7e9      	b.n	80087a0 <scalbn+0x38>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd05      	ble.n	80087dc <scalbn+0x74>
 80087d0:	4c1b      	ldr	r4, [pc, #108]	; (8008840 <scalbn+0xd8>)
 80087d2:	051b      	lsls	r3, r3, #20
 80087d4:	4022      	ands	r2, r4
 80087d6:	431a      	orrs	r2, r3
 80087d8:	0011      	movs	r1, r2
 80087da:	e7e1      	b.n	80087a0 <scalbn+0x38>
 80087dc:	001d      	movs	r5, r3
 80087de:	3535      	adds	r5, #53	; 0x35
 80087e0:	da13      	bge.n	800880a <scalbn+0xa2>
 80087e2:	4a18      	ldr	r2, [pc, #96]	; (8008844 <scalbn+0xdc>)
 80087e4:	0fcb      	lsrs	r3, r1, #31
 80087e6:	4294      	cmp	r4, r2
 80087e8:	dd08      	ble.n	80087fc <scalbn+0x94>
 80087ea:	4812      	ldr	r0, [pc, #72]	; (8008834 <scalbn+0xcc>)
 80087ec:	4912      	ldr	r1, [pc, #72]	; (8008838 <scalbn+0xd0>)
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <scalbn+0x8e>
 80087f2:	4810      	ldr	r0, [pc, #64]	; (8008834 <scalbn+0xcc>)
 80087f4:	4911      	ldr	r1, [pc, #68]	; (800883c <scalbn+0xd4>)
 80087f6:	4a0f      	ldr	r2, [pc, #60]	; (8008834 <scalbn+0xcc>)
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <scalbn+0xd0>)
 80087fa:	e7e4      	b.n	80087c6 <scalbn+0x5e>
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <scalbn+0xbc>)
 80087fe:	490a      	ldr	r1, [pc, #40]	; (8008828 <scalbn+0xc0>)
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c3      	beq.n	800878c <scalbn+0x24>
 8008804:	4807      	ldr	r0, [pc, #28]	; (8008824 <scalbn+0xbc>)
 8008806:	4910      	ldr	r1, [pc, #64]	; (8008848 <scalbn+0xe0>)
 8008808:	e7c0      	b.n	800878c <scalbn+0x24>
 800880a:	4c0d      	ldr	r4, [pc, #52]	; (8008840 <scalbn+0xd8>)
 800880c:	3336      	adds	r3, #54	; 0x36
 800880e:	4022      	ands	r2, r4
 8008810:	051b      	lsls	r3, r3, #20
 8008812:	4313      	orrs	r3, r2
 8008814:	0019      	movs	r1, r3
 8008816:	2200      	movs	r2, #0
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <scalbn+0xe4>)
 800881a:	e7d4      	b.n	80087c6 <scalbn+0x5e>
 800881c:	43500000 	.word	0x43500000
 8008820:	ffff3cb0 	.word	0xffff3cb0
 8008824:	c2f8f359 	.word	0xc2f8f359
 8008828:	01a56e1f 	.word	0x01a56e1f
 800882c:	000007ff 	.word	0x000007ff
 8008830:	000007fe 	.word	0x000007fe
 8008834:	8800759c 	.word	0x8800759c
 8008838:	7e37e43c 	.word	0x7e37e43c
 800883c:	fe37e43c 	.word	0xfe37e43c
 8008840:	800fffff 	.word	0x800fffff
 8008844:	0000c350 	.word	0x0000c350
 8008848:	81a56e1f 	.word	0x81a56e1f
 800884c:	3c900000 	.word	0x3c900000

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
