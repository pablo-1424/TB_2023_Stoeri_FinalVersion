
TB_I2C_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008128  08008128  00018128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  080083a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080083a8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fce7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e75  00000000  00000000  0002fd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00031bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000329d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001554c  00000000  00000000  000336f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a99  00000000  00000000  00048c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085401  00000000  00000000  000596d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dead6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab8  00000000  00000000  000deb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008110 	.word	0x08008110

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08008110 	.word	0x08008110

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f827 	bl	800146c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff77 	bl	800131c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f819 	bl	800146c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f80f 	bl	800146c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff9f 	bl	80013a0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff95 	bl	80013a0 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	0008      	movs	r0, r1
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f834 	bl	8000520 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_lmul>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	46ce      	mov	lr, r9
 80004c8:	4647      	mov	r7, r8
 80004ca:	b580      	push	{r7, lr}
 80004cc:	0007      	movs	r7, r0
 80004ce:	4699      	mov	r9, r3
 80004d0:	0c3b      	lsrs	r3, r7, #16
 80004d2:	469c      	mov	ip, r3
 80004d4:	0413      	lsls	r3, r2, #16
 80004d6:	0c1b      	lsrs	r3, r3, #16
 80004d8:	001d      	movs	r5, r3
 80004da:	000e      	movs	r6, r1
 80004dc:	4661      	mov	r1, ip
 80004de:	0400      	lsls	r0, r0, #16
 80004e0:	0c14      	lsrs	r4, r2, #16
 80004e2:	0c00      	lsrs	r0, r0, #16
 80004e4:	4345      	muls	r5, r0
 80004e6:	434b      	muls	r3, r1
 80004e8:	4360      	muls	r0, r4
 80004ea:	4361      	muls	r1, r4
 80004ec:	18c0      	adds	r0, r0, r3
 80004ee:	0c2c      	lsrs	r4, r5, #16
 80004f0:	1820      	adds	r0, r4, r0
 80004f2:	468c      	mov	ip, r1
 80004f4:	4283      	cmp	r3, r0
 80004f6:	d903      	bls.n	8000500 <__aeabi_lmul+0x3c>
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	025b      	lsls	r3, r3, #9
 80004fc:	4698      	mov	r8, r3
 80004fe:	44c4      	add	ip, r8
 8000500:	4649      	mov	r1, r9
 8000502:	4379      	muls	r1, r7
 8000504:	4372      	muls	r2, r6
 8000506:	0c03      	lsrs	r3, r0, #16
 8000508:	4463      	add	r3, ip
 800050a:	042d      	lsls	r5, r5, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	18c9      	adds	r1, r1, r3
 8000510:	0400      	lsls	r0, r0, #16
 8000512:	1940      	adds	r0, r0, r5
 8000514:	1889      	adds	r1, r1, r2
 8000516:	bcc0      	pop	{r6, r7}
 8000518:	46b9      	mov	r9, r7
 800051a:	46b0      	mov	r8, r6
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__udivmoddi4>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	4657      	mov	r7, sl
 8000524:	464e      	mov	r6, r9
 8000526:	4645      	mov	r5, r8
 8000528:	46de      	mov	lr, fp
 800052a:	b5e0      	push	{r5, r6, r7, lr}
 800052c:	0004      	movs	r4, r0
 800052e:	000d      	movs	r5, r1
 8000530:	4692      	mov	sl, r2
 8000532:	4699      	mov	r9, r3
 8000534:	b083      	sub	sp, #12
 8000536:	428b      	cmp	r3, r1
 8000538:	d830      	bhi.n	800059c <__udivmoddi4+0x7c>
 800053a:	d02d      	beq.n	8000598 <__udivmoddi4+0x78>
 800053c:	4649      	mov	r1, r9
 800053e:	4650      	mov	r0, sl
 8000540:	f001 fe98 	bl	8002274 <__clzdi2>
 8000544:	0029      	movs	r1, r5
 8000546:	0006      	movs	r6, r0
 8000548:	0020      	movs	r0, r4
 800054a:	f001 fe93 	bl	8002274 <__clzdi2>
 800054e:	1a33      	subs	r3, r6, r0
 8000550:	4698      	mov	r8, r3
 8000552:	3b20      	subs	r3, #32
 8000554:	469b      	mov	fp, r3
 8000556:	d433      	bmi.n	80005c0 <__udivmoddi4+0xa0>
 8000558:	465a      	mov	r2, fp
 800055a:	4653      	mov	r3, sl
 800055c:	4093      	lsls	r3, r2
 800055e:	4642      	mov	r2, r8
 8000560:	001f      	movs	r7, r3
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001e      	movs	r6, r3
 8000568:	42af      	cmp	r7, r5
 800056a:	d83a      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 800056c:	42af      	cmp	r7, r5
 800056e:	d100      	bne.n	8000572 <__udivmoddi4+0x52>
 8000570:	e078      	b.n	8000664 <__udivmoddi4+0x144>
 8000572:	465b      	mov	r3, fp
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	41bd      	sbcs	r5, r7
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <__udivmoddi4+0x5e>
 800057c:	e075      	b.n	800066a <__udivmoddi4+0x14a>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	465a      	mov	r2, fp
 800058a:	4093      	lsls	r3, r2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	4642      	mov	r2, r8
 8000592:	4093      	lsls	r3, r2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e028      	b.n	80005ea <__udivmoddi4+0xca>
 8000598:	4282      	cmp	r2, r0
 800059a:	d9cf      	bls.n	800053c <__udivmoddi4+0x1c>
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <__udivmoddi4+0x8e>
 80005aa:	601c      	str	r4, [r3, #0]
 80005ac:	605d      	str	r5, [r3, #4]
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	b003      	add	sp, #12
 80005b4:	bcf0      	pop	{r4, r5, r6, r7}
 80005b6:	46bb      	mov	fp, r7
 80005b8:	46b2      	mov	sl, r6
 80005ba:	46a9      	mov	r9, r5
 80005bc:	46a0      	mov	r8, r4
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	4652      	mov	r2, sl
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	4641      	mov	r1, r8
 80005cc:	0013      	movs	r3, r2
 80005ce:	464a      	mov	r2, r9
 80005d0:	408a      	lsls	r2, r1
 80005d2:	0017      	movs	r7, r2
 80005d4:	4642      	mov	r2, r8
 80005d6:	431f      	orrs	r7, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	4093      	lsls	r3, r2
 80005dc:	001e      	movs	r6, r3
 80005de:	42af      	cmp	r7, r5
 80005e0:	d9c4      	bls.n	800056c <__udivmoddi4+0x4c>
 80005e2:	2200      	movs	r2, #0
 80005e4:	2300      	movs	r3, #0
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0d9      	beq.n	80005a4 <__udivmoddi4+0x84>
 80005f0:	07fb      	lsls	r3, r7, #31
 80005f2:	0872      	lsrs	r2, r6, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4646      	mov	r6, r8
 80005f8:	087b      	lsrs	r3, r7, #1
 80005fa:	e00e      	b.n	800061a <__udivmoddi4+0xfa>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d101      	bne.n	8000604 <__udivmoddi4+0xe4>
 8000600:	42a2      	cmp	r2, r4
 8000602:	d80c      	bhi.n	800061e <__udivmoddi4+0xfe>
 8000604:	1aa4      	subs	r4, r4, r2
 8000606:	419d      	sbcs	r5, r3
 8000608:	2001      	movs	r0, #1
 800060a:	1924      	adds	r4, r4, r4
 800060c:	416d      	adcs	r5, r5
 800060e:	2100      	movs	r1, #0
 8000610:	3e01      	subs	r6, #1
 8000612:	1824      	adds	r4, r4, r0
 8000614:	414d      	adcs	r5, r1
 8000616:	2e00      	cmp	r6, #0
 8000618:	d006      	beq.n	8000628 <__udivmoddi4+0x108>
 800061a:	42ab      	cmp	r3, r5
 800061c:	d9ee      	bls.n	80005fc <__udivmoddi4+0xdc>
 800061e:	3e01      	subs	r6, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2e00      	cmp	r6, #0
 8000626:	d1f8      	bne.n	800061a <__udivmoddi4+0xfa>
 8000628:	9800      	ldr	r0, [sp, #0]
 800062a:	9901      	ldr	r1, [sp, #4]
 800062c:	465b      	mov	r3, fp
 800062e:	1900      	adds	r0, r0, r4
 8000630:	4169      	adcs	r1, r5
 8000632:	2b00      	cmp	r3, #0
 8000634:	db24      	blt.n	8000680 <__udivmoddi4+0x160>
 8000636:	002b      	movs	r3, r5
 8000638:	465a      	mov	r2, fp
 800063a:	4644      	mov	r4, r8
 800063c:	40d3      	lsrs	r3, r2
 800063e:	002a      	movs	r2, r5
 8000640:	40e2      	lsrs	r2, r4
 8000642:	001c      	movs	r4, r3
 8000644:	465b      	mov	r3, fp
 8000646:	0015      	movs	r5, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	db2a      	blt.n	80006a2 <__udivmoddi4+0x182>
 800064c:	0026      	movs	r6, r4
 800064e:	409e      	lsls	r6, r3
 8000650:	0033      	movs	r3, r6
 8000652:	0026      	movs	r6, r4
 8000654:	4647      	mov	r7, r8
 8000656:	40be      	lsls	r6, r7
 8000658:	0032      	movs	r2, r6
 800065a:	1a80      	subs	r0, r0, r2
 800065c:	4199      	sbcs	r1, r3
 800065e:	9000      	str	r0, [sp, #0]
 8000660:	9101      	str	r1, [sp, #4]
 8000662:	e79f      	b.n	80005a4 <__udivmoddi4+0x84>
 8000664:	42a3      	cmp	r3, r4
 8000666:	d8bc      	bhi.n	80005e2 <__udivmoddi4+0xc2>
 8000668:	e783      	b.n	8000572 <__udivmoddi4+0x52>
 800066a:	4642      	mov	r2, r8
 800066c:	2320      	movs	r3, #32
 800066e:	2100      	movs	r1, #0
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	9100      	str	r1, [sp, #0]
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	40da      	lsrs	r2, r3
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	e786      	b.n	800058e <__udivmoddi4+0x6e>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	4646      	mov	r6, r8
 800068a:	409a      	lsls	r2, r3
 800068c:	0023      	movs	r3, r4
 800068e:	40f3      	lsrs	r3, r6
 8000690:	4644      	mov	r4, r8
 8000692:	4313      	orrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	40e2      	lsrs	r2, r4
 8000698:	001c      	movs	r4, r3
 800069a:	465b      	mov	r3, fp
 800069c:	0015      	movs	r5, r2
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dad4      	bge.n	800064c <__udivmoddi4+0x12c>
 80006a2:	4642      	mov	r2, r8
 80006a4:	002f      	movs	r7, r5
 80006a6:	2320      	movs	r3, #32
 80006a8:	0026      	movs	r6, r4
 80006aa:	4097      	lsls	r7, r2
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	40de      	lsrs	r6, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	4333      	orrs	r3, r6
 80006b4:	e7cd      	b.n	8000652 <__udivmoddi4+0x132>
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_dadd>:
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	464f      	mov	r7, r9
 80006bc:	4646      	mov	r6, r8
 80006be:	46d6      	mov	lr, sl
 80006c0:	000d      	movs	r5, r1
 80006c2:	0004      	movs	r4, r0
 80006c4:	b5c0      	push	{r6, r7, lr}
 80006c6:	001f      	movs	r7, r3
 80006c8:	0011      	movs	r1, r2
 80006ca:	0328      	lsls	r0, r5, #12
 80006cc:	0f62      	lsrs	r2, r4, #29
 80006ce:	0a40      	lsrs	r0, r0, #9
 80006d0:	4310      	orrs	r0, r2
 80006d2:	007a      	lsls	r2, r7, #1
 80006d4:	0d52      	lsrs	r2, r2, #21
 80006d6:	00e3      	lsls	r3, r4, #3
 80006d8:	033c      	lsls	r4, r7, #12
 80006da:	4691      	mov	r9, r2
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	0ffa      	lsrs	r2, r7, #31
 80006e0:	0f4f      	lsrs	r7, r1, #29
 80006e2:	006e      	lsls	r6, r5, #1
 80006e4:	4327      	orrs	r7, r4
 80006e6:	4692      	mov	sl, r2
 80006e8:	46b8      	mov	r8, r7
 80006ea:	0d76      	lsrs	r6, r6, #21
 80006ec:	0fed      	lsrs	r5, r5, #31
 80006ee:	00c9      	lsls	r1, r1, #3
 80006f0:	4295      	cmp	r5, r2
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x3e>
 80006f4:	e099      	b.n	800082a <__aeabi_dadd+0x172>
 80006f6:	464c      	mov	r4, r9
 80006f8:	1b34      	subs	r4, r6, r4
 80006fa:	46a4      	mov	ip, r4
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_dadd+0x4a>
 8000700:	e07c      	b.n	80007fc <__aeabi_dadd+0x144>
 8000702:	464a      	mov	r2, r9
 8000704:	2a00      	cmp	r2, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x52>
 8000708:	e0b8      	b.n	800087c <__aeabi_dadd+0x1c4>
 800070a:	4ac5      	ldr	r2, [pc, #788]	; (8000a20 <__aeabi_dadd+0x368>)
 800070c:	4296      	cmp	r6, r2
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x5a>
 8000710:	e11c      	b.n	800094c <__aeabi_dadd+0x294>
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	003c      	movs	r4, r7
 8000716:	0412      	lsls	r2, r2, #16
 8000718:	4314      	orrs	r4, r2
 800071a:	46a0      	mov	r8, r4
 800071c:	4662      	mov	r2, ip
 800071e:	2a38      	cmp	r2, #56	; 0x38
 8000720:	dd00      	ble.n	8000724 <__aeabi_dadd+0x6c>
 8000722:	e161      	b.n	80009e8 <__aeabi_dadd+0x330>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x72>
 8000728:	e1cc      	b.n	8000ac4 <__aeabi_dadd+0x40c>
 800072a:	4664      	mov	r4, ip
 800072c:	2220      	movs	r2, #32
 800072e:	1b12      	subs	r2, r2, r4
 8000730:	4644      	mov	r4, r8
 8000732:	4094      	lsls	r4, r2
 8000734:	000f      	movs	r7, r1
 8000736:	46a1      	mov	r9, r4
 8000738:	4664      	mov	r4, ip
 800073a:	4091      	lsls	r1, r2
 800073c:	40e7      	lsrs	r7, r4
 800073e:	464c      	mov	r4, r9
 8000740:	1e4a      	subs	r2, r1, #1
 8000742:	4191      	sbcs	r1, r2
 8000744:	433c      	orrs	r4, r7
 8000746:	4642      	mov	r2, r8
 8000748:	4321      	orrs	r1, r4
 800074a:	4664      	mov	r4, ip
 800074c:	40e2      	lsrs	r2, r4
 800074e:	1a80      	subs	r0, r0, r2
 8000750:	1a5c      	subs	r4, r3, r1
 8000752:	42a3      	cmp	r3, r4
 8000754:	419b      	sbcs	r3, r3
 8000756:	425f      	negs	r7, r3
 8000758:	1bc7      	subs	r7, r0, r7
 800075a:	023b      	lsls	r3, r7, #8
 800075c:	d400      	bmi.n	8000760 <__aeabi_dadd+0xa8>
 800075e:	e0d0      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000760:	027f      	lsls	r7, r7, #9
 8000762:	0a7f      	lsrs	r7, r7, #9
 8000764:	2f00      	cmp	r7, #0
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0xb2>
 8000768:	e0ff      	b.n	800096a <__aeabi_dadd+0x2b2>
 800076a:	0038      	movs	r0, r7
 800076c:	f001 fd64 	bl	8002238 <__clzsi2>
 8000770:	0001      	movs	r1, r0
 8000772:	3908      	subs	r1, #8
 8000774:	2320      	movs	r3, #32
 8000776:	0022      	movs	r2, r4
 8000778:	1a5b      	subs	r3, r3, r1
 800077a:	408f      	lsls	r7, r1
 800077c:	40da      	lsrs	r2, r3
 800077e:	408c      	lsls	r4, r1
 8000780:	4317      	orrs	r7, r2
 8000782:	42b1      	cmp	r1, r6
 8000784:	da00      	bge.n	8000788 <__aeabi_dadd+0xd0>
 8000786:	e0ff      	b.n	8000988 <__aeabi_dadd+0x2d0>
 8000788:	1b89      	subs	r1, r1, r6
 800078a:	1c4b      	adds	r3, r1, #1
 800078c:	2b1f      	cmp	r3, #31
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0xda>
 8000790:	e0a8      	b.n	80008e4 <__aeabi_dadd+0x22c>
 8000792:	2220      	movs	r2, #32
 8000794:	0039      	movs	r1, r7
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	0020      	movs	r0, r4
 800079a:	4094      	lsls	r4, r2
 800079c:	4091      	lsls	r1, r2
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	40df      	lsrs	r7, r3
 80007a6:	2600      	movs	r6, #0
 80007a8:	4301      	orrs	r1, r0
 80007aa:	430c      	orrs	r4, r1
 80007ac:	0763      	lsls	r3, r4, #29
 80007ae:	d009      	beq.n	80007c4 <__aeabi_dadd+0x10c>
 80007b0:	230f      	movs	r3, #15
 80007b2:	4023      	ands	r3, r4
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d005      	beq.n	80007c4 <__aeabi_dadd+0x10c>
 80007b8:	1d23      	adds	r3, r4, #4
 80007ba:	42a3      	cmp	r3, r4
 80007bc:	41a4      	sbcs	r4, r4
 80007be:	4264      	negs	r4, r4
 80007c0:	193f      	adds	r7, r7, r4
 80007c2:	001c      	movs	r4, r3
 80007c4:	023b      	lsls	r3, r7, #8
 80007c6:	d400      	bmi.n	80007ca <__aeabi_dadd+0x112>
 80007c8:	e09e      	b.n	8000908 <__aeabi_dadd+0x250>
 80007ca:	4b95      	ldr	r3, [pc, #596]	; (8000a20 <__aeabi_dadd+0x368>)
 80007cc:	3601      	adds	r6, #1
 80007ce:	429e      	cmp	r6, r3
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x11c>
 80007d2:	e0b7      	b.n	8000944 <__aeabi_dadd+0x28c>
 80007d4:	4a93      	ldr	r2, [pc, #588]	; (8000a24 <__aeabi_dadd+0x36c>)
 80007d6:	08e4      	lsrs	r4, r4, #3
 80007d8:	4017      	ands	r7, r2
 80007da:	077b      	lsls	r3, r7, #29
 80007dc:	0571      	lsls	r1, r6, #21
 80007de:	027f      	lsls	r7, r7, #9
 80007e0:	4323      	orrs	r3, r4
 80007e2:	0b3f      	lsrs	r7, r7, #12
 80007e4:	0d4a      	lsrs	r2, r1, #21
 80007e6:	0512      	lsls	r2, r2, #20
 80007e8:	433a      	orrs	r2, r7
 80007ea:	07ed      	lsls	r5, r5, #31
 80007ec:	432a      	orrs	r2, r5
 80007ee:	0018      	movs	r0, r3
 80007f0:	0011      	movs	r1, r2
 80007f2:	bce0      	pop	{r5, r6, r7}
 80007f4:	46ba      	mov	sl, r7
 80007f6:	46b1      	mov	r9, r6
 80007f8:	46a8      	mov	r8, r5
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d04b      	beq.n	8000898 <__aeabi_dadd+0x1e0>
 8000800:	464c      	mov	r4, r9
 8000802:	1ba4      	subs	r4, r4, r6
 8000804:	46a4      	mov	ip, r4
 8000806:	2e00      	cmp	r6, #0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x154>
 800080a:	e123      	b.n	8000a54 <__aeabi_dadd+0x39c>
 800080c:	0004      	movs	r4, r0
 800080e:	431c      	orrs	r4, r3
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x15c>
 8000812:	e1af      	b.n	8000b74 <__aeabi_dadd+0x4bc>
 8000814:	4662      	mov	r2, ip
 8000816:	1e54      	subs	r4, r2, #1
 8000818:	2a01      	cmp	r2, #1
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x166>
 800081c:	e215      	b.n	8000c4a <__aeabi_dadd+0x592>
 800081e:	4d80      	ldr	r5, [pc, #512]	; (8000a20 <__aeabi_dadd+0x368>)
 8000820:	45ac      	cmp	ip, r5
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x16e>
 8000824:	e1c8      	b.n	8000bb8 <__aeabi_dadd+0x500>
 8000826:	46a4      	mov	ip, r4
 8000828:	e11b      	b.n	8000a62 <__aeabi_dadd+0x3aa>
 800082a:	464a      	mov	r2, r9
 800082c:	1ab2      	subs	r2, r6, r2
 800082e:	4694      	mov	ip, r2
 8000830:	2a00      	cmp	r2, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_dadd+0x17e>
 8000834:	e0ac      	b.n	8000990 <__aeabi_dadd+0x2d8>
 8000836:	464a      	mov	r2, r9
 8000838:	2a00      	cmp	r2, #0
 800083a:	d043      	beq.n	80008c4 <__aeabi_dadd+0x20c>
 800083c:	4a78      	ldr	r2, [pc, #480]	; (8000a20 <__aeabi_dadd+0x368>)
 800083e:	4296      	cmp	r6, r2
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x18c>
 8000842:	e1af      	b.n	8000ba4 <__aeabi_dadd+0x4ec>
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	003c      	movs	r4, r7
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4314      	orrs	r4, r2
 800084c:	46a0      	mov	r8, r4
 800084e:	4662      	mov	r2, ip
 8000850:	2a38      	cmp	r2, #56	; 0x38
 8000852:	dc67      	bgt.n	8000924 <__aeabi_dadd+0x26c>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x1a2>
 8000858:	e15f      	b.n	8000b1a <__aeabi_dadd+0x462>
 800085a:	4647      	mov	r7, r8
 800085c:	3a20      	subs	r2, #32
 800085e:	40d7      	lsrs	r7, r2
 8000860:	4662      	mov	r2, ip
 8000862:	2a20      	cmp	r2, #32
 8000864:	d005      	beq.n	8000872 <__aeabi_dadd+0x1ba>
 8000866:	4664      	mov	r4, ip
 8000868:	2240      	movs	r2, #64	; 0x40
 800086a:	1b12      	subs	r2, r2, r4
 800086c:	4644      	mov	r4, r8
 800086e:	4094      	lsls	r4, r2
 8000870:	4321      	orrs	r1, r4
 8000872:	1e4a      	subs	r2, r1, #1
 8000874:	4191      	sbcs	r1, r2
 8000876:	000c      	movs	r4, r1
 8000878:	433c      	orrs	r4, r7
 800087a:	e057      	b.n	800092c <__aeabi_dadd+0x274>
 800087c:	003a      	movs	r2, r7
 800087e:	430a      	orrs	r2, r1
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x1cc>
 8000882:	e105      	b.n	8000a90 <__aeabi_dadd+0x3d8>
 8000884:	0022      	movs	r2, r4
 8000886:	3a01      	subs	r2, #1
 8000888:	2c01      	cmp	r4, #1
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x1d6>
 800088c:	e182      	b.n	8000b94 <__aeabi_dadd+0x4dc>
 800088e:	4c64      	ldr	r4, [pc, #400]	; (8000a20 <__aeabi_dadd+0x368>)
 8000890:	45a4      	cmp	ip, r4
 8000892:	d05b      	beq.n	800094c <__aeabi_dadd+0x294>
 8000894:	4694      	mov	ip, r2
 8000896:	e741      	b.n	800071c <__aeabi_dadd+0x64>
 8000898:	4c63      	ldr	r4, [pc, #396]	; (8000a28 <__aeabi_dadd+0x370>)
 800089a:	1c77      	adds	r7, r6, #1
 800089c:	4227      	tst	r7, r4
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x1ea>
 80008a0:	e0c4      	b.n	8000a2c <__aeabi_dadd+0x374>
 80008a2:	0004      	movs	r4, r0
 80008a4:	431c      	orrs	r4, r3
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_dadd+0x1f4>
 80008aa:	e169      	b.n	8000b80 <__aeabi_dadd+0x4c8>
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1fa>
 80008b0:	e1bf      	b.n	8000c32 <__aeabi_dadd+0x57a>
 80008b2:	4644      	mov	r4, r8
 80008b4:	430c      	orrs	r4, r1
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x202>
 80008b8:	e1d0      	b.n	8000c5c <__aeabi_dadd+0x5a4>
 80008ba:	0742      	lsls	r2, r0, #29
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	4313      	orrs	r3, r2
 80008c0:	08c0      	lsrs	r0, r0, #3
 80008c2:	e029      	b.n	8000918 <__aeabi_dadd+0x260>
 80008c4:	003a      	movs	r2, r7
 80008c6:	430a      	orrs	r2, r1
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x214>
 80008ca:	e170      	b.n	8000bae <__aeabi_dadd+0x4f6>
 80008cc:	4662      	mov	r2, ip
 80008ce:	4664      	mov	r4, ip
 80008d0:	3a01      	subs	r2, #1
 80008d2:	2c01      	cmp	r4, #1
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x220>
 80008d6:	e0e0      	b.n	8000a9a <__aeabi_dadd+0x3e2>
 80008d8:	4c51      	ldr	r4, [pc, #324]	; (8000a20 <__aeabi_dadd+0x368>)
 80008da:	45a4      	cmp	ip, r4
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x228>
 80008de:	e161      	b.n	8000ba4 <__aeabi_dadd+0x4ec>
 80008e0:	4694      	mov	ip, r2
 80008e2:	e7b4      	b.n	800084e <__aeabi_dadd+0x196>
 80008e4:	003a      	movs	r2, r7
 80008e6:	391f      	subs	r1, #31
 80008e8:	40ca      	lsrs	r2, r1
 80008ea:	0011      	movs	r1, r2
 80008ec:	2b20      	cmp	r3, #32
 80008ee:	d003      	beq.n	80008f8 <__aeabi_dadd+0x240>
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	409f      	lsls	r7, r3
 80008f6:	433c      	orrs	r4, r7
 80008f8:	1e63      	subs	r3, r4, #1
 80008fa:	419c      	sbcs	r4, r3
 80008fc:	2700      	movs	r7, #0
 80008fe:	2600      	movs	r6, #0
 8000900:	430c      	orrs	r4, r1
 8000902:	0763      	lsls	r3, r4, #29
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x250>
 8000906:	e753      	b.n	80007b0 <__aeabi_dadd+0xf8>
 8000908:	46b4      	mov	ip, r6
 800090a:	08e4      	lsrs	r4, r4, #3
 800090c:	077b      	lsls	r3, r7, #29
 800090e:	4323      	orrs	r3, r4
 8000910:	08f8      	lsrs	r0, r7, #3
 8000912:	4a43      	ldr	r2, [pc, #268]	; (8000a20 <__aeabi_dadd+0x368>)
 8000914:	4594      	cmp	ip, r2
 8000916:	d01d      	beq.n	8000954 <__aeabi_dadd+0x29c>
 8000918:	4662      	mov	r2, ip
 800091a:	0307      	lsls	r7, r0, #12
 800091c:	0552      	lsls	r2, r2, #21
 800091e:	0b3f      	lsrs	r7, r7, #12
 8000920:	0d52      	lsrs	r2, r2, #21
 8000922:	e760      	b.n	80007e6 <__aeabi_dadd+0x12e>
 8000924:	4644      	mov	r4, r8
 8000926:	430c      	orrs	r4, r1
 8000928:	1e62      	subs	r2, r4, #1
 800092a:	4194      	sbcs	r4, r2
 800092c:	18e4      	adds	r4, r4, r3
 800092e:	429c      	cmp	r4, r3
 8000930:	419b      	sbcs	r3, r3
 8000932:	425f      	negs	r7, r3
 8000934:	183f      	adds	r7, r7, r0
 8000936:	023b      	lsls	r3, r7, #8
 8000938:	d5e3      	bpl.n	8000902 <__aeabi_dadd+0x24a>
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <__aeabi_dadd+0x368>)
 800093c:	3601      	adds	r6, #1
 800093e:	429e      	cmp	r6, r3
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x28c>
 8000942:	e0b5      	b.n	8000ab0 <__aeabi_dadd+0x3f8>
 8000944:	0032      	movs	r2, r6
 8000946:	2700      	movs	r7, #0
 8000948:	2300      	movs	r3, #0
 800094a:	e74c      	b.n	80007e6 <__aeabi_dadd+0x12e>
 800094c:	0742      	lsls	r2, r0, #29
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	4313      	orrs	r3, r2
 8000952:	08c0      	lsrs	r0, r0, #3
 8000954:	001a      	movs	r2, r3
 8000956:	4302      	orrs	r2, r0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x2a4>
 800095a:	e1e1      	b.n	8000d20 <__aeabi_dadd+0x668>
 800095c:	2780      	movs	r7, #128	; 0x80
 800095e:	033f      	lsls	r7, r7, #12
 8000960:	4307      	orrs	r7, r0
 8000962:	033f      	lsls	r7, r7, #12
 8000964:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <__aeabi_dadd+0x368>)
 8000966:	0b3f      	lsrs	r7, r7, #12
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x12e>
 800096a:	0020      	movs	r0, r4
 800096c:	f001 fc64 	bl	8002238 <__clzsi2>
 8000970:	0001      	movs	r1, r0
 8000972:	3118      	adds	r1, #24
 8000974:	291f      	cmp	r1, #31
 8000976:	dc00      	bgt.n	800097a <__aeabi_dadd+0x2c2>
 8000978:	e6fc      	b.n	8000774 <__aeabi_dadd+0xbc>
 800097a:	3808      	subs	r0, #8
 800097c:	4084      	lsls	r4, r0
 800097e:	0027      	movs	r7, r4
 8000980:	2400      	movs	r4, #0
 8000982:	42b1      	cmp	r1, r6
 8000984:	db00      	blt.n	8000988 <__aeabi_dadd+0x2d0>
 8000986:	e6ff      	b.n	8000788 <__aeabi_dadd+0xd0>
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <__aeabi_dadd+0x36c>)
 800098a:	1a76      	subs	r6, r6, r1
 800098c:	4017      	ands	r7, r2
 800098e:	e70d      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000990:	2a00      	cmp	r2, #0
 8000992:	d02f      	beq.n	80009f4 <__aeabi_dadd+0x33c>
 8000994:	464a      	mov	r2, r9
 8000996:	1b92      	subs	r2, r2, r6
 8000998:	4694      	mov	ip, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x2e8>
 800099e:	e0ad      	b.n	8000afc <__aeabi_dadd+0x444>
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <__aeabi_dadd+0x368>)
 80009a2:	4591      	cmp	r9, r2
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x2f0>
 80009a6:	e10f      	b.n	8000bc8 <__aeabi_dadd+0x510>
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	4310      	orrs	r0, r2
 80009ae:	4662      	mov	r2, ip
 80009b0:	2a38      	cmp	r2, #56	; 0x38
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0x2fe>
 80009b4:	e10f      	b.n	8000bd6 <__aeabi_dadd+0x51e>
 80009b6:	2a1f      	cmp	r2, #31
 80009b8:	dd00      	ble.n	80009bc <__aeabi_dadd+0x304>
 80009ba:	e180      	b.n	8000cbe <__aeabi_dadd+0x606>
 80009bc:	4664      	mov	r4, ip
 80009be:	2220      	movs	r2, #32
 80009c0:	001e      	movs	r6, r3
 80009c2:	1b12      	subs	r2, r2, r4
 80009c4:	4667      	mov	r7, ip
 80009c6:	0004      	movs	r4, r0
 80009c8:	4093      	lsls	r3, r2
 80009ca:	4094      	lsls	r4, r2
 80009cc:	40fe      	lsrs	r6, r7
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	4193      	sbcs	r3, r2
 80009d2:	40f8      	lsrs	r0, r7
 80009d4:	4334      	orrs	r4, r6
 80009d6:	431c      	orrs	r4, r3
 80009d8:	4480      	add	r8, r0
 80009da:	1864      	adds	r4, r4, r1
 80009dc:	428c      	cmp	r4, r1
 80009de:	41bf      	sbcs	r7, r7
 80009e0:	427f      	negs	r7, r7
 80009e2:	464e      	mov	r6, r9
 80009e4:	4447      	add	r7, r8
 80009e6:	e7a6      	b.n	8000936 <__aeabi_dadd+0x27e>
 80009e8:	4642      	mov	r2, r8
 80009ea:	430a      	orrs	r2, r1
 80009ec:	0011      	movs	r1, r2
 80009ee:	1e4a      	subs	r2, r1, #1
 80009f0:	4191      	sbcs	r1, r2
 80009f2:	e6ad      	b.n	8000750 <__aeabi_dadd+0x98>
 80009f4:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__aeabi_dadd+0x370>)
 80009f6:	1c72      	adds	r2, r6, #1
 80009f8:	4222      	tst	r2, r4
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x346>
 80009fc:	e0a1      	b.n	8000b42 <__aeabi_dadd+0x48a>
 80009fe:	0002      	movs	r2, r0
 8000a00:	431a      	orrs	r2, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x350>
 8000a06:	e0fa      	b.n	8000bfe <__aeabi_dadd+0x546>
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0x356>
 8000a0c:	e145      	b.n	8000c9a <__aeabi_dadd+0x5e2>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	430a      	orrs	r2, r1
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x35e>
 8000a14:	e146      	b.n	8000ca4 <__aeabi_dadd+0x5ec>
 8000a16:	0742      	lsls	r2, r0, #29
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	08c0      	lsrs	r0, r0, #3
 8000a1e:	e77b      	b.n	8000918 <__aeabi_dadd+0x260>
 8000a20:	000007ff 	.word	0x000007ff
 8000a24:	ff7fffff 	.word	0xff7fffff
 8000a28:	000007fe 	.word	0x000007fe
 8000a2c:	4647      	mov	r7, r8
 8000a2e:	1a5c      	subs	r4, r3, r1
 8000a30:	1bc2      	subs	r2, r0, r7
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	41bf      	sbcs	r7, r7
 8000a36:	427f      	negs	r7, r7
 8000a38:	46b9      	mov	r9, r7
 8000a3a:	0017      	movs	r7, r2
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1abf      	subs	r7, r7, r2
 8000a40:	023a      	lsls	r2, r7, #8
 8000a42:	d500      	bpl.n	8000a46 <__aeabi_dadd+0x38e>
 8000a44:	e08d      	b.n	8000b62 <__aeabi_dadd+0x4aa>
 8000a46:	0023      	movs	r3, r4
 8000a48:	433b      	orrs	r3, r7
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x396>
 8000a4c:	e68a      	b.n	8000764 <__aeabi_dadd+0xac>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e761      	b.n	8000918 <__aeabi_dadd+0x260>
 8000a54:	4cb4      	ldr	r4, [pc, #720]	; (8000d28 <__aeabi_dadd+0x670>)
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x3a4>
 8000a5a:	e0ad      	b.n	8000bb8 <__aeabi_dadd+0x500>
 8000a5c:	2480      	movs	r4, #128	; 0x80
 8000a5e:	0424      	lsls	r4, r4, #16
 8000a60:	4320      	orrs	r0, r4
 8000a62:	4664      	mov	r4, ip
 8000a64:	2c38      	cmp	r4, #56	; 0x38
 8000a66:	dc3d      	bgt.n	8000ae4 <__aeabi_dadd+0x42c>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	2c1f      	cmp	r4, #31
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_dadd+0x3b8>
 8000a6e:	e0b7      	b.n	8000be0 <__aeabi_dadd+0x528>
 8000a70:	2520      	movs	r5, #32
 8000a72:	001e      	movs	r6, r3
 8000a74:	1b2d      	subs	r5, r5, r4
 8000a76:	0004      	movs	r4, r0
 8000a78:	40ab      	lsls	r3, r5
 8000a7a:	40ac      	lsls	r4, r5
 8000a7c:	40d6      	lsrs	r6, r2
 8000a7e:	40d0      	lsrs	r0, r2
 8000a80:	4642      	mov	r2, r8
 8000a82:	1e5d      	subs	r5, r3, #1
 8000a84:	41ab      	sbcs	r3, r5
 8000a86:	4334      	orrs	r4, r6
 8000a88:	1a12      	subs	r2, r2, r0
 8000a8a:	4690      	mov	r8, r2
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	e02c      	b.n	8000aea <__aeabi_dadd+0x432>
 8000a90:	0742      	lsls	r2, r0, #29
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	08c0      	lsrs	r0, r0, #3
 8000a98:	e73b      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000a9a:	185c      	adds	r4, r3, r1
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	419b      	sbcs	r3, r3
 8000aa0:	4440      	add	r0, r8
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	18c7      	adds	r7, r0, r3
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	023b      	lsls	r3, r7, #8
 8000aaa:	d400      	bmi.n	8000aae <__aeabi_dadd+0x3f6>
 8000aac:	e729      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000aae:	2602      	movs	r6, #2
 8000ab0:	4a9e      	ldr	r2, [pc, #632]	; (8000d2c <__aeabi_dadd+0x674>)
 8000ab2:	0863      	lsrs	r3, r4, #1
 8000ab4:	4017      	ands	r7, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4014      	ands	r4, r2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	07fb      	lsls	r3, r7, #31
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	087f      	lsrs	r7, r7, #1
 8000ac2:	e673      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	3a20      	subs	r2, #32
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	4662      	mov	r2, ip
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d005      	beq.n	8000adc <__aeabi_dadd+0x424>
 8000ad0:	4667      	mov	r7, ip
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	1bd2      	subs	r2, r2, r7
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	4097      	lsls	r7, r2
 8000ada:	4339      	orrs	r1, r7
 8000adc:	1e4a      	subs	r2, r1, #1
 8000ade:	4191      	sbcs	r1, r2
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	e635      	b.n	8000750 <__aeabi_dadd+0x98>
 8000ae4:	4303      	orrs	r3, r0
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4183      	sbcs	r3, r0
 8000aea:	1acc      	subs	r4, r1, r3
 8000aec:	42a1      	cmp	r1, r4
 8000aee:	41bf      	sbcs	r7, r7
 8000af0:	4643      	mov	r3, r8
 8000af2:	427f      	negs	r7, r7
 8000af4:	4655      	mov	r5, sl
 8000af6:	464e      	mov	r6, r9
 8000af8:	1bdf      	subs	r7, r3, r7
 8000afa:	e62e      	b.n	800075a <__aeabi_dadd+0xa2>
 8000afc:	0002      	movs	r2, r0
 8000afe:	431a      	orrs	r2, r3
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dadd+0x44c>
 8000b02:	e0bd      	b.n	8000c80 <__aeabi_dadd+0x5c8>
 8000b04:	4662      	mov	r2, ip
 8000b06:	4664      	mov	r4, ip
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	2c01      	cmp	r4, #1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x458>
 8000b0e:	e0e5      	b.n	8000cdc <__aeabi_dadd+0x624>
 8000b10:	4c85      	ldr	r4, [pc, #532]	; (8000d28 <__aeabi_dadd+0x670>)
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d058      	beq.n	8000bc8 <__aeabi_dadd+0x510>
 8000b16:	4694      	mov	ip, r2
 8000b18:	e749      	b.n	80009ae <__aeabi_dadd+0x2f6>
 8000b1a:	4664      	mov	r4, ip
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	1b12      	subs	r2, r2, r4
 8000b20:	4644      	mov	r4, r8
 8000b22:	4094      	lsls	r4, r2
 8000b24:	000f      	movs	r7, r1
 8000b26:	46a1      	mov	r9, r4
 8000b28:	4664      	mov	r4, ip
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	40e7      	lsrs	r7, r4
 8000b2e:	464c      	mov	r4, r9
 8000b30:	1e4a      	subs	r2, r1, #1
 8000b32:	4191      	sbcs	r1, r2
 8000b34:	433c      	orrs	r4, r7
 8000b36:	4642      	mov	r2, r8
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	4661      	mov	r1, ip
 8000b3c:	40ca      	lsrs	r2, r1
 8000b3e:	1880      	adds	r0, r0, r2
 8000b40:	e6f4      	b.n	800092c <__aeabi_dadd+0x274>
 8000b42:	4c79      	ldr	r4, [pc, #484]	; (8000d28 <__aeabi_dadd+0x670>)
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x492>
 8000b48:	e6fd      	b.n	8000946 <__aeabi_dadd+0x28e>
 8000b4a:	1859      	adds	r1, r3, r1
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	419b      	sbcs	r3, r3
 8000b50:	4440      	add	r0, r8
 8000b52:	425f      	negs	r7, r3
 8000b54:	19c7      	adds	r7, r0, r7
 8000b56:	07fc      	lsls	r4, r7, #31
 8000b58:	0849      	lsrs	r1, r1, #1
 8000b5a:	0016      	movs	r6, r2
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	087f      	lsrs	r7, r7, #1
 8000b60:	e6cf      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000b62:	1acc      	subs	r4, r1, r3
 8000b64:	42a1      	cmp	r1, r4
 8000b66:	41bf      	sbcs	r7, r7
 8000b68:	4643      	mov	r3, r8
 8000b6a:	427f      	negs	r7, r7
 8000b6c:	1a18      	subs	r0, r3, r0
 8000b6e:	4655      	mov	r5, sl
 8000b70:	1bc7      	subs	r7, r0, r7
 8000b72:	e5f7      	b.n	8000764 <__aeabi_dadd+0xac>
 8000b74:	08c9      	lsrs	r1, r1, #3
 8000b76:	077b      	lsls	r3, r7, #29
 8000b78:	4655      	mov	r5, sl
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	08f8      	lsrs	r0, r7, #3
 8000b7e:	e6c8      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d000      	beq.n	8000b86 <__aeabi_dadd+0x4ce>
 8000b84:	e081      	b.n	8000c8a <__aeabi_dadd+0x5d2>
 8000b86:	4643      	mov	r3, r8
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	d115      	bne.n	8000bb8 <__aeabi_dadd+0x500>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	2500      	movs	r5, #0
 8000b90:	0300      	lsls	r0, r0, #12
 8000b92:	e6e3      	b.n	800095c <__aeabi_dadd+0x2a4>
 8000b94:	1a5c      	subs	r4, r3, r1
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	419b      	sbcs	r3, r3
 8000b9a:	1bc7      	subs	r7, r0, r7
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	1aff      	subs	r7, r7, r3
 8000ba2:	e5da      	b.n	800075a <__aeabi_dadd+0xa2>
 8000ba4:	0742      	lsls	r2, r0, #29
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	08c0      	lsrs	r0, r0, #3
 8000bac:	e6d2      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bae:	0742      	lsls	r2, r0, #29
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	e6ac      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000bb8:	4643      	mov	r3, r8
 8000bba:	4642      	mov	r2, r8
 8000bbc:	08c9      	lsrs	r1, r1, #3
 8000bbe:	075b      	lsls	r3, r3, #29
 8000bc0:	4655      	mov	r5, sl
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	08d0      	lsrs	r0, r2, #3
 8000bc6:	e6c5      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bc8:	4643      	mov	r3, r8
 8000bca:	4642      	mov	r2, r8
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	08d0      	lsrs	r0, r2, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000bd6:	4303      	orrs	r3, r0
 8000bd8:	001c      	movs	r4, r3
 8000bda:	1e63      	subs	r3, r4, #1
 8000bdc:	419c      	sbcs	r4, r3
 8000bde:	e6fc      	b.n	80009da <__aeabi_dadd+0x322>
 8000be0:	0002      	movs	r2, r0
 8000be2:	3c20      	subs	r4, #32
 8000be4:	40e2      	lsrs	r2, r4
 8000be6:	0014      	movs	r4, r2
 8000be8:	4662      	mov	r2, ip
 8000bea:	2a20      	cmp	r2, #32
 8000bec:	d003      	beq.n	8000bf6 <__aeabi_dadd+0x53e>
 8000bee:	2540      	movs	r5, #64	; 0x40
 8000bf0:	1aad      	subs	r5, r5, r2
 8000bf2:	40a8      	lsls	r0, r5
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	1e58      	subs	r0, r3, #1
 8000bf8:	4183      	sbcs	r3, r0
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	e775      	b.n	8000aea <__aeabi_dadd+0x432>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d0e2      	beq.n	8000bc8 <__aeabi_dadd+0x510>
 8000c02:	003a      	movs	r2, r7
 8000c04:	430a      	orrs	r2, r1
 8000c06:	d0cd      	beq.n	8000ba4 <__aeabi_dadd+0x4ec>
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	08c0      	lsrs	r0, r0, #3
 8000c12:	0312      	lsls	r2, r2, #12
 8000c14:	4210      	tst	r0, r2
 8000c16:	d006      	beq.n	8000c26 <__aeabi_dadd+0x56e>
 8000c18:	08fc      	lsrs	r4, r7, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d103      	bne.n	8000c26 <__aeabi_dadd+0x56e>
 8000c1e:	0020      	movs	r0, r4
 8000c20:	08cb      	lsrs	r3, r1, #3
 8000c22:	077a      	lsls	r2, r7, #29
 8000c24:	4313      	orrs	r3, r2
 8000c26:	0f5a      	lsrs	r2, r3, #29
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	0752      	lsls	r2, r2, #29
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	e690      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000c32:	4643      	mov	r3, r8
 8000c34:	430b      	orrs	r3, r1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x582>
 8000c38:	e709      	b.n	8000a4e <__aeabi_dadd+0x396>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	08c9      	lsrs	r1, r1, #3
 8000c40:	075b      	lsls	r3, r3, #29
 8000c42:	4655      	mov	r5, sl
 8000c44:	430b      	orrs	r3, r1
 8000c46:	08d0      	lsrs	r0, r2, #3
 8000c48:	e666      	b.n	8000918 <__aeabi_dadd+0x260>
 8000c4a:	1acc      	subs	r4, r1, r3
 8000c4c:	42a1      	cmp	r1, r4
 8000c4e:	4189      	sbcs	r1, r1
 8000c50:	1a3f      	subs	r7, r7, r0
 8000c52:	4249      	negs	r1, r1
 8000c54:	4655      	mov	r5, sl
 8000c56:	2601      	movs	r6, #1
 8000c58:	1a7f      	subs	r7, r7, r1
 8000c5a:	e57e      	b.n	800075a <__aeabi_dadd+0xa2>
 8000c5c:	4642      	mov	r2, r8
 8000c5e:	1a5c      	subs	r4, r3, r1
 8000c60:	1a87      	subs	r7, r0, r2
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	4192      	sbcs	r2, r2
 8000c66:	4252      	negs	r2, r2
 8000c68:	1abf      	subs	r7, r7, r2
 8000c6a:	023a      	lsls	r2, r7, #8
 8000c6c:	d53d      	bpl.n	8000cea <__aeabi_dadd+0x632>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	4643      	mov	r3, r8
 8000c76:	4249      	negs	r1, r1
 8000c78:	1a1f      	subs	r7, r3, r0
 8000c7a:	4655      	mov	r5, sl
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e595      	b.n	80007ac <__aeabi_dadd+0xf4>
 8000c80:	077b      	lsls	r3, r7, #29
 8000c82:	08c9      	lsrs	r1, r1, #3
 8000c84:	430b      	orrs	r3, r1
 8000c86:	08f8      	lsrs	r0, r7, #3
 8000c88:	e643      	b.n	8000912 <__aeabi_dadd+0x25a>
 8000c8a:	4644      	mov	r4, r8
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	430c      	orrs	r4, r1
 8000c90:	d130      	bne.n	8000cf4 <__aeabi_dadd+0x63c>
 8000c92:	0742      	lsls	r2, r0, #29
 8000c94:	4313      	orrs	r3, r2
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	e65c      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000c9a:	077b      	lsls	r3, r7, #29
 8000c9c:	08c9      	lsrs	r1, r1, #3
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	08f8      	lsrs	r0, r7, #3
 8000ca2:	e639      	b.n	8000918 <__aeabi_dadd+0x260>
 8000ca4:	185c      	adds	r4, r3, r1
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	419b      	sbcs	r3, r3
 8000caa:	4440      	add	r0, r8
 8000cac:	425b      	negs	r3, r3
 8000cae:	18c7      	adds	r7, r0, r3
 8000cb0:	023b      	lsls	r3, r7, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x5fe>
 8000cb4:	e625      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <__aeabi_dadd+0x674>)
 8000cb8:	2601      	movs	r6, #1
 8000cba:	401f      	ands	r7, r3
 8000cbc:	e621      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cbe:	0004      	movs	r4, r0
 8000cc0:	3a20      	subs	r2, #32
 8000cc2:	40d4      	lsrs	r4, r2
 8000cc4:	4662      	mov	r2, ip
 8000cc6:	2a20      	cmp	r2, #32
 8000cc8:	d004      	beq.n	8000cd4 <__aeabi_dadd+0x61c>
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	4666      	mov	r6, ip
 8000cce:	1b92      	subs	r2, r2, r6
 8000cd0:	4090      	lsls	r0, r2
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	4193      	sbcs	r3, r2
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	e67e      	b.n	80009da <__aeabi_dadd+0x322>
 8000cdc:	185c      	adds	r4, r3, r1
 8000cde:	428c      	cmp	r4, r1
 8000ce0:	4189      	sbcs	r1, r1
 8000ce2:	4440      	add	r0, r8
 8000ce4:	4249      	negs	r1, r1
 8000ce6:	1847      	adds	r7, r0, r1
 8000ce8:	e6dd      	b.n	8000aa6 <__aeabi_dadd+0x3ee>
 8000cea:	0023      	movs	r3, r4
 8000cec:	433b      	orrs	r3, r7
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x63a>
 8000cf0:	e6ad      	b.n	8000a4e <__aeabi_dadd+0x396>
 8000cf2:	e606      	b.n	8000902 <__aeabi_dadd+0x24a>
 8000cf4:	0744      	lsls	r4, r0, #29
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	2480      	movs	r4, #128	; 0x80
 8000cfa:	08c0      	lsrs	r0, r0, #3
 8000cfc:	0324      	lsls	r4, r4, #12
 8000cfe:	4220      	tst	r0, r4
 8000d00:	d008      	beq.n	8000d14 <__aeabi_dadd+0x65c>
 8000d02:	4642      	mov	r2, r8
 8000d04:	08d6      	lsrs	r6, r2, #3
 8000d06:	4226      	tst	r6, r4
 8000d08:	d104      	bne.n	8000d14 <__aeabi_dadd+0x65c>
 8000d0a:	4655      	mov	r5, sl
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	08cb      	lsrs	r3, r1, #3
 8000d10:	0751      	lsls	r1, r2, #29
 8000d12:	430b      	orrs	r3, r1
 8000d14:	0f5a      	lsrs	r2, r3, #29
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0752      	lsls	r2, r2, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	e619      	b.n	8000954 <__aeabi_dadd+0x29c>
 8000d20:	2300      	movs	r3, #0
 8000d22:	4a01      	ldr	r2, [pc, #4]	; (8000d28 <__aeabi_dadd+0x670>)
 8000d24:	001f      	movs	r7, r3
 8000d26:	e55e      	b.n	80007e6 <__aeabi_dadd+0x12e>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	ff7fffff 	.word	0xff7fffff

08000d30 <__aeabi_ddiv>:
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	4657      	mov	r7, sl
 8000d34:	464e      	mov	r6, r9
 8000d36:	4645      	mov	r5, r8
 8000d38:	46de      	mov	lr, fp
 8000d3a:	b5e0      	push	{r5, r6, r7, lr}
 8000d3c:	4681      	mov	r9, r0
 8000d3e:	0005      	movs	r5, r0
 8000d40:	030c      	lsls	r4, r1, #12
 8000d42:	0048      	lsls	r0, r1, #1
 8000d44:	4692      	mov	sl, r2
 8000d46:	001f      	movs	r7, r3
 8000d48:	b085      	sub	sp, #20
 8000d4a:	0b24      	lsrs	r4, r4, #12
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	0fce      	lsrs	r6, r1, #31
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x26>
 8000d54:	e156      	b.n	8001004 <__aeabi_ddiv+0x2d4>
 8000d56:	4bd4      	ldr	r3, [pc, #848]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000d58:	4298      	cmp	r0, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0x2e>
 8000d5c:	e172      	b.n	8001044 <__aeabi_ddiv+0x314>
 8000d5e:	0f6b      	lsrs	r3, r5, #29
 8000d60:	00e4      	lsls	r4, r4, #3
 8000d62:	431c      	orrs	r4, r3
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	4323      	orrs	r3, r4
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4bcf      	ldr	r3, [pc, #828]	; (80010ac <__aeabi_ddiv+0x37c>)
 8000d6e:	00ed      	lsls	r5, r5, #3
 8000d70:	469b      	mov	fp, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	4699      	mov	r9, r3
 8000d76:	4483      	add	fp, r0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	033c      	lsls	r4, r7, #12
 8000d7c:	007b      	lsls	r3, r7, #1
 8000d7e:	4650      	mov	r0, sl
 8000d80:	0b24      	lsrs	r4, r4, #12
 8000d82:	0d5b      	lsrs	r3, r3, #21
 8000d84:	0fff      	lsrs	r7, r7, #31
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x5c>
 8000d8a:	e11f      	b.n	8000fcc <__aeabi_ddiv+0x29c>
 8000d8c:	4ac6      	ldr	r2, [pc, #792]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x64>
 8000d92:	e162      	b.n	800105a <__aeabi_ddiv+0x32a>
 8000d94:	49c5      	ldr	r1, [pc, #788]	; (80010ac <__aeabi_ddiv+0x37c>)
 8000d96:	0f42      	lsrs	r2, r0, #29
 8000d98:	468c      	mov	ip, r1
 8000d9a:	00e4      	lsls	r4, r4, #3
 8000d9c:	4659      	mov	r1, fp
 8000d9e:	4314      	orrs	r4, r2
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4463      	add	r3, ip
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	4314      	orrs	r4, r2
 8000daa:	469b      	mov	fp, r3
 8000dac:	00c2      	lsls	r2, r0, #3
 8000dae:	2000      	movs	r0, #0
 8000db0:	0033      	movs	r3, r6
 8000db2:	407b      	eors	r3, r7
 8000db4:	469a      	mov	sl, r3
 8000db6:	464b      	mov	r3, r9
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d827      	bhi.n	8000e0c <__aeabi_ddiv+0xdc>
 8000dbc:	49bc      	ldr	r1, [pc, #752]	; (80010b0 <__aeabi_ddiv+0x380>)
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	58cb      	ldr	r3, [r1, r3]
 8000dc2:	469f      	mov	pc, r3
 8000dc4:	46b2      	mov	sl, r6
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d016      	beq.n	8000dfa <__aeabi_ddiv+0xca>
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0xa2>
 8000dd0:	e28e      	b.n	80012f0 <__aeabi_ddiv+0x5c0>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_ddiv+0xa8>
 8000dd6:	e0d9      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2400      	movs	r4, #0
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4652      	mov	r2, sl
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07d2      	lsls	r2, r2, #31
 8000de6:	4313      	orrs	r3, r2
 8000de8:	0028      	movs	r0, r5
 8000dea:	0019      	movs	r1, r3
 8000dec:	b005      	add	sp, #20
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	4baa      	ldr	r3, [pc, #680]	; (80010a8 <__aeabi_ddiv+0x378>)
 8000e00:	e7ed      	b.n	8000dde <__aeabi_ddiv+0xae>
 8000e02:	46ba      	mov	sl, r7
 8000e04:	46a0      	mov	r8, r4
 8000e06:	0015      	movs	r5, r2
 8000e08:	9000      	str	r0, [sp, #0]
 8000e0a:	e7dc      	b.n	8000dc6 <__aeabi_ddiv+0x96>
 8000e0c:	4544      	cmp	r4, r8
 8000e0e:	d200      	bcs.n	8000e12 <__aeabi_ddiv+0xe2>
 8000e10:	e1c7      	b.n	80011a2 <__aeabi_ddiv+0x472>
 8000e12:	d100      	bne.n	8000e16 <__aeabi_ddiv+0xe6>
 8000e14:	e1c2      	b.n	800119c <__aeabi_ddiv+0x46c>
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	002e      	movs	r6, r5
 8000e1e:	4640      	mov	r0, r8
 8000e20:	2500      	movs	r5, #0
 8000e22:	44e3      	add	fp, ip
 8000e24:	0223      	lsls	r3, r4, #8
 8000e26:	0e14      	lsrs	r4, r2, #24
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	0423      	lsls	r3, r4, #16
 8000e30:	0c1f      	lsrs	r7, r3, #16
 8000e32:	0212      	lsls	r2, r2, #8
 8000e34:	4649      	mov	r1, r9
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	9701      	str	r7, [sp, #4]
 8000e3a:	f7ff f9f5 	bl	8000228 <__aeabi_uidivmod>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	437a      	muls	r2, r7
 8000e42:	040b      	lsls	r3, r1, #16
 8000e44:	0c31      	lsrs	r1, r6, #16
 8000e46:	4680      	mov	r8, r0
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	d907      	bls.n	8000e5e <__aeabi_ddiv+0x12e>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	425b      	negs	r3, r3
 8000e52:	469c      	mov	ip, r3
 8000e54:	1909      	adds	r1, r1, r4
 8000e56:	44e0      	add	r8, ip
 8000e58:	428c      	cmp	r4, r1
 8000e5a:	d800      	bhi.n	8000e5e <__aeabi_ddiv+0x12e>
 8000e5c:	e207      	b.n	800126e <__aeabi_ddiv+0x53e>
 8000e5e:	1a88      	subs	r0, r1, r2
 8000e60:	4649      	mov	r1, r9
 8000e62:	f7ff f9e1 	bl	8000228 <__aeabi_uidivmod>
 8000e66:	0409      	lsls	r1, r1, #16
 8000e68:	468c      	mov	ip, r1
 8000e6a:	0431      	lsls	r1, r6, #16
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	9a01      	ldr	r2, [sp, #4]
 8000e70:	0c09      	lsrs	r1, r1, #16
 8000e72:	4342      	muls	r2, r0
 8000e74:	0003      	movs	r3, r0
 8000e76:	4331      	orrs	r1, r6
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d904      	bls.n	8000e86 <__aeabi_ddiv+0x156>
 8000e7c:	1909      	adds	r1, r1, r4
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	428c      	cmp	r4, r1
 8000e82:	d800      	bhi.n	8000e86 <__aeabi_ddiv+0x156>
 8000e84:	e1ed      	b.n	8001262 <__aeabi_ddiv+0x532>
 8000e86:	1a88      	subs	r0, r1, r2
 8000e88:	4642      	mov	r2, r8
 8000e8a:	0412      	lsls	r2, r2, #16
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	4690      	mov	r8, r2
 8000e90:	4641      	mov	r1, r8
 8000e92:	9b00      	ldr	r3, [sp, #0]
 8000e94:	040e      	lsls	r6, r1, #16
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	001f      	movs	r7, r3
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	9b00      	ldr	r3, [sp, #0]
 8000e9e:	0c36      	lsrs	r6, r6, #16
 8000ea0:	041b      	lsls	r3, r3, #16
 8000ea2:	0c19      	lsrs	r1, r3, #16
 8000ea4:	000b      	movs	r3, r1
 8000ea6:	4373      	muls	r3, r6
 8000ea8:	0c12      	lsrs	r2, r2, #16
 8000eaa:	437e      	muls	r6, r7
 8000eac:	9103      	str	r1, [sp, #12]
 8000eae:	4351      	muls	r1, r2
 8000eb0:	437a      	muls	r2, r7
 8000eb2:	0c1f      	lsrs	r7, r3, #16
 8000eb4:	46bc      	mov	ip, r7
 8000eb6:	1876      	adds	r6, r6, r1
 8000eb8:	4466      	add	r6, ip
 8000eba:	42b1      	cmp	r1, r6
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_ddiv+0x196>
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	4462      	add	r2, ip
 8000ec6:	0c31      	lsrs	r1, r6, #16
 8000ec8:	188a      	adds	r2, r1, r2
 8000eca:	0431      	lsls	r1, r6, #16
 8000ecc:	041e      	lsls	r6, r3, #16
 8000ece:	0c36      	lsrs	r6, r6, #16
 8000ed0:	198e      	adds	r6, r1, r6
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d302      	bcc.n	8000edc <__aeabi_ddiv+0x1ac>
 8000ed6:	d112      	bne.n	8000efe <__aeabi_ddiv+0x1ce>
 8000ed8:	42b5      	cmp	r5, r6
 8000eda:	d210      	bcs.n	8000efe <__aeabi_ddiv+0x1ce>
 8000edc:	4643      	mov	r3, r8
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	4465      	add	r5, ip
 8000ee6:	001f      	movs	r7, r3
 8000ee8:	429d      	cmp	r5, r3
 8000eea:	419b      	sbcs	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	191b      	adds	r3, r3, r4
 8000ef0:	18c0      	adds	r0, r0, r3
 8000ef2:	4284      	cmp	r4, r0
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x1c8>
 8000ef6:	e1a0      	b.n	800123a <__aeabi_ddiv+0x50a>
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x1cc>
 8000efa:	e19b      	b.n	8001234 <__aeabi_ddiv+0x504>
 8000efc:	4688      	mov	r8, r1
 8000efe:	1bae      	subs	r6, r5, r6
 8000f00:	42b5      	cmp	r5, r6
 8000f02:	41ad      	sbcs	r5, r5
 8000f04:	1a80      	subs	r0, r0, r2
 8000f06:	426d      	negs	r5, r5
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0x1e0>
 8000f0e:	e1d5      	b.n	80012bc <__aeabi_ddiv+0x58c>
 8000f10:	4649      	mov	r1, r9
 8000f12:	f7ff f989 	bl	8000228 <__aeabi_uidivmod>
 8000f16:	9a01      	ldr	r2, [sp, #4]
 8000f18:	040b      	lsls	r3, r1, #16
 8000f1a:	4342      	muls	r2, r0
 8000f1c:	0c31      	lsrs	r1, r6, #16
 8000f1e:	0005      	movs	r5, r0
 8000f20:	4319      	orrs	r1, r3
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d900      	bls.n	8000f28 <__aeabi_ddiv+0x1f8>
 8000f26:	e16c      	b.n	8001202 <__aeabi_ddiv+0x4d2>
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	f7ff f97c 	bl	8000228 <__aeabi_uidivmod>
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	0436      	lsls	r6, r6, #16
 8000f34:	4342      	muls	r2, r0
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	0c36      	lsrs	r6, r6, #16
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	430e      	orrs	r6, r1
 8000f3e:	42b2      	cmp	r2, r6
 8000f40:	d900      	bls.n	8000f44 <__aeabi_ddiv+0x214>
 8000f42:	e153      	b.n	80011ec <__aeabi_ddiv+0x4bc>
 8000f44:	9803      	ldr	r0, [sp, #12]
 8000f46:	1ab6      	subs	r6, r6, r2
 8000f48:	0002      	movs	r2, r0
 8000f4a:	042d      	lsls	r5, r5, #16
 8000f4c:	431d      	orrs	r5, r3
 8000f4e:	9f02      	ldr	r7, [sp, #8]
 8000f50:	042b      	lsls	r3, r5, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	435a      	muls	r2, r3
 8000f56:	437b      	muls	r3, r7
 8000f58:	469c      	mov	ip, r3
 8000f5a:	0c29      	lsrs	r1, r5, #16
 8000f5c:	4348      	muls	r0, r1
 8000f5e:	0c13      	lsrs	r3, r2, #16
 8000f60:	4484      	add	ip, r0
 8000f62:	4463      	add	r3, ip
 8000f64:	4379      	muls	r1, r7
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d903      	bls.n	8000f72 <__aeabi_ddiv+0x242>
 8000f6a:	2080      	movs	r0, #128	; 0x80
 8000f6c:	0240      	lsls	r0, r0, #9
 8000f6e:	4684      	mov	ip, r0
 8000f70:	4461      	add	r1, ip
 8000f72:	0c18      	lsrs	r0, r3, #16
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	1841      	adds	r1, r0, r1
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x254>
 8000f82:	e0ff      	b.n	8001184 <__aeabi_ddiv+0x454>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x258>
 8000f86:	e0fa      	b.n	800117e <__aeabi_ddiv+0x44e>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <__aeabi_ddiv+0x384>)
 8000f8e:	445a      	add	r2, fp
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x266>
 8000f94:	e0aa      	b.n	80010ec <__aeabi_ddiv+0x3bc>
 8000f96:	076b      	lsls	r3, r5, #29
 8000f98:	d000      	beq.n	8000f9c <__aeabi_ddiv+0x26c>
 8000f9a:	e13d      	b.n	8001218 <__aeabi_ddiv+0x4e8>
 8000f9c:	08ed      	lsrs	r5, r5, #3
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	01db      	lsls	r3, r3, #7
 8000fa2:	d506      	bpl.n	8000fb2 <__aeabi_ddiv+0x282>
 8000fa4:	4642      	mov	r2, r8
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <__aeabi_ddiv+0x388>)
 8000fa8:	401a      	ands	r2, r3
 8000faa:	4690      	mov	r8, r2
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	00d2      	lsls	r2, r2, #3
 8000fb0:	445a      	add	r2, fp
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <__aeabi_ddiv+0x38c>)
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_ddiv+0x28a>
 8000fb8:	e71f      	b.n	8000dfa <__aeabi_ddiv+0xca>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	075b      	lsls	r3, r3, #29
 8000fbe:	431d      	orrs	r5, r3
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	0552      	lsls	r2, r2, #21
 8000fc4:	025c      	lsls	r4, r3, #9
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	0d53      	lsrs	r3, r2, #21
 8000fca:	e708      	b.n	8000dde <__aeabi_ddiv+0xae>
 8000fcc:	4652      	mov	r2, sl
 8000fce:	4322      	orrs	r2, r4
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_ddiv+0x2a4>
 8000fd2:	e07b      	b.n	80010cc <__aeabi_ddiv+0x39c>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x2aa>
 8000fd8:	e0fa      	b.n	80011d0 <__aeabi_ddiv+0x4a0>
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f001 f92c 	bl	8002238 <__clzsi2>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	3a0b      	subs	r2, #11
 8000fe4:	231d      	movs	r3, #29
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	3908      	subs	r1, #8
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	408c      	lsls	r4, r1
 8000ff2:	4314      	orrs	r4, r2
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	408a      	lsls	r2, r1
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <__aeabi_ddiv+0x390>)
 8000ffa:	4458      	add	r0, fp
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	4483      	add	fp, r0
 8001000:	2000      	movs	r0, #0
 8001002:	e6d5      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001004:	464b      	mov	r3, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d044      	beq.n	8001096 <__aeabi_ddiv+0x366>
 800100c:	2c00      	cmp	r4, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x2e2>
 8001010:	e0ce      	b.n	80011b0 <__aeabi_ddiv+0x480>
 8001012:	0020      	movs	r0, r4
 8001014:	f001 f910 	bl	8002238 <__clzsi2>
 8001018:	0001      	movs	r1, r0
 800101a:	0002      	movs	r2, r0
 800101c:	390b      	subs	r1, #11
 800101e:	231d      	movs	r3, #29
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	4649      	mov	r1, r9
 8001024:	0010      	movs	r0, r2
 8001026:	40d9      	lsrs	r1, r3
 8001028:	3808      	subs	r0, #8
 800102a:	4084      	lsls	r4, r0
 800102c:	000b      	movs	r3, r1
 800102e:	464d      	mov	r5, r9
 8001030:	4323      	orrs	r3, r4
 8001032:	4698      	mov	r8, r3
 8001034:	4085      	lsls	r5, r0
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <__aeabi_ddiv+0x394>)
 8001038:	1a83      	subs	r3, r0, r2
 800103a:	469b      	mov	fp, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4699      	mov	r9, r3
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	e69a      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 8001044:	464b      	mov	r3, r9
 8001046:	4323      	orrs	r3, r4
 8001048:	4698      	mov	r8, r3
 800104a:	d11d      	bne.n	8001088 <__aeabi_ddiv+0x358>
 800104c:	2308      	movs	r3, #8
 800104e:	4699      	mov	r9, r3
 8001050:	3b06      	subs	r3, #6
 8001052:	2500      	movs	r5, #0
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e68f      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 800105a:	4652      	mov	r2, sl
 800105c:	4322      	orrs	r2, r4
 800105e:	d109      	bne.n	8001074 <__aeabi_ddiv+0x344>
 8001060:	2302      	movs	r3, #2
 8001062:	4649      	mov	r1, r9
 8001064:	4319      	orrs	r1, r3
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <__aeabi_ddiv+0x398>)
 8001068:	4689      	mov	r9, r1
 800106a:	469c      	mov	ip, r3
 800106c:	2400      	movs	r4, #0
 800106e:	2002      	movs	r0, #2
 8001070:	44e3      	add	fp, ip
 8001072:	e69d      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001074:	2303      	movs	r3, #3
 8001076:	464a      	mov	r2, r9
 8001078:	431a      	orrs	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <__aeabi_ddiv+0x398>)
 800107c:	4691      	mov	r9, r2
 800107e:	469c      	mov	ip, r3
 8001080:	4652      	mov	r2, sl
 8001082:	2003      	movs	r0, #3
 8001084:	44e3      	add	fp, ip
 8001086:	e693      	b.n	8000db0 <__aeabi_ddiv+0x80>
 8001088:	230c      	movs	r3, #12
 800108a:	4699      	mov	r9, r3
 800108c:	3b09      	subs	r3, #9
 800108e:	46a0      	mov	r8, r4
 8001090:	4683      	mov	fp, r0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e671      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 8001096:	2304      	movs	r3, #4
 8001098:	4699      	mov	r9, r3
 800109a:	2300      	movs	r3, #0
 800109c:	469b      	mov	fp, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	2500      	movs	r5, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	e669      	b.n	8000d7a <__aeabi_ddiv+0x4a>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	fffffc01 	.word	0xfffffc01
 80010b0:	080081d8 	.word	0x080081d8
 80010b4:	000003ff 	.word	0x000003ff
 80010b8:	feffffff 	.word	0xfeffffff
 80010bc:	000007fe 	.word	0x000007fe
 80010c0:	000003f3 	.word	0x000003f3
 80010c4:	fffffc0d 	.word	0xfffffc0d
 80010c8:	fffff801 	.word	0xfffff801
 80010cc:	4649      	mov	r1, r9
 80010ce:	2301      	movs	r3, #1
 80010d0:	4319      	orrs	r1, r3
 80010d2:	4689      	mov	r9, r1
 80010d4:	2400      	movs	r4, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	e66a      	b.n	8000db0 <__aeabi_ddiv+0x80>
 80010da:	2300      	movs	r3, #0
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	469a      	mov	sl, r3
 80010e0:	2500      	movs	r5, #0
 80010e2:	4b8a      	ldr	r3, [pc, #552]	; (800130c <__aeabi_ddiv+0x5dc>)
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	e67a      	b.n	8000dde <__aeabi_ddiv+0xae>
 80010e8:	2501      	movs	r5, #1
 80010ea:	426d      	negs	r5, r5
 80010ec:	2301      	movs	r3, #1
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	2b38      	cmp	r3, #56	; 0x38
 80010f2:	dd00      	ble.n	80010f6 <__aeabi_ddiv+0x3c6>
 80010f4:	e670      	b.n	8000dd8 <__aeabi_ddiv+0xa8>
 80010f6:	2b1f      	cmp	r3, #31
 80010f8:	dc00      	bgt.n	80010fc <__aeabi_ddiv+0x3cc>
 80010fa:	e0bf      	b.n	800127c <__aeabi_ddiv+0x54c>
 80010fc:	211f      	movs	r1, #31
 80010fe:	4249      	negs	r1, r1
 8001100:	1a8a      	subs	r2, r1, r2
 8001102:	4641      	mov	r1, r8
 8001104:	40d1      	lsrs	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	2b20      	cmp	r3, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_ddiv+0x3e6>
 800110c:	4641      	mov	r1, r8
 800110e:	4b80      	ldr	r3, [pc, #512]	; (8001310 <__aeabi_ddiv+0x5e0>)
 8001110:	445b      	add	r3, fp
 8001112:	4099      	lsls	r1, r3
 8001114:	430d      	orrs	r5, r1
 8001116:	1e6b      	subs	r3, r5, #1
 8001118:	419d      	sbcs	r5, r3
 800111a:	2307      	movs	r3, #7
 800111c:	432a      	orrs	r2, r5
 800111e:	001d      	movs	r5, r3
 8001120:	2400      	movs	r4, #0
 8001122:	4015      	ands	r5, r2
 8001124:	4213      	tst	r3, r2
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x3fa>
 8001128:	e0d4      	b.n	80012d4 <__aeabi_ddiv+0x5a4>
 800112a:	210f      	movs	r1, #15
 800112c:	2300      	movs	r3, #0
 800112e:	4011      	ands	r1, r2
 8001130:	2904      	cmp	r1, #4
 8001132:	d100      	bne.n	8001136 <__aeabi_ddiv+0x406>
 8001134:	e0cb      	b.n	80012ce <__aeabi_ddiv+0x59e>
 8001136:	1d11      	adds	r1, r2, #4
 8001138:	4291      	cmp	r1, r2
 800113a:	4192      	sbcs	r2, r2
 800113c:	4252      	negs	r2, r2
 800113e:	189b      	adds	r3, r3, r2
 8001140:	000a      	movs	r2, r1
 8001142:	0219      	lsls	r1, r3, #8
 8001144:	d400      	bmi.n	8001148 <__aeabi_ddiv+0x418>
 8001146:	e0c2      	b.n	80012ce <__aeabi_ddiv+0x59e>
 8001148:	2301      	movs	r3, #1
 800114a:	2400      	movs	r4, #0
 800114c:	2500      	movs	r5, #0
 800114e:	e646      	b.n	8000dde <__aeabi_ddiv+0xae>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	4641      	mov	r1, r8
 8001154:	031b      	lsls	r3, r3, #12
 8001156:	4219      	tst	r1, r3
 8001158:	d008      	beq.n	800116c <__aeabi_ddiv+0x43c>
 800115a:	421c      	tst	r4, r3
 800115c:	d106      	bne.n	800116c <__aeabi_ddiv+0x43c>
 800115e:	431c      	orrs	r4, r3
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	46ba      	mov	sl, r7
 8001164:	0015      	movs	r5, r2
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <__aeabi_ddiv+0x5dc>)
 8001168:	0b24      	lsrs	r4, r4, #12
 800116a:	e638      	b.n	8000dde <__aeabi_ddiv+0xae>
 800116c:	2480      	movs	r4, #128	; 0x80
 800116e:	4643      	mov	r3, r8
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	431c      	orrs	r4, r3
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	46b2      	mov	sl, r6
 8001178:	4b64      	ldr	r3, [pc, #400]	; (800130c <__aeabi_ddiv+0x5dc>)
 800117a:	0b24      	lsrs	r4, r4, #12
 800117c:	e62f      	b.n	8000dde <__aeabi_ddiv+0xae>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x454>
 8001182:	e703      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 8001184:	19a6      	adds	r6, r4, r6
 8001186:	1e68      	subs	r0, r5, #1
 8001188:	42a6      	cmp	r6, r4
 800118a:	d200      	bcs.n	800118e <__aeabi_ddiv+0x45e>
 800118c:	e08d      	b.n	80012aa <__aeabi_ddiv+0x57a>
 800118e:	428e      	cmp	r6, r1
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x464>
 8001192:	e0a3      	b.n	80012dc <__aeabi_ddiv+0x5ac>
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x468>
 8001196:	e0b3      	b.n	8001300 <__aeabi_ddiv+0x5d0>
 8001198:	0005      	movs	r5, r0
 800119a:	e6f5      	b.n	8000f88 <__aeabi_ddiv+0x258>
 800119c:	42aa      	cmp	r2, r5
 800119e:	d900      	bls.n	80011a2 <__aeabi_ddiv+0x472>
 80011a0:	e639      	b.n	8000e16 <__aeabi_ddiv+0xe6>
 80011a2:	4643      	mov	r3, r8
 80011a4:	07de      	lsls	r6, r3, #31
 80011a6:	0858      	lsrs	r0, r3, #1
 80011a8:	086b      	lsrs	r3, r5, #1
 80011aa:	431e      	orrs	r6, r3
 80011ac:	07ed      	lsls	r5, r5, #31
 80011ae:	e639      	b.n	8000e24 <__aeabi_ddiv+0xf4>
 80011b0:	4648      	mov	r0, r9
 80011b2:	f001 f841 	bl	8002238 <__clzsi2>
 80011b6:	0001      	movs	r1, r0
 80011b8:	0002      	movs	r2, r0
 80011ba:	3115      	adds	r1, #21
 80011bc:	3220      	adds	r2, #32
 80011be:	291c      	cmp	r1, #28
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_ddiv+0x494>
 80011c2:	e72c      	b.n	800101e <__aeabi_ddiv+0x2ee>
 80011c4:	464b      	mov	r3, r9
 80011c6:	3808      	subs	r0, #8
 80011c8:	4083      	lsls	r3, r0
 80011ca:	2500      	movs	r5, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	e732      	b.n	8001036 <__aeabi_ddiv+0x306>
 80011d0:	f001 f832 	bl	8002238 <__clzsi2>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	3215      	adds	r2, #21
 80011da:	3020      	adds	r0, #32
 80011dc:	2a1c      	cmp	r2, #28
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x4b2>
 80011e0:	e700      	b.n	8000fe4 <__aeabi_ddiv+0x2b4>
 80011e2:	4654      	mov	r4, sl
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	409c      	lsls	r4, r3
 80011ea:	e705      	b.n	8000ff8 <__aeabi_ddiv+0x2c8>
 80011ec:	1936      	adds	r6, r6, r4
 80011ee:	3b01      	subs	r3, #1
 80011f0:	42b4      	cmp	r4, r6
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x4c6>
 80011f4:	e6a6      	b.n	8000f44 <__aeabi_ddiv+0x214>
 80011f6:	42b2      	cmp	r2, r6
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x4cc>
 80011fa:	e6a3      	b.n	8000f44 <__aeabi_ddiv+0x214>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	1936      	adds	r6, r6, r4
 8001200:	e6a0      	b.n	8000f44 <__aeabi_ddiv+0x214>
 8001202:	1909      	adds	r1, r1, r4
 8001204:	3d01      	subs	r5, #1
 8001206:	428c      	cmp	r4, r1
 8001208:	d900      	bls.n	800120c <__aeabi_ddiv+0x4dc>
 800120a:	e68d      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 800120c:	428a      	cmp	r2, r1
 800120e:	d800      	bhi.n	8001212 <__aeabi_ddiv+0x4e2>
 8001210:	e68a      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 8001212:	1e85      	subs	r5, r0, #2
 8001214:	1909      	adds	r1, r1, r4
 8001216:	e687      	b.n	8000f28 <__aeabi_ddiv+0x1f8>
 8001218:	230f      	movs	r3, #15
 800121a:	402b      	ands	r3, r5
 800121c:	2b04      	cmp	r3, #4
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x4f2>
 8001220:	e6bc      	b.n	8000f9c <__aeabi_ddiv+0x26c>
 8001222:	2305      	movs	r3, #5
 8001224:	425b      	negs	r3, r3
 8001226:	42ab      	cmp	r3, r5
 8001228:	419b      	sbcs	r3, r3
 800122a:	3504      	adds	r5, #4
 800122c:	425b      	negs	r3, r3
 800122e:	08ed      	lsrs	r5, r5, #3
 8001230:	4498      	add	r8, r3
 8001232:	e6b4      	b.n	8000f9e <__aeabi_ddiv+0x26e>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x50a>
 8001238:	e660      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 800123a:	4282      	cmp	r2, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x518>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x512>
 8001240:	e65c      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x518>
 8001246:	e659      	b.n	8000efc <__aeabi_ddiv+0x1cc>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64d      	b.n	8000efe <__aeabi_ddiv+0x1ce>
 8001262:	428a      	cmp	r2, r1
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x538>
 8001266:	e60e      	b.n	8000e86 <__aeabi_ddiv+0x156>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1909      	adds	r1, r1, r4
 800126c:	e60b      	b.n	8000e86 <__aeabi_ddiv+0x156>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x544>
 8001272:	e5f4      	b.n	8000e5e <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f0      	b.n	8000e5e <__aeabi_ddiv+0x12e>
 800127c:	4925      	ldr	r1, [pc, #148]	; (8001314 <__aeabi_ddiv+0x5e4>)
 800127e:	0028      	movs	r0, r5
 8001280:	4459      	add	r1, fp
 8001282:	408d      	lsls	r5, r1
 8001284:	4642      	mov	r2, r8
 8001286:	408a      	lsls	r2, r1
 8001288:	1e69      	subs	r1, r5, #1
 800128a:	418d      	sbcs	r5, r1
 800128c:	4641      	mov	r1, r8
 800128e:	40d8      	lsrs	r0, r3
 8001290:	40d9      	lsrs	r1, r3
 8001292:	4302      	orrs	r2, r0
 8001294:	432a      	orrs	r2, r5
 8001296:	000b      	movs	r3, r1
 8001298:	0751      	lsls	r1, r2, #29
 800129a:	d100      	bne.n	800129e <__aeabi_ddiv+0x56e>
 800129c:	e751      	b.n	8001142 <__aeabi_ddiv+0x412>
 800129e:	210f      	movs	r1, #15
 80012a0:	4011      	ands	r1, r2
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d000      	beq.n	80012a8 <__aeabi_ddiv+0x578>
 80012a6:	e746      	b.n	8001136 <__aeabi_ddiv+0x406>
 80012a8:	e74b      	b.n	8001142 <__aeabi_ddiv+0x412>
 80012aa:	0005      	movs	r5, r0
 80012ac:	428e      	cmp	r6, r1
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x582>
 80012b0:	e66a      	b.n	8000f88 <__aeabi_ddiv+0x258>
 80012b2:	9a00      	ldr	r2, [sp, #0]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d000      	beq.n	80012ba <__aeabi_ddiv+0x58a>
 80012b8:	e666      	b.n	8000f88 <__aeabi_ddiv+0x258>
 80012ba:	e667      	b.n	8000f8c <__aeabi_ddiv+0x25c>
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <__aeabi_ddiv+0x5e8>)
 80012be:	445a      	add	r2, fp
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x596>
 80012c4:	e710      	b.n	80010e8 <__aeabi_ddiv+0x3b8>
 80012c6:	2301      	movs	r3, #1
 80012c8:	2500      	movs	r5, #0
 80012ca:	4498      	add	r8, r3
 80012cc:	e667      	b.n	8000f9e <__aeabi_ddiv+0x26e>
 80012ce:	075d      	lsls	r5, r3, #29
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	0b1c      	lsrs	r4, r3, #12
 80012d4:	08d2      	lsrs	r2, r2, #3
 80012d6:	2300      	movs	r3, #0
 80012d8:	4315      	orrs	r5, r2
 80012da:	e580      	b.n	8000dde <__aeabi_ddiv+0xae>
 80012dc:	9800      	ldr	r0, [sp, #0]
 80012de:	3d02      	subs	r5, #2
 80012e0:	0042      	lsls	r2, r0, #1
 80012e2:	4282      	cmp	r2, r0
 80012e4:	41bf      	sbcs	r7, r7
 80012e6:	427f      	negs	r7, r7
 80012e8:	193c      	adds	r4, r7, r4
 80012ea:	1936      	adds	r6, r6, r4
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	e7dd      	b.n	80012ac <__aeabi_ddiv+0x57c>
 80012f0:	2480      	movs	r4, #128	; 0x80
 80012f2:	4643      	mov	r3, r8
 80012f4:	0324      	lsls	r4, r4, #12
 80012f6:	431c      	orrs	r4, r3
 80012f8:	0324      	lsls	r4, r4, #12
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <__aeabi_ddiv+0x5dc>)
 80012fc:	0b24      	lsrs	r4, r4, #12
 80012fe:	e56e      	b.n	8000dde <__aeabi_ddiv+0xae>
 8001300:	9a00      	ldr	r2, [sp, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3ea      	bcc.n	80012dc <__aeabi_ddiv+0x5ac>
 8001306:	0005      	movs	r5, r0
 8001308:	e7d3      	b.n	80012b2 <__aeabi_ddiv+0x582>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff
 8001310:	0000043e 	.word	0x0000043e
 8001314:	0000041e 	.word	0x0000041e
 8001318:	000003ff 	.word	0x000003ff

0800131c <__eqdf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	464e      	mov	r6, r9
 8001320:	4645      	mov	r5, r8
 8001322:	46de      	mov	lr, fp
 8001324:	4657      	mov	r7, sl
 8001326:	4690      	mov	r8, r2
 8001328:	b5e0      	push	{r5, r6, r7, lr}
 800132a:	0017      	movs	r7, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	0005      	movs	r5, r0
 8001332:	4684      	mov	ip, r0
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <__eqdf2+0x80>)
 8001336:	030e      	lsls	r6, r1, #12
 8001338:	004c      	lsls	r4, r1, #1
 800133a:	4691      	mov	r9, r2
 800133c:	005a      	lsls	r2, r3, #1
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	469b      	mov	fp, r3
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	4284      	cmp	r4, r0
 800134c:	d019      	beq.n	8001382 <__eqdf2+0x66>
 800134e:	4282      	cmp	r2, r0
 8001350:	d010      	beq.n	8001374 <__eqdf2+0x58>
 8001352:	2001      	movs	r0, #1
 8001354:	4294      	cmp	r4, r2
 8001356:	d10e      	bne.n	8001376 <__eqdf2+0x5a>
 8001358:	454e      	cmp	r6, r9
 800135a:	d10c      	bne.n	8001376 <__eqdf2+0x5a>
 800135c:	2001      	movs	r0, #1
 800135e:	45c4      	cmp	ip, r8
 8001360:	d109      	bne.n	8001376 <__eqdf2+0x5a>
 8001362:	4559      	cmp	r1, fp
 8001364:	d017      	beq.n	8001396 <__eqdf2+0x7a>
 8001366:	2c00      	cmp	r4, #0
 8001368:	d105      	bne.n	8001376 <__eqdf2+0x5a>
 800136a:	0030      	movs	r0, r6
 800136c:	4328      	orrs	r0, r5
 800136e:	1e43      	subs	r3, r0, #1
 8001370:	4198      	sbcs	r0, r3
 8001372:	e000      	b.n	8001376 <__eqdf2+0x5a>
 8001374:	2001      	movs	r0, #1
 8001376:	bcf0      	pop	{r4, r5, r6, r7}
 8001378:	46bb      	mov	fp, r7
 800137a:	46b2      	mov	sl, r6
 800137c:	46a9      	mov	r9, r5
 800137e:	46a0      	mov	r8, r4
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	0033      	movs	r3, r6
 8001384:	2001      	movs	r0, #1
 8001386:	432b      	orrs	r3, r5
 8001388:	d1f5      	bne.n	8001376 <__eqdf2+0x5a>
 800138a:	42a2      	cmp	r2, r4
 800138c:	d1f3      	bne.n	8001376 <__eqdf2+0x5a>
 800138e:	464b      	mov	r3, r9
 8001390:	433b      	orrs	r3, r7
 8001392:	d1f0      	bne.n	8001376 <__eqdf2+0x5a>
 8001394:	e7e2      	b.n	800135c <__eqdf2+0x40>
 8001396:	2000      	movs	r0, #0
 8001398:	e7ed      	b.n	8001376 <__eqdf2+0x5a>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__gedf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4647      	mov	r7, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	0016      	movs	r6, r2
 80013ac:	031b      	lsls	r3, r3, #12
 80013ae:	0b1b      	lsrs	r3, r3, #12
 80013b0:	4d2d      	ldr	r5, [pc, #180]	; (8001468 <__gedf2+0xc8>)
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	b580      	push	{r7, lr}
 80013b8:	0043      	lsls	r3, r0, #1
 80013ba:	030f      	lsls	r7, r1, #12
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d021      	beq.n	8001412 <__gedf2+0x72>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d013      	beq.n	80013fa <__gedf2+0x5a>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d122      	bne.n	800141c <__gedf2+0x7c>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <__gedf2+0x42>
 80013dc:	464d      	mov	r5, r9
 80013de:	432e      	orrs	r6, r5
 80013e0:	d022      	beq.n	8001428 <__gedf2+0x88>
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d010      	beq.n	8001408 <__gedf2+0x68>
 80013e6:	4281      	cmp	r1, r0
 80013e8:	d022      	beq.n	8001430 <__gedf2+0x90>
 80013ea:	2002      	movs	r0, #2
 80013ec:	3901      	subs	r1, #1
 80013ee:	4008      	ands	r0, r1
 80013f0:	3801      	subs	r0, #1
 80013f2:	bcc0      	pop	{r6, r7}
 80013f4:	46b9      	mov	r9, r7
 80013f6:	46b0      	mov	r8, r6
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	464d      	mov	r5, r9
 80013fc:	432e      	orrs	r6, r5
 80013fe:	d129      	bne.n	8001454 <__gedf2+0xb4>
 8001400:	2a00      	cmp	r2, #0
 8001402:	d1f0      	bne.n	80013e6 <__gedf2+0x46>
 8001404:	433c      	orrs	r4, r7
 8001406:	d1ee      	bne.n	80013e6 <__gedf2+0x46>
 8001408:	2800      	cmp	r0, #0
 800140a:	d1f2      	bne.n	80013f2 <__gedf2+0x52>
 800140c:	2001      	movs	r0, #1
 800140e:	4240      	negs	r0, r0
 8001410:	e7ef      	b.n	80013f2 <__gedf2+0x52>
 8001412:	003d      	movs	r5, r7
 8001414:	4325      	orrs	r5, r4
 8001416:	d11d      	bne.n	8001454 <__gedf2+0xb4>
 8001418:	4293      	cmp	r3, r2
 800141a:	d0ee      	beq.n	80013fa <__gedf2+0x5a>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e2      	bne.n	80013e6 <__gedf2+0x46>
 8001420:	464c      	mov	r4, r9
 8001422:	4326      	orrs	r6, r4
 8001424:	d1df      	bne.n	80013e6 <__gedf2+0x46>
 8001426:	e7e0      	b.n	80013ea <__gedf2+0x4a>
 8001428:	2000      	movs	r0, #0
 800142a:	2c00      	cmp	r4, #0
 800142c:	d0e1      	beq.n	80013f2 <__gedf2+0x52>
 800142e:	e7dc      	b.n	80013ea <__gedf2+0x4a>
 8001430:	429a      	cmp	r2, r3
 8001432:	dc0a      	bgt.n	800144a <__gedf2+0xaa>
 8001434:	dbe8      	blt.n	8001408 <__gedf2+0x68>
 8001436:	454f      	cmp	r7, r9
 8001438:	d8d7      	bhi.n	80013ea <__gedf2+0x4a>
 800143a:	d00e      	beq.n	800145a <__gedf2+0xba>
 800143c:	2000      	movs	r0, #0
 800143e:	454f      	cmp	r7, r9
 8001440:	d2d7      	bcs.n	80013f2 <__gedf2+0x52>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0e2      	beq.n	800140c <__gedf2+0x6c>
 8001446:	0008      	movs	r0, r1
 8001448:	e7d3      	b.n	80013f2 <__gedf2+0x52>
 800144a:	4243      	negs	r3, r0
 800144c:	4158      	adcs	r0, r3
 800144e:	0040      	lsls	r0, r0, #1
 8001450:	3801      	subs	r0, #1
 8001452:	e7ce      	b.n	80013f2 <__gedf2+0x52>
 8001454:	2002      	movs	r0, #2
 8001456:	4240      	negs	r0, r0
 8001458:	e7cb      	b.n	80013f2 <__gedf2+0x52>
 800145a:	45c4      	cmp	ip, r8
 800145c:	d8c5      	bhi.n	80013ea <__gedf2+0x4a>
 800145e:	2000      	movs	r0, #0
 8001460:	45c4      	cmp	ip, r8
 8001462:	d2c6      	bcs.n	80013f2 <__gedf2+0x52>
 8001464:	e7ed      	b.n	8001442 <__gedf2+0xa2>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4647      	mov	r7, r8
 8001470:	46ce      	mov	lr, r9
 8001472:	0004      	movs	r4, r0
 8001474:	0018      	movs	r0, r3
 8001476:	0016      	movs	r6, r2
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	0b1b      	lsrs	r3, r3, #12
 800147c:	4d2c      	ldr	r5, [pc, #176]	; (8001530 <__ledf2+0xc4>)
 800147e:	004a      	lsls	r2, r1, #1
 8001480:	4699      	mov	r9, r3
 8001482:	b580      	push	{r7, lr}
 8001484:	0043      	lsls	r3, r0, #1
 8001486:	030f      	lsls	r7, r1, #12
 8001488:	46a4      	mov	ip, r4
 800148a:	46b0      	mov	r8, r6
 800148c:	0b3f      	lsrs	r7, r7, #12
 800148e:	0d52      	lsrs	r2, r2, #21
 8001490:	0fc9      	lsrs	r1, r1, #31
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fc0      	lsrs	r0, r0, #31
 8001496:	42aa      	cmp	r2, r5
 8001498:	d00d      	beq.n	80014b6 <__ledf2+0x4a>
 800149a:	42ab      	cmp	r3, r5
 800149c:	d010      	beq.n	80014c0 <__ledf2+0x54>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d127      	bne.n	80014f2 <__ledf2+0x86>
 80014a2:	433c      	orrs	r4, r7
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <__ledf2+0x60>
 80014a8:	464d      	mov	r5, r9
 80014aa:	432e      	orrs	r6, r5
 80014ac:	d10e      	bne.n	80014cc <__ledf2+0x60>
 80014ae:	2000      	movs	r0, #0
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d015      	beq.n	80014e0 <__ledf2+0x74>
 80014b4:	e00e      	b.n	80014d4 <__ledf2+0x68>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d110      	bne.n	80014de <__ledf2+0x72>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d118      	bne.n	80014f2 <__ledf2+0x86>
 80014c0:	464d      	mov	r5, r9
 80014c2:	432e      	orrs	r6, r5
 80014c4:	d10b      	bne.n	80014de <__ledf2+0x72>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d102      	bne.n	80014d0 <__ledf2+0x64>
 80014ca:	433c      	orrs	r4, r7
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d00b      	beq.n	80014e8 <__ledf2+0x7c>
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d014      	beq.n	80014fe <__ledf2+0x92>
 80014d4:	2002      	movs	r0, #2
 80014d6:	3901      	subs	r1, #1
 80014d8:	4008      	ands	r0, r1
 80014da:	3801      	subs	r0, #1
 80014dc:	e000      	b.n	80014e0 <__ledf2+0x74>
 80014de:	2002      	movs	r0, #2
 80014e0:	bcc0      	pop	{r6, r7}
 80014e2:	46b9      	mov	r9, r7
 80014e4:	46b0      	mov	r8, r6
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f9      	bne.n	80014e0 <__ledf2+0x74>
 80014ec:	2001      	movs	r0, #1
 80014ee:	4240      	negs	r0, r0
 80014f0:	e7f6      	b.n	80014e0 <__ledf2+0x74>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ec      	bne.n	80014d0 <__ledf2+0x64>
 80014f6:	464c      	mov	r4, r9
 80014f8:	4326      	orrs	r6, r4
 80014fa:	d1e9      	bne.n	80014d0 <__ledf2+0x64>
 80014fc:	e7ea      	b.n	80014d4 <__ledf2+0x68>
 80014fe:	429a      	cmp	r2, r3
 8001500:	dd04      	ble.n	800150c <__ledf2+0xa0>
 8001502:	4243      	negs	r3, r0
 8001504:	4158      	adcs	r0, r3
 8001506:	0040      	lsls	r0, r0, #1
 8001508:	3801      	subs	r0, #1
 800150a:	e7e9      	b.n	80014e0 <__ledf2+0x74>
 800150c:	429a      	cmp	r2, r3
 800150e:	dbeb      	blt.n	80014e8 <__ledf2+0x7c>
 8001510:	454f      	cmp	r7, r9
 8001512:	d8df      	bhi.n	80014d4 <__ledf2+0x68>
 8001514:	d006      	beq.n	8001524 <__ledf2+0xb8>
 8001516:	2000      	movs	r0, #0
 8001518:	454f      	cmp	r7, r9
 800151a:	d2e1      	bcs.n	80014e0 <__ledf2+0x74>
 800151c:	2900      	cmp	r1, #0
 800151e:	d0e5      	beq.n	80014ec <__ledf2+0x80>
 8001520:	0008      	movs	r0, r1
 8001522:	e7dd      	b.n	80014e0 <__ledf2+0x74>
 8001524:	45c4      	cmp	ip, r8
 8001526:	d8d5      	bhi.n	80014d4 <__ledf2+0x68>
 8001528:	2000      	movs	r0, #0
 800152a:	45c4      	cmp	ip, r8
 800152c:	d2d8      	bcs.n	80014e0 <__ledf2+0x74>
 800152e:	e7f5      	b.n	800151c <__ledf2+0xb0>
 8001530:	000007ff 	.word	0x000007ff

08001534 <__aeabi_dmul>:
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	4645      	mov	r5, r8
 800153c:	46de      	mov	lr, fp
 800153e:	b5e0      	push	{r5, r6, r7, lr}
 8001540:	4698      	mov	r8, r3
 8001542:	030c      	lsls	r4, r1, #12
 8001544:	004b      	lsls	r3, r1, #1
 8001546:	0006      	movs	r6, r0
 8001548:	4692      	mov	sl, r2
 800154a:	b087      	sub	sp, #28
 800154c:	0b24      	lsrs	r4, r4, #12
 800154e:	0d5b      	lsrs	r3, r3, #21
 8001550:	0fcf      	lsrs	r7, r1, #31
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <__aeabi_dmul+0x24>
 8001556:	e15c      	b.n	8001812 <__aeabi_dmul+0x2de>
 8001558:	4ad9      	ldr	r2, [pc, #868]	; (80018c0 <__aeabi_dmul+0x38c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d100      	bne.n	8001560 <__aeabi_dmul+0x2c>
 800155e:	e175      	b.n	800184c <__aeabi_dmul+0x318>
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	00e4      	lsls	r4, r4, #3
 8001564:	4314      	orrs	r4, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	4314      	orrs	r4, r2
 800156c:	4ad5      	ldr	r2, [pc, #852]	; (80018c4 <__aeabi_dmul+0x390>)
 800156e:	00c5      	lsls	r5, r0, #3
 8001570:	4694      	mov	ip, r2
 8001572:	4463      	add	r3, ip
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	4699      	mov	r9, r3
 800157a:	469b      	mov	fp, r3
 800157c:	4643      	mov	r3, r8
 800157e:	4642      	mov	r2, r8
 8001580:	031e      	lsls	r6, r3, #12
 8001582:	0fd2      	lsrs	r2, r2, #31
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4650      	mov	r0, sl
 8001588:	4690      	mov	r8, r2
 800158a:	0b36      	lsrs	r6, r6, #12
 800158c:	0d5b      	lsrs	r3, r3, #21
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x5e>
 8001590:	e120      	b.n	80017d4 <__aeabi_dmul+0x2a0>
 8001592:	4acb      	ldr	r2, [pc, #812]	; (80018c0 <__aeabi_dmul+0x38c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x66>
 8001598:	e162      	b.n	8001860 <__aeabi_dmul+0x32c>
 800159a:	49ca      	ldr	r1, [pc, #808]	; (80018c4 <__aeabi_dmul+0x390>)
 800159c:	0f42      	lsrs	r2, r0, #29
 800159e:	468c      	mov	ip, r1
 80015a0:	9900      	ldr	r1, [sp, #0]
 80015a2:	4463      	add	r3, ip
 80015a4:	00f6      	lsls	r6, r6, #3
 80015a6:	468c      	mov	ip, r1
 80015a8:	4316      	orrs	r6, r2
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	449c      	add	ip, r3
 80015ae:	0412      	lsls	r2, r2, #16
 80015b0:	4663      	mov	r3, ip
 80015b2:	4316      	orrs	r6, r2
 80015b4:	00c2      	lsls	r2, r0, #3
 80015b6:	2000      	movs	r0, #0
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	9900      	ldr	r1, [sp, #0]
 80015bc:	4643      	mov	r3, r8
 80015be:	3101      	adds	r1, #1
 80015c0:	468c      	mov	ip, r1
 80015c2:	4649      	mov	r1, r9
 80015c4:	407b      	eors	r3, r7
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	290f      	cmp	r1, #15
 80015ca:	d826      	bhi.n	800161a <__aeabi_dmul+0xe6>
 80015cc:	4bbe      	ldr	r3, [pc, #760]	; (80018c8 <__aeabi_dmul+0x394>)
 80015ce:	0089      	lsls	r1, r1, #2
 80015d0:	5859      	ldr	r1, [r3, r1]
 80015d2:	468f      	mov	pc, r1
 80015d4:	4643      	mov	r3, r8
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	0034      	movs	r4, r6
 80015da:	0015      	movs	r5, r2
 80015dc:	4683      	mov	fp, r0
 80015de:	465b      	mov	r3, fp
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d016      	beq.n	8001612 <__aeabi_dmul+0xde>
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0xb6>
 80015e8:	e203      	b.n	80019f2 <__aeabi_dmul+0x4be>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dmul+0xbc>
 80015ee:	e0cd      	b.n	800178c <__aeabi_dmul+0x258>
 80015f0:	2200      	movs	r2, #0
 80015f2:	2400      	movs	r4, #0
 80015f4:	2500      	movs	r5, #0
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	0512      	lsls	r2, r2, #20
 80015fa:	4322      	orrs	r2, r4
 80015fc:	07db      	lsls	r3, r3, #31
 80015fe:	431a      	orrs	r2, r3
 8001600:	0028      	movs	r0, r5
 8001602:	0011      	movs	r1, r2
 8001604:	b007      	add	sp, #28
 8001606:	bcf0      	pop	{r4, r5, r6, r7}
 8001608:	46bb      	mov	fp, r7
 800160a:	46b2      	mov	sl, r6
 800160c:	46a9      	mov	r9, r5
 800160e:	46a0      	mov	r8, r4
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	2400      	movs	r4, #0
 8001614:	2500      	movs	r5, #0
 8001616:	4aaa      	ldr	r2, [pc, #680]	; (80018c0 <__aeabi_dmul+0x38c>)
 8001618:	e7ed      	b.n	80015f6 <__aeabi_dmul+0xc2>
 800161a:	0c28      	lsrs	r0, r5, #16
 800161c:	042d      	lsls	r5, r5, #16
 800161e:	0c2d      	lsrs	r5, r5, #16
 8001620:	002b      	movs	r3, r5
 8001622:	0c11      	lsrs	r1, r2, #16
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	0c12      	lsrs	r2, r2, #16
 8001628:	4353      	muls	r3, r2
 800162a:	4698      	mov	r8, r3
 800162c:	0013      	movs	r3, r2
 800162e:	002f      	movs	r7, r5
 8001630:	4343      	muls	r3, r0
 8001632:	4699      	mov	r9, r3
 8001634:	434f      	muls	r7, r1
 8001636:	444f      	add	r7, r9
 8001638:	46bb      	mov	fp, r7
 800163a:	4647      	mov	r7, r8
 800163c:	000b      	movs	r3, r1
 800163e:	0c3f      	lsrs	r7, r7, #16
 8001640:	46ba      	mov	sl, r7
 8001642:	4343      	muls	r3, r0
 8001644:	44da      	add	sl, fp
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	45d1      	cmp	r9, sl
 800164a:	d904      	bls.n	8001656 <__aeabi_dmul+0x122>
 800164c:	2780      	movs	r7, #128	; 0x80
 800164e:	027f      	lsls	r7, r7, #9
 8001650:	46b9      	mov	r9, r7
 8001652:	444b      	add	r3, r9
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	4653      	mov	r3, sl
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	469b      	mov	fp, r3
 800165c:	4653      	mov	r3, sl
 800165e:	041f      	lsls	r7, r3, #16
 8001660:	4643      	mov	r3, r8
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	4698      	mov	r8, r3
 8001668:	003b      	movs	r3, r7
 800166a:	4443      	add	r3, r8
 800166c:	9304      	str	r3, [sp, #16]
 800166e:	0c33      	lsrs	r3, r6, #16
 8001670:	0436      	lsls	r6, r6, #16
 8001672:	0c36      	lsrs	r6, r6, #16
 8001674:	4698      	mov	r8, r3
 8001676:	0033      	movs	r3, r6
 8001678:	4343      	muls	r3, r0
 800167a:	4699      	mov	r9, r3
 800167c:	4643      	mov	r3, r8
 800167e:	4343      	muls	r3, r0
 8001680:	002f      	movs	r7, r5
 8001682:	469a      	mov	sl, r3
 8001684:	4643      	mov	r3, r8
 8001686:	4377      	muls	r7, r6
 8001688:	435d      	muls	r5, r3
 800168a:	0c38      	lsrs	r0, r7, #16
 800168c:	444d      	add	r5, r9
 800168e:	1945      	adds	r5, r0, r5
 8001690:	45a9      	cmp	r9, r5
 8001692:	d903      	bls.n	800169c <__aeabi_dmul+0x168>
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	4699      	mov	r9, r3
 800169a:	44ca      	add	sl, r9
 800169c:	043f      	lsls	r7, r7, #16
 800169e:	0c28      	lsrs	r0, r5, #16
 80016a0:	0c3f      	lsrs	r7, r7, #16
 80016a2:	042d      	lsls	r5, r5, #16
 80016a4:	19ed      	adds	r5, r5, r7
 80016a6:	0c27      	lsrs	r7, r4, #16
 80016a8:	0424      	lsls	r4, r4, #16
 80016aa:	0c24      	lsrs	r4, r4, #16
 80016ac:	0003      	movs	r3, r0
 80016ae:	0020      	movs	r0, r4
 80016b0:	4350      	muls	r0, r2
 80016b2:	437a      	muls	r2, r7
 80016b4:	4691      	mov	r9, r2
 80016b6:	003a      	movs	r2, r7
 80016b8:	4453      	add	r3, sl
 80016ba:	9305      	str	r3, [sp, #20]
 80016bc:	0c03      	lsrs	r3, r0, #16
 80016be:	469a      	mov	sl, r3
 80016c0:	434a      	muls	r2, r1
 80016c2:	4361      	muls	r1, r4
 80016c4:	4449      	add	r1, r9
 80016c6:	4451      	add	r1, sl
 80016c8:	44ab      	add	fp, r5
 80016ca:	4589      	cmp	r9, r1
 80016cc:	d903      	bls.n	80016d6 <__aeabi_dmul+0x1a2>
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	4699      	mov	r9, r3
 80016d4:	444a      	add	r2, r9
 80016d6:	0400      	lsls	r0, r0, #16
 80016d8:	0c0b      	lsrs	r3, r1, #16
 80016da:	0c00      	lsrs	r0, r0, #16
 80016dc:	0409      	lsls	r1, r1, #16
 80016de:	1809      	adds	r1, r1, r0
 80016e0:	0020      	movs	r0, r4
 80016e2:	4699      	mov	r9, r3
 80016e4:	4643      	mov	r3, r8
 80016e6:	4370      	muls	r0, r6
 80016e8:	435c      	muls	r4, r3
 80016ea:	437e      	muls	r6, r7
 80016ec:	435f      	muls	r7, r3
 80016ee:	0c03      	lsrs	r3, r0, #16
 80016f0:	4698      	mov	r8, r3
 80016f2:	19a4      	adds	r4, r4, r6
 80016f4:	4444      	add	r4, r8
 80016f6:	444a      	add	r2, r9
 80016f8:	9703      	str	r7, [sp, #12]
 80016fa:	42a6      	cmp	r6, r4
 80016fc:	d904      	bls.n	8001708 <__aeabi_dmul+0x1d4>
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	4698      	mov	r8, r3
 8001704:	4447      	add	r7, r8
 8001706:	9703      	str	r7, [sp, #12]
 8001708:	0423      	lsls	r3, r4, #16
 800170a:	9e02      	ldr	r6, [sp, #8]
 800170c:	469a      	mov	sl, r3
 800170e:	9b05      	ldr	r3, [sp, #20]
 8001710:	445e      	add	r6, fp
 8001712:	4698      	mov	r8, r3
 8001714:	42ae      	cmp	r6, r5
 8001716:	41ad      	sbcs	r5, r5
 8001718:	1876      	adds	r6, r6, r1
 800171a:	428e      	cmp	r6, r1
 800171c:	4189      	sbcs	r1, r1
 800171e:	0400      	lsls	r0, r0, #16
 8001720:	0c00      	lsrs	r0, r0, #16
 8001722:	4450      	add	r0, sl
 8001724:	4440      	add	r0, r8
 8001726:	426d      	negs	r5, r5
 8001728:	1947      	adds	r7, r0, r5
 800172a:	46b8      	mov	r8, r7
 800172c:	4693      	mov	fp, r2
 800172e:	4249      	negs	r1, r1
 8001730:	4689      	mov	r9, r1
 8001732:	44c3      	add	fp, r8
 8001734:	44d9      	add	r9, fp
 8001736:	4298      	cmp	r0, r3
 8001738:	4180      	sbcs	r0, r0
 800173a:	45a8      	cmp	r8, r5
 800173c:	41ad      	sbcs	r5, r5
 800173e:	4593      	cmp	fp, r2
 8001740:	4192      	sbcs	r2, r2
 8001742:	4589      	cmp	r9, r1
 8001744:	4189      	sbcs	r1, r1
 8001746:	426d      	negs	r5, r5
 8001748:	4240      	negs	r0, r0
 800174a:	4328      	orrs	r0, r5
 800174c:	0c24      	lsrs	r4, r4, #16
 800174e:	4252      	negs	r2, r2
 8001750:	4249      	negs	r1, r1
 8001752:	430a      	orrs	r2, r1
 8001754:	9b03      	ldr	r3, [sp, #12]
 8001756:	1900      	adds	r0, r0, r4
 8001758:	1880      	adds	r0, r0, r2
 800175a:	18c7      	adds	r7, r0, r3
 800175c:	464b      	mov	r3, r9
 800175e:	0ddc      	lsrs	r4, r3, #23
 8001760:	9b04      	ldr	r3, [sp, #16]
 8001762:	0275      	lsls	r5, r6, #9
 8001764:	431d      	orrs	r5, r3
 8001766:	1e6a      	subs	r2, r5, #1
 8001768:	4195      	sbcs	r5, r2
 800176a:	464b      	mov	r3, r9
 800176c:	0df6      	lsrs	r6, r6, #23
 800176e:	027f      	lsls	r7, r7, #9
 8001770:	4335      	orrs	r5, r6
 8001772:	025a      	lsls	r2, r3, #9
 8001774:	433c      	orrs	r4, r7
 8001776:	4315      	orrs	r5, r2
 8001778:	01fb      	lsls	r3, r7, #7
 800177a:	d400      	bmi.n	800177e <__aeabi_dmul+0x24a>
 800177c:	e11c      	b.n	80019b8 <__aeabi_dmul+0x484>
 800177e:	2101      	movs	r1, #1
 8001780:	086a      	lsrs	r2, r5, #1
 8001782:	400d      	ands	r5, r1
 8001784:	4315      	orrs	r5, r2
 8001786:	07e2      	lsls	r2, r4, #31
 8001788:	4315      	orrs	r5, r2
 800178a:	0864      	lsrs	r4, r4, #1
 800178c:	494f      	ldr	r1, [pc, #316]	; (80018cc <__aeabi_dmul+0x398>)
 800178e:	4461      	add	r1, ip
 8001790:	2900      	cmp	r1, #0
 8001792:	dc00      	bgt.n	8001796 <__aeabi_dmul+0x262>
 8001794:	e0b0      	b.n	80018f8 <__aeabi_dmul+0x3c4>
 8001796:	076b      	lsls	r3, r5, #29
 8001798:	d009      	beq.n	80017ae <__aeabi_dmul+0x27a>
 800179a:	220f      	movs	r2, #15
 800179c:	402a      	ands	r2, r5
 800179e:	2a04      	cmp	r2, #4
 80017a0:	d005      	beq.n	80017ae <__aeabi_dmul+0x27a>
 80017a2:	1d2a      	adds	r2, r5, #4
 80017a4:	42aa      	cmp	r2, r5
 80017a6:	41ad      	sbcs	r5, r5
 80017a8:	426d      	negs	r5, r5
 80017aa:	1964      	adds	r4, r4, r5
 80017ac:	0015      	movs	r5, r2
 80017ae:	01e3      	lsls	r3, r4, #7
 80017b0:	d504      	bpl.n	80017bc <__aeabi_dmul+0x288>
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <__aeabi_dmul+0x39c>)
 80017b6:	00c9      	lsls	r1, r1, #3
 80017b8:	4014      	ands	r4, r2
 80017ba:	4461      	add	r1, ip
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <__aeabi_dmul+0x3a0>)
 80017be:	4291      	cmp	r1, r2
 80017c0:	dd00      	ble.n	80017c4 <__aeabi_dmul+0x290>
 80017c2:	e726      	b.n	8001612 <__aeabi_dmul+0xde>
 80017c4:	0762      	lsls	r2, r4, #29
 80017c6:	08ed      	lsrs	r5, r5, #3
 80017c8:	0264      	lsls	r4, r4, #9
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	4315      	orrs	r5, r2
 80017ce:	0b24      	lsrs	r4, r4, #12
 80017d0:	0d4a      	lsrs	r2, r1, #21
 80017d2:	e710      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80017d4:	4652      	mov	r2, sl
 80017d6:	4332      	orrs	r2, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x2a8>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x3a8>
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ae>
 80017e0:	e0dc      	b.n	800199c <__aeabi_dmul+0x468>
 80017e2:	0030      	movs	r0, r6
 80017e4:	f000 fd28 	bl	8002238 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	3a0b      	subs	r2, #11
 80017ec:	231d      	movs	r3, #29
 80017ee:	0001      	movs	r1, r0
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	4652      	mov	r2, sl
 80017f4:	3908      	subs	r1, #8
 80017f6:	40da      	lsrs	r2, r3
 80017f8:	408e      	lsls	r6, r1
 80017fa:	4316      	orrs	r6, r2
 80017fc:	4652      	mov	r2, sl
 80017fe:	408a      	lsls	r2, r1
 8001800:	9b00      	ldr	r3, [sp, #0]
 8001802:	4935      	ldr	r1, [pc, #212]	; (80018d8 <__aeabi_dmul+0x3a4>)
 8001804:	1a18      	subs	r0, r3, r0
 8001806:	0003      	movs	r3, r0
 8001808:	468c      	mov	ip, r1
 800180a:	4463      	add	r3, ip
 800180c:	2000      	movs	r0, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	e6d3      	b.n	80015ba <__aeabi_dmul+0x86>
 8001812:	0025      	movs	r5, r4
 8001814:	4305      	orrs	r5, r0
 8001816:	d04a      	beq.n	80018ae <__aeabi_dmul+0x37a>
 8001818:	2c00      	cmp	r4, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x2ea>
 800181c:	e0b0      	b.n	8001980 <__aeabi_dmul+0x44c>
 800181e:	0020      	movs	r0, r4
 8001820:	f000 fd0a 	bl	8002238 <__clzsi2>
 8001824:	0001      	movs	r1, r0
 8001826:	0002      	movs	r2, r0
 8001828:	390b      	subs	r1, #11
 800182a:	231d      	movs	r3, #29
 800182c:	0010      	movs	r0, r2
 800182e:	1a5b      	subs	r3, r3, r1
 8001830:	0031      	movs	r1, r6
 8001832:	0035      	movs	r5, r6
 8001834:	3808      	subs	r0, #8
 8001836:	4084      	lsls	r4, r0
 8001838:	40d9      	lsrs	r1, r3
 800183a:	4085      	lsls	r5, r0
 800183c:	430c      	orrs	r4, r1
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <__aeabi_dmul+0x3a4>)
 8001840:	1a83      	subs	r3, r0, r2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	4699      	mov	r9, r3
 8001848:	469b      	mov	fp, r3
 800184a:	e697      	b.n	800157c <__aeabi_dmul+0x48>
 800184c:	0005      	movs	r5, r0
 800184e:	4325      	orrs	r5, r4
 8001850:	d126      	bne.n	80018a0 <__aeabi_dmul+0x36c>
 8001852:	2208      	movs	r2, #8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2302      	movs	r3, #2
 8001858:	2400      	movs	r4, #0
 800185a:	4691      	mov	r9, r2
 800185c:	469b      	mov	fp, r3
 800185e:	e68d      	b.n	800157c <__aeabi_dmul+0x48>
 8001860:	4652      	mov	r2, sl
 8001862:	9b00      	ldr	r3, [sp, #0]
 8001864:	4332      	orrs	r2, r6
 8001866:	d110      	bne.n	800188a <__aeabi_dmul+0x356>
 8001868:	4915      	ldr	r1, [pc, #84]	; (80018c0 <__aeabi_dmul+0x38c>)
 800186a:	2600      	movs	r6, #0
 800186c:	468c      	mov	ip, r1
 800186e:	4463      	add	r3, ip
 8001870:	4649      	mov	r1, r9
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2302      	movs	r3, #2
 8001876:	4319      	orrs	r1, r3
 8001878:	4689      	mov	r9, r1
 800187a:	2002      	movs	r0, #2
 800187c:	e69d      	b.n	80015ba <__aeabi_dmul+0x86>
 800187e:	465b      	mov	r3, fp
 8001880:	9701      	str	r7, [sp, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d000      	beq.n	8001888 <__aeabi_dmul+0x354>
 8001886:	e6ad      	b.n	80015e4 <__aeabi_dmul+0xb0>
 8001888:	e6c3      	b.n	8001612 <__aeabi_dmul+0xde>
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <__aeabi_dmul+0x38c>)
 800188c:	2003      	movs	r0, #3
 800188e:	4694      	mov	ip, r2
 8001890:	4463      	add	r3, ip
 8001892:	464a      	mov	r2, r9
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2303      	movs	r3, #3
 8001898:	431a      	orrs	r2, r3
 800189a:	4691      	mov	r9, r2
 800189c:	4652      	mov	r2, sl
 800189e:	e68c      	b.n	80015ba <__aeabi_dmul+0x86>
 80018a0:	220c      	movs	r2, #12
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2303      	movs	r3, #3
 80018a6:	0005      	movs	r5, r0
 80018a8:	4691      	mov	r9, r2
 80018aa:	469b      	mov	fp, r3
 80018ac:	e666      	b.n	800157c <__aeabi_dmul+0x48>
 80018ae:	2304      	movs	r3, #4
 80018b0:	4699      	mov	r9, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	2400      	movs	r4, #0
 80018ba:	469b      	mov	fp, r3
 80018bc:	e65e      	b.n	800157c <__aeabi_dmul+0x48>
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	000007ff 	.word	0x000007ff
 80018c4:	fffffc01 	.word	0xfffffc01
 80018c8:	08008218 	.word	0x08008218
 80018cc:	000003ff 	.word	0x000003ff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	000007fe 	.word	0x000007fe
 80018d8:	fffffc0d 	.word	0xfffffc0d
 80018dc:	4649      	mov	r1, r9
 80018de:	2301      	movs	r3, #1
 80018e0:	4319      	orrs	r1, r3
 80018e2:	4689      	mov	r9, r1
 80018e4:	2600      	movs	r6, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	e667      	b.n	80015ba <__aeabi_dmul+0x86>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2480      	movs	r4, #128	; 0x80
 80018ee:	2500      	movs	r5, #0
 80018f0:	4a43      	ldr	r2, [pc, #268]	; (8001a00 <__aeabi_dmul+0x4cc>)
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	e67e      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80018f8:	2001      	movs	r0, #1
 80018fa:	1a40      	subs	r0, r0, r1
 80018fc:	2838      	cmp	r0, #56	; 0x38
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dmul+0x3ce>
 8001900:	e676      	b.n	80015f0 <__aeabi_dmul+0xbc>
 8001902:	281f      	cmp	r0, #31
 8001904:	dd5b      	ble.n	80019be <__aeabi_dmul+0x48a>
 8001906:	221f      	movs	r2, #31
 8001908:	0023      	movs	r3, r4
 800190a:	4252      	negs	r2, r2
 800190c:	1a51      	subs	r1, r2, r1
 800190e:	40cb      	lsrs	r3, r1
 8001910:	0019      	movs	r1, r3
 8001912:	2820      	cmp	r0, #32
 8001914:	d003      	beq.n	800191e <__aeabi_dmul+0x3ea>
 8001916:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <__aeabi_dmul+0x4d0>)
 8001918:	4462      	add	r2, ip
 800191a:	4094      	lsls	r4, r2
 800191c:	4325      	orrs	r5, r4
 800191e:	1e6a      	subs	r2, r5, #1
 8001920:	4195      	sbcs	r5, r2
 8001922:	002a      	movs	r2, r5
 8001924:	430a      	orrs	r2, r1
 8001926:	2107      	movs	r1, #7
 8001928:	000d      	movs	r5, r1
 800192a:	2400      	movs	r4, #0
 800192c:	4015      	ands	r5, r2
 800192e:	4211      	tst	r1, r2
 8001930:	d05b      	beq.n	80019ea <__aeabi_dmul+0x4b6>
 8001932:	210f      	movs	r1, #15
 8001934:	2400      	movs	r4, #0
 8001936:	4011      	ands	r1, r2
 8001938:	2904      	cmp	r1, #4
 800193a:	d053      	beq.n	80019e4 <__aeabi_dmul+0x4b0>
 800193c:	1d11      	adds	r1, r2, #4
 800193e:	4291      	cmp	r1, r2
 8001940:	4192      	sbcs	r2, r2
 8001942:	4252      	negs	r2, r2
 8001944:	18a4      	adds	r4, r4, r2
 8001946:	000a      	movs	r2, r1
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d54b      	bpl.n	80019e4 <__aeabi_dmul+0x4b0>
 800194c:	2201      	movs	r2, #1
 800194e:	2400      	movs	r4, #0
 8001950:	2500      	movs	r5, #0
 8001952:	e650      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	031b      	lsls	r3, r3, #12
 8001958:	421c      	tst	r4, r3
 800195a:	d009      	beq.n	8001970 <__aeabi_dmul+0x43c>
 800195c:	421e      	tst	r6, r3
 800195e:	d107      	bne.n	8001970 <__aeabi_dmul+0x43c>
 8001960:	4333      	orrs	r3, r6
 8001962:	031c      	lsls	r4, r3, #12
 8001964:	4643      	mov	r3, r8
 8001966:	0015      	movs	r5, r2
 8001968:	0b24      	lsrs	r4, r4, #12
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <__aeabi_dmul+0x4cc>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	e642      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0312      	lsls	r2, r2, #12
 8001974:	4314      	orrs	r4, r2
 8001976:	0324      	lsls	r4, r4, #12
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <__aeabi_dmul+0x4cc>)
 800197a:	0b24      	lsrs	r4, r4, #12
 800197c:	9701      	str	r7, [sp, #4]
 800197e:	e63a      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001980:	f000 fc5a 	bl	8002238 <__clzsi2>
 8001984:	0001      	movs	r1, r0
 8001986:	0002      	movs	r2, r0
 8001988:	3115      	adds	r1, #21
 800198a:	3220      	adds	r2, #32
 800198c:	291c      	cmp	r1, #28
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dmul+0x45e>
 8001990:	e74b      	b.n	800182a <__aeabi_dmul+0x2f6>
 8001992:	0034      	movs	r4, r6
 8001994:	3808      	subs	r0, #8
 8001996:	2500      	movs	r5, #0
 8001998:	4084      	lsls	r4, r0
 800199a:	e750      	b.n	800183e <__aeabi_dmul+0x30a>
 800199c:	f000 fc4c 	bl	8002238 <__clzsi2>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	3215      	adds	r2, #21
 80019a6:	3020      	adds	r0, #32
 80019a8:	2a1c      	cmp	r2, #28
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dmul+0x47a>
 80019ac:	e71e      	b.n	80017ec <__aeabi_dmul+0x2b8>
 80019ae:	4656      	mov	r6, sl
 80019b0:	3b08      	subs	r3, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	409e      	lsls	r6, r3
 80019b6:	e723      	b.n	8001800 <__aeabi_dmul+0x2cc>
 80019b8:	9b00      	ldr	r3, [sp, #0]
 80019ba:	469c      	mov	ip, r3
 80019bc:	e6e6      	b.n	800178c <__aeabi_dmul+0x258>
 80019be:	4912      	ldr	r1, [pc, #72]	; (8001a08 <__aeabi_dmul+0x4d4>)
 80019c0:	0022      	movs	r2, r4
 80019c2:	4461      	add	r1, ip
 80019c4:	002e      	movs	r6, r5
 80019c6:	408d      	lsls	r5, r1
 80019c8:	408a      	lsls	r2, r1
 80019ca:	40c6      	lsrs	r6, r0
 80019cc:	1e69      	subs	r1, r5, #1
 80019ce:	418d      	sbcs	r5, r1
 80019d0:	4332      	orrs	r2, r6
 80019d2:	432a      	orrs	r2, r5
 80019d4:	40c4      	lsrs	r4, r0
 80019d6:	0753      	lsls	r3, r2, #29
 80019d8:	d0b6      	beq.n	8001948 <__aeabi_dmul+0x414>
 80019da:	210f      	movs	r1, #15
 80019dc:	4011      	ands	r1, r2
 80019de:	2904      	cmp	r1, #4
 80019e0:	d1ac      	bne.n	800193c <__aeabi_dmul+0x408>
 80019e2:	e7b1      	b.n	8001948 <__aeabi_dmul+0x414>
 80019e4:	0765      	lsls	r5, r4, #29
 80019e6:	0264      	lsls	r4, r4, #9
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	08d2      	lsrs	r2, r2, #3
 80019ec:	4315      	orrs	r5, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	e601      	b.n	80015f6 <__aeabi_dmul+0xc2>
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	0312      	lsls	r2, r2, #12
 80019f6:	4314      	orrs	r4, r2
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	4a01      	ldr	r2, [pc, #4]	; (8001a00 <__aeabi_dmul+0x4cc>)
 80019fc:	0b24      	lsrs	r4, r4, #12
 80019fe:	e5fa      	b.n	80015f6 <__aeabi_dmul+0xc2>
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	0000043e 	.word	0x0000043e
 8001a08:	0000041e 	.word	0x0000041e

08001a0c <__aeabi_dsub>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	4657      	mov	r7, sl
 8001a10:	464e      	mov	r6, r9
 8001a12:	4645      	mov	r5, r8
 8001a14:	46de      	mov	lr, fp
 8001a16:	b5e0      	push	{r5, r6, r7, lr}
 8001a18:	001e      	movs	r6, r3
 8001a1a:	0017      	movs	r7, r2
 8001a1c:	004a      	lsls	r2, r1, #1
 8001a1e:	030b      	lsls	r3, r1, #12
 8001a20:	0d52      	lsrs	r2, r2, #21
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	4690      	mov	r8, r2
 8001a26:	0f42      	lsrs	r2, r0, #29
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	0fcd      	lsrs	r5, r1, #31
 8001a2c:	4ccd      	ldr	r4, [pc, #820]	; (8001d64 <__aeabi_dsub+0x358>)
 8001a2e:	0331      	lsls	r1, r6, #12
 8001a30:	00c3      	lsls	r3, r0, #3
 8001a32:	4694      	mov	ip, r2
 8001a34:	0070      	lsls	r0, r6, #1
 8001a36:	0f7a      	lsrs	r2, r7, #29
 8001a38:	0a49      	lsrs	r1, r1, #9
 8001a3a:	00ff      	lsls	r7, r7, #3
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	46b9      	mov	r9, r7
 8001a40:	0d40      	lsrs	r0, r0, #21
 8001a42:	0ff6      	lsrs	r6, r6, #31
 8001a44:	4311      	orrs	r1, r2
 8001a46:	42a0      	cmp	r0, r4
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x40>
 8001a4a:	e0b1      	b.n	8001bb0 <__aeabi_dsub+0x1a4>
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4056      	eors	r6, r2
 8001a50:	46b3      	mov	fp, r6
 8001a52:	42b5      	cmp	r5, r6
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x4c>
 8001a56:	e088      	b.n	8001b6a <__aeabi_dsub+0x15e>
 8001a58:	4642      	mov	r2, r8
 8001a5a:	1a12      	subs	r2, r2, r0
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	dc00      	bgt.n	8001a62 <__aeabi_dsub+0x56>
 8001a60:	e0ae      	b.n	8001bc0 <__aeabi_dsub+0x1b4>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x5c>
 8001a66:	e0c1      	b.n	8001bec <__aeabi_dsub+0x1e0>
 8001a68:	48be      	ldr	r0, [pc, #760]	; (8001d64 <__aeabi_dsub+0x358>)
 8001a6a:	4580      	cmp	r8, r0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x64>
 8001a6e:	e151      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	0400      	lsls	r0, r0, #16
 8001a74:	4301      	orrs	r1, r0
 8001a76:	2a38      	cmp	r2, #56	; 0x38
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0x70>
 8001a7a:	e17b      	b.n	8001d74 <__aeabi_dsub+0x368>
 8001a7c:	2a1f      	cmp	r2, #31
 8001a7e:	dd00      	ble.n	8001a82 <__aeabi_dsub+0x76>
 8001a80:	e1ee      	b.n	8001e60 <__aeabi_dsub+0x454>
 8001a82:	2020      	movs	r0, #32
 8001a84:	003e      	movs	r6, r7
 8001a86:	1a80      	subs	r0, r0, r2
 8001a88:	000c      	movs	r4, r1
 8001a8a:	40d6      	lsrs	r6, r2
 8001a8c:	40d1      	lsrs	r1, r2
 8001a8e:	4087      	lsls	r7, r0
 8001a90:	4662      	mov	r2, ip
 8001a92:	4084      	lsls	r4, r0
 8001a94:	1a52      	subs	r2, r2, r1
 8001a96:	1e78      	subs	r0, r7, #1
 8001a98:	4187      	sbcs	r7, r0
 8001a9a:	4694      	mov	ip, r2
 8001a9c:	4334      	orrs	r4, r6
 8001a9e:	4327      	orrs	r7, r4
 8001aa0:	1bdc      	subs	r4, r3, r7
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	419b      	sbcs	r3, r3
 8001aa6:	4662      	mov	r2, ip
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4699      	mov	r9, r3
 8001aae:	464b      	mov	r3, r9
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dsub+0xaa>
 8001ab4:	e118      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	0258      	lsls	r0, r3, #9
 8001aba:	0a43      	lsrs	r3, r0, #9
 8001abc:	4699      	mov	r9, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0xba>
 8001ac4:	e137      	b.n	8001d36 <__aeabi_dsub+0x32a>
 8001ac6:	4648      	mov	r0, r9
 8001ac8:	f000 fbb6 	bl	8002238 <__clzsi2>
 8001acc:	0001      	movs	r1, r0
 8001ace:	3908      	subs	r1, #8
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	0022      	movs	r2, r4
 8001ad4:	4648      	mov	r0, r9
 8001ad6:	1a5b      	subs	r3, r3, r1
 8001ad8:	40da      	lsrs	r2, r3
 8001ada:	4088      	lsls	r0, r1
 8001adc:	408c      	lsls	r4, r1
 8001ade:	4643      	mov	r3, r8
 8001ae0:	4310      	orrs	r0, r2
 8001ae2:	4588      	cmp	r8, r1
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_dsub+0xdc>
 8001ae6:	e136      	b.n	8001d56 <__aeabi_dsub+0x34a>
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	1c4b      	adds	r3, r1, #1
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_dsub+0xe6>
 8001af0:	e0ea      	b.n	8001cc8 <__aeabi_dsub+0x2bc>
 8001af2:	2220      	movs	r2, #32
 8001af4:	0026      	movs	r6, r4
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	0001      	movs	r1, r0
 8001afa:	4094      	lsls	r4, r2
 8001afc:	40de      	lsrs	r6, r3
 8001afe:	40d8      	lsrs	r0, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	4091      	lsls	r1, r2
 8001b04:	1e62      	subs	r2, r4, #1
 8001b06:	4194      	sbcs	r4, r2
 8001b08:	4681      	mov	r9, r0
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	4331      	orrs	r1, r6
 8001b0e:	430c      	orrs	r4, r1
 8001b10:	0763      	lsls	r3, r4, #29
 8001b12:	d009      	beq.n	8001b28 <__aeabi_dsub+0x11c>
 8001b14:	230f      	movs	r3, #15
 8001b16:	4023      	ands	r3, r4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d005      	beq.n	8001b28 <__aeabi_dsub+0x11c>
 8001b1c:	1d23      	adds	r3, r4, #4
 8001b1e:	42a3      	cmp	r3, r4
 8001b20:	41a4      	sbcs	r4, r4
 8001b22:	4264      	negs	r4, r4
 8001b24:	44a1      	add	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464b      	mov	r3, r9
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0x124>
 8001b2e:	e0de      	b.n	8001cee <__aeabi_dsub+0x2e2>
 8001b30:	4641      	mov	r1, r8
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <__aeabi_dsub+0x358>)
 8001b34:	3101      	adds	r1, #1
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x130>
 8001b3a:	e0e7      	b.n	8001d0c <__aeabi_dsub+0x300>
 8001b3c:	464b      	mov	r3, r9
 8001b3e:	488a      	ldr	r0, [pc, #552]	; (8001d68 <__aeabi_dsub+0x35c>)
 8001b40:	08e4      	lsrs	r4, r4, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	0018      	movs	r0, r3
 8001b46:	0549      	lsls	r1, r1, #21
 8001b48:	075b      	lsls	r3, r3, #29
 8001b4a:	0240      	lsls	r0, r0, #9
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	0d4a      	lsrs	r2, r1, #21
 8001b50:	0b04      	lsrs	r4, r0, #12
 8001b52:	0512      	lsls	r2, r2, #20
 8001b54:	07ed      	lsls	r5, r5, #31
 8001b56:	4322      	orrs	r2, r4
 8001b58:	432a      	orrs	r2, r5
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b60:	46bb      	mov	fp, r7
 8001b62:	46b2      	mov	sl, r6
 8001b64:	46a9      	mov	r9, r5
 8001b66:	46a0      	mov	r8, r4
 8001b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	1a12      	subs	r2, r2, r0
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	dd52      	ble.n	8001c18 <__aeabi_dsub+0x20c>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x16c>
 8001b76:	e09c      	b.n	8001cb2 <__aeabi_dsub+0x2a6>
 8001b78:	45a0      	cmp	r8, r4
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x172>
 8001b7c:	e0ca      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001b7e:	2080      	movs	r0, #128	; 0x80
 8001b80:	0400      	lsls	r0, r0, #16
 8001b82:	4301      	orrs	r1, r0
 8001b84:	2a38      	cmp	r2, #56	; 0x38
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dsub+0x17e>
 8001b88:	e149      	b.n	8001e1e <__aeabi_dsub+0x412>
 8001b8a:	2a1f      	cmp	r2, #31
 8001b8c:	dc00      	bgt.n	8001b90 <__aeabi_dsub+0x184>
 8001b8e:	e197      	b.n	8001ec0 <__aeabi_dsub+0x4b4>
 8001b90:	0010      	movs	r0, r2
 8001b92:	000e      	movs	r6, r1
 8001b94:	3820      	subs	r0, #32
 8001b96:	40c6      	lsrs	r6, r0
 8001b98:	2a20      	cmp	r2, #32
 8001b9a:	d004      	beq.n	8001ba6 <__aeabi_dsub+0x19a>
 8001b9c:	2040      	movs	r0, #64	; 0x40
 8001b9e:	1a82      	subs	r2, r0, r2
 8001ba0:	4091      	lsls	r1, r2
 8001ba2:	430f      	orrs	r7, r1
 8001ba4:	46b9      	mov	r9, r7
 8001ba6:	464c      	mov	r4, r9
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4334      	orrs	r4, r6
 8001bae:	e13a      	b.n	8001e26 <__aeabi_dsub+0x41a>
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	433a      	orrs	r2, r7
 8001bb4:	d028      	beq.n	8001c08 <__aeabi_dsub+0x1fc>
 8001bb6:	46b3      	mov	fp, r6
 8001bb8:	42b5      	cmp	r5, r6
 8001bba:	d02b      	beq.n	8001c14 <__aeabi_dsub+0x208>
 8001bbc:	4a6b      	ldr	r2, [pc, #428]	; (8001d6c <__aeabi_dsub+0x360>)
 8001bbe:	4442      	add	r2, r8
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	d05d      	beq.n	8001c80 <__aeabi_dsub+0x274>
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	4644      	mov	r4, r8
 8001bc8:	1a82      	subs	r2, r0, r2
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x1c4>
 8001bce:	e0f5      	b.n	8001dbc <__aeabi_dsub+0x3b0>
 8001bd0:	4665      	mov	r5, ip
 8001bd2:	431d      	orrs	r5, r3
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x1cc>
 8001bd6:	e19c      	b.n	8001f12 <__aeabi_dsub+0x506>
 8001bd8:	1e55      	subs	r5, r2, #1
 8001bda:	2a01      	cmp	r2, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x1d4>
 8001bde:	e1fb      	b.n	8001fd8 <__aeabi_dsub+0x5cc>
 8001be0:	4c60      	ldr	r4, [pc, #384]	; (8001d64 <__aeabi_dsub+0x358>)
 8001be2:	42a2      	cmp	r2, r4
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x1dc>
 8001be6:	e1bd      	b.n	8001f64 <__aeabi_dsub+0x558>
 8001be8:	002a      	movs	r2, r5
 8001bea:	e0f0      	b.n	8001dce <__aeabi_dsub+0x3c2>
 8001bec:	0008      	movs	r0, r1
 8001bee:	4338      	orrs	r0, r7
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x1e8>
 8001bf2:	e0c3      	b.n	8001d7c <__aeabi_dsub+0x370>
 8001bf4:	1e50      	subs	r0, r2, #1
 8001bf6:	2a01      	cmp	r2, #1
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1f0>
 8001bfa:	e1a8      	b.n	8001f4e <__aeabi_dsub+0x542>
 8001bfc:	4c59      	ldr	r4, [pc, #356]	; (8001d64 <__aeabi_dsub+0x358>)
 8001bfe:	42a2      	cmp	r2, r4
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1f8>
 8001c02:	e087      	b.n	8001d14 <__aeabi_dsub+0x308>
 8001c04:	0002      	movs	r2, r0
 8001c06:	e736      	b.n	8001a76 <__aeabi_dsub+0x6a>
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4056      	eors	r6, r2
 8001c0c:	46b3      	mov	fp, r6
 8001c0e:	42b5      	cmp	r5, r6
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x208>
 8001c12:	e721      	b.n	8001a58 <__aeabi_dsub+0x4c>
 8001c14:	4a55      	ldr	r2, [pc, #340]	; (8001d6c <__aeabi_dsub+0x360>)
 8001c16:	4442      	add	r2, r8
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x212>
 8001c1c:	e0b5      	b.n	8001d8a <__aeabi_dsub+0x37e>
 8001c1e:	4642      	mov	r2, r8
 8001c20:	4644      	mov	r4, r8
 8001c22:	1a82      	subs	r2, r0, r2
 8001c24:	2c00      	cmp	r4, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x21e>
 8001c28:	e138      	b.n	8001e9c <__aeabi_dsub+0x490>
 8001c2a:	4e4e      	ldr	r6, [pc, #312]	; (8001d64 <__aeabi_dsub+0x358>)
 8001c2c:	42b0      	cmp	r0, r6
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x226>
 8001c30:	e1de      	b.n	8001ff0 <__aeabi_dsub+0x5e4>
 8001c32:	2680      	movs	r6, #128	; 0x80
 8001c34:	4664      	mov	r4, ip
 8001c36:	0436      	lsls	r6, r6, #16
 8001c38:	4334      	orrs	r4, r6
 8001c3a:	46a4      	mov	ip, r4
 8001c3c:	2a38      	cmp	r2, #56	; 0x38
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_dsub+0x236>
 8001c40:	e196      	b.n	8001f70 <__aeabi_dsub+0x564>
 8001c42:	2a1f      	cmp	r2, #31
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dsub+0x23c>
 8001c46:	e224      	b.n	8002092 <__aeabi_dsub+0x686>
 8001c48:	2620      	movs	r6, #32
 8001c4a:	1ab4      	subs	r4, r6, r2
 8001c4c:	46a2      	mov	sl, r4
 8001c4e:	4664      	mov	r4, ip
 8001c50:	4656      	mov	r6, sl
 8001c52:	40b4      	lsls	r4, r6
 8001c54:	46a1      	mov	r9, r4
 8001c56:	001c      	movs	r4, r3
 8001c58:	464e      	mov	r6, r9
 8001c5a:	40d4      	lsrs	r4, r2
 8001c5c:	4326      	orrs	r6, r4
 8001c5e:	0034      	movs	r4, r6
 8001c60:	4656      	mov	r6, sl
 8001c62:	40b3      	lsls	r3, r6
 8001c64:	1e5e      	subs	r6, r3, #1
 8001c66:	41b3      	sbcs	r3, r6
 8001c68:	431c      	orrs	r4, r3
 8001c6a:	4663      	mov	r3, ip
 8001c6c:	40d3      	lsrs	r3, r2
 8001c6e:	18c9      	adds	r1, r1, r3
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	42bc      	cmp	r4, r7
 8001c74:	41bf      	sbcs	r7, r7
 8001c76:	427f      	negs	r7, r7
 8001c78:	46b9      	mov	r9, r7
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	4489      	add	r9, r1
 8001c7e:	e0d8      	b.n	8001e32 <__aeabi_dsub+0x426>
 8001c80:	4640      	mov	r0, r8
 8001c82:	4c3b      	ldr	r4, [pc, #236]	; (8001d70 <__aeabi_dsub+0x364>)
 8001c84:	3001      	adds	r0, #1
 8001c86:	4220      	tst	r0, r4
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dsub+0x280>
 8001c8a:	e0b4      	b.n	8001df6 <__aeabi_dsub+0x3ea>
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x288>
 8001c92:	e144      	b.n	8001f1e <__aeabi_dsub+0x512>
 8001c94:	4660      	mov	r0, ip
 8001c96:	4318      	orrs	r0, r3
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x290>
 8001c9a:	e190      	b.n	8001fbe <__aeabi_dsub+0x5b2>
 8001c9c:	0008      	movs	r0, r1
 8001c9e:	4338      	orrs	r0, r7
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x298>
 8001ca2:	e1aa      	b.n	8001ffa <__aeabi_dsub+0x5ee>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	0749      	lsls	r1, r1, #29
 8001caa:	430b      	orrs	r3, r1
 8001cac:	4661      	mov	r1, ip
 8001cae:	08cc      	lsrs	r4, r1, #3
 8001cb0:	e027      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001cb2:	0008      	movs	r0, r1
 8001cb4:	4338      	orrs	r0, r7
 8001cb6:	d061      	beq.n	8001d7c <__aeabi_dsub+0x370>
 8001cb8:	1e50      	subs	r0, r2, #1
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x2b4>
 8001cbe:	e139      	b.n	8001f34 <__aeabi_dsub+0x528>
 8001cc0:	42a2      	cmp	r2, r4
 8001cc2:	d027      	beq.n	8001d14 <__aeabi_dsub+0x308>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	e75d      	b.n	8001b84 <__aeabi_dsub+0x178>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	391f      	subs	r1, #31
 8001ccc:	40ca      	lsrs	r2, r1
 8001cce:	0011      	movs	r1, r2
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d003      	beq.n	8001cdc <__aeabi_dsub+0x2d0>
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4098      	lsls	r0, r3
 8001cda:	4304      	orrs	r4, r0
 8001cdc:	1e63      	subs	r3, r4, #1
 8001cde:	419c      	sbcs	r4, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	4698      	mov	r8, r3
 8001ce6:	430c      	orrs	r4, r1
 8001ce8:	0763      	lsls	r3, r4, #29
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x2e2>
 8001cec:	e712      	b.n	8001b14 <__aeabi_dsub+0x108>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	464a      	mov	r2, r9
 8001cf2:	08e4      	lsrs	r4, r4, #3
 8001cf4:	075b      	lsls	r3, r3, #29
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	08d4      	lsrs	r4, r2, #3
 8001cfa:	4642      	mov	r2, r8
 8001cfc:	4919      	ldr	r1, [pc, #100]	; (8001d64 <__aeabi_dsub+0x358>)
 8001cfe:	428a      	cmp	r2, r1
 8001d00:	d00e      	beq.n	8001d20 <__aeabi_dsub+0x314>
 8001d02:	0324      	lsls	r4, r4, #12
 8001d04:	0552      	lsls	r2, r2, #21
 8001d06:	0b24      	lsrs	r4, r4, #12
 8001d08:	0d52      	lsrs	r2, r2, #21
 8001d0a:	e722      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	2400      	movs	r4, #0
 8001d10:	2300      	movs	r3, #0
 8001d12:	e71e      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	4662      	mov	r2, ip
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	08d4      	lsrs	r4, r2, #3
 8001d20:	001a      	movs	r2, r3
 8001d22:	4322      	orrs	r2, r4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x31c>
 8001d26:	e1fc      	b.n	8002122 <__aeabi_dsub+0x716>
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	0312      	lsls	r2, r2, #12
 8001d2c:	4314      	orrs	r4, r2
 8001d2e:	0324      	lsls	r4, r4, #12
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <__aeabi_dsub+0x358>)
 8001d32:	0b24      	lsrs	r4, r4, #12
 8001d34:	e70d      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001d36:	0020      	movs	r0, r4
 8001d38:	f000 fa7e 	bl	8002238 <__clzsi2>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	3118      	adds	r1, #24
 8001d40:	291f      	cmp	r1, #31
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dsub+0x33a>
 8001d44:	e6c4      	b.n	8001ad0 <__aeabi_dsub+0xc4>
 8001d46:	3808      	subs	r0, #8
 8001d48:	4084      	lsls	r4, r0
 8001d4a:	4643      	mov	r3, r8
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	2400      	movs	r4, #0
 8001d50:	4588      	cmp	r8, r1
 8001d52:	dc00      	bgt.n	8001d56 <__aeabi_dsub+0x34a>
 8001d54:	e6c8      	b.n	8001ae8 <__aeabi_dsub+0xdc>
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__aeabi_dsub+0x35c>)
 8001d58:	1a5b      	subs	r3, r3, r1
 8001d5a:	4010      	ands	r0, r2
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	4681      	mov	r9, r0
 8001d60:	e6d6      	b.n	8001b10 <__aeabi_dsub+0x104>
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000007ff 	.word	0x000007ff
 8001d68:	ff7fffff 	.word	0xff7fffff
 8001d6c:	fffff801 	.word	0xfffff801
 8001d70:	000007fe 	.word	0x000007fe
 8001d74:	430f      	orrs	r7, r1
 8001d76:	1e7a      	subs	r2, r7, #1
 8001d78:	4197      	sbcs	r7, r2
 8001d7a:	e691      	b.n	8001aa0 <__aeabi_dsub+0x94>
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	0749      	lsls	r1, r1, #29
 8001d82:	430b      	orrs	r3, r1
 8001d84:	4661      	mov	r1, ip
 8001d86:	08cc      	lsrs	r4, r1, #3
 8001d88:	e7b8      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	4cd3      	ldr	r4, [pc, #844]	; (80020dc <__aeabi_dsub+0x6d0>)
 8001d8e:	3001      	adds	r0, #1
 8001d90:	4220      	tst	r0, r4
 8001d92:	d000      	beq.n	8001d96 <__aeabi_dsub+0x38a>
 8001d94:	e0a2      	b.n	8001edc <__aeabi_dsub+0x4d0>
 8001d96:	4640      	mov	r0, r8
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x392>
 8001d9c:	e101      	b.n	8001fa2 <__aeabi_dsub+0x596>
 8001d9e:	4660      	mov	r0, ip
 8001da0:	4318      	orrs	r0, r3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x39a>
 8001da4:	e15e      	b.n	8002064 <__aeabi_dsub+0x658>
 8001da6:	0008      	movs	r0, r1
 8001da8:	4338      	orrs	r0, r7
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3a2>
 8001dac:	e15f      	b.n	800206e <__aeabi_dsub+0x662>
 8001dae:	4661      	mov	r1, ip
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	0749      	lsls	r1, r1, #29
 8001db4:	430b      	orrs	r3, r1
 8001db6:	4661      	mov	r1, ip
 8001db8:	08cc      	lsrs	r4, r1, #3
 8001dba:	e7a2      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001dbc:	4dc8      	ldr	r5, [pc, #800]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001dbe:	42a8      	cmp	r0, r5
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x3b8>
 8001dc2:	e0cf      	b.n	8001f64 <__aeabi_dsub+0x558>
 8001dc4:	2580      	movs	r5, #128	; 0x80
 8001dc6:	4664      	mov	r4, ip
 8001dc8:	042d      	lsls	r5, r5, #16
 8001dca:	432c      	orrs	r4, r5
 8001dcc:	46a4      	mov	ip, r4
 8001dce:	2a38      	cmp	r2, #56	; 0x38
 8001dd0:	dc56      	bgt.n	8001e80 <__aeabi_dsub+0x474>
 8001dd2:	2a1f      	cmp	r2, #31
 8001dd4:	dd00      	ble.n	8001dd8 <__aeabi_dsub+0x3cc>
 8001dd6:	e0d1      	b.n	8001f7c <__aeabi_dsub+0x570>
 8001dd8:	2520      	movs	r5, #32
 8001dda:	001e      	movs	r6, r3
 8001ddc:	1aad      	subs	r5, r5, r2
 8001dde:	4664      	mov	r4, ip
 8001de0:	40ab      	lsls	r3, r5
 8001de2:	40ac      	lsls	r4, r5
 8001de4:	40d6      	lsrs	r6, r2
 8001de6:	1e5d      	subs	r5, r3, #1
 8001de8:	41ab      	sbcs	r3, r5
 8001dea:	4334      	orrs	r4, r6
 8001dec:	4323      	orrs	r3, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	40d4      	lsrs	r4, r2
 8001df2:	1b09      	subs	r1, r1, r4
 8001df4:	e049      	b.n	8001e8a <__aeabi_dsub+0x47e>
 8001df6:	4660      	mov	r0, ip
 8001df8:	1bdc      	subs	r4, r3, r7
 8001dfa:	1a46      	subs	r6, r0, r1
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	4180      	sbcs	r0, r0
 8001e00:	4240      	negs	r0, r0
 8001e02:	4681      	mov	r9, r0
 8001e04:	0030      	movs	r0, r6
 8001e06:	464e      	mov	r6, r9
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	4681      	mov	r9, r0
 8001e0c:	0200      	lsls	r0, r0, #8
 8001e0e:	d476      	bmi.n	8001efe <__aeabi_dsub+0x4f2>
 8001e10:	464b      	mov	r3, r9
 8001e12:	4323      	orrs	r3, r4
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x40c>
 8001e16:	e652      	b.n	8001abe <__aeabi_dsub+0xb2>
 8001e18:	2400      	movs	r4, #0
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	e771      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001e1e:	4339      	orrs	r1, r7
 8001e20:	000c      	movs	r4, r1
 8001e22:	1e62      	subs	r2, r4, #1
 8001e24:	4194      	sbcs	r4, r2
 8001e26:	18e4      	adds	r4, r4, r3
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	4463      	add	r3, ip
 8001e30:	4699      	mov	r9, r3
 8001e32:	464b      	mov	r3, r9
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dsub+0x42e>
 8001e38:	e756      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	4ba8      	ldr	r3, [pc, #672]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001e40:	44e0      	add	r8, ip
 8001e42:	4598      	cmp	r8, r3
 8001e44:	d038      	beq.n	8001eb8 <__aeabi_dsub+0x4ac>
 8001e46:	464b      	mov	r3, r9
 8001e48:	48a6      	ldr	r0, [pc, #664]	; (80020e4 <__aeabi_dsub+0x6d8>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4003      	ands	r3, r0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	0863      	lsrs	r3, r4, #1
 8001e52:	4014      	ands	r4, r2
 8001e54:	431c      	orrs	r4, r3
 8001e56:	07c3      	lsls	r3, r0, #31
 8001e58:	431c      	orrs	r4, r3
 8001e5a:	0843      	lsrs	r3, r0, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	e657      	b.n	8001b10 <__aeabi_dsub+0x104>
 8001e60:	0010      	movs	r0, r2
 8001e62:	000e      	movs	r6, r1
 8001e64:	3820      	subs	r0, #32
 8001e66:	40c6      	lsrs	r6, r0
 8001e68:	2a20      	cmp	r2, #32
 8001e6a:	d004      	beq.n	8001e76 <__aeabi_dsub+0x46a>
 8001e6c:	2040      	movs	r0, #64	; 0x40
 8001e6e:	1a82      	subs	r2, r0, r2
 8001e70:	4091      	lsls	r1, r2
 8001e72:	430f      	orrs	r7, r1
 8001e74:	46b9      	mov	r9, r7
 8001e76:	464f      	mov	r7, r9
 8001e78:	1e7a      	subs	r2, r7, #1
 8001e7a:	4197      	sbcs	r7, r2
 8001e7c:	4337      	orrs	r7, r6
 8001e7e:	e60f      	b.n	8001aa0 <__aeabi_dsub+0x94>
 8001e80:	4662      	mov	r2, ip
 8001e82:	431a      	orrs	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	4193      	sbcs	r3, r2
 8001e8a:	1afc      	subs	r4, r7, r3
 8001e8c:	42a7      	cmp	r7, r4
 8001e8e:	41bf      	sbcs	r7, r7
 8001e90:	427f      	negs	r7, r7
 8001e92:	1bcb      	subs	r3, r1, r7
 8001e94:	4699      	mov	r9, r3
 8001e96:	465d      	mov	r5, fp
 8001e98:	4680      	mov	r8, r0
 8001e9a:	e608      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001e9c:	4666      	mov	r6, ip
 8001e9e:	431e      	orrs	r6, r3
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x498>
 8001ea2:	e0be      	b.n	8002022 <__aeabi_dsub+0x616>
 8001ea4:	1e56      	subs	r6, r2, #1
 8001ea6:	2a01      	cmp	r2, #1
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x4a0>
 8001eaa:	e109      	b.n	80020c0 <__aeabi_dsub+0x6b4>
 8001eac:	4c8c      	ldr	r4, [pc, #560]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001eae:	42a2      	cmp	r2, r4
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x4a8>
 8001eb2:	e119      	b.n	80020e8 <__aeabi_dsub+0x6dc>
 8001eb4:	0032      	movs	r2, r6
 8001eb6:	e6c1      	b.n	8001c3c <__aeabi_dsub+0x230>
 8001eb8:	4642      	mov	r2, r8
 8001eba:	2400      	movs	r4, #0
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e648      	b.n	8001b52 <__aeabi_dsub+0x146>
 8001ec0:	2020      	movs	r0, #32
 8001ec2:	000c      	movs	r4, r1
 8001ec4:	1a80      	subs	r0, r0, r2
 8001ec6:	003e      	movs	r6, r7
 8001ec8:	4087      	lsls	r7, r0
 8001eca:	4084      	lsls	r4, r0
 8001ecc:	40d6      	lsrs	r6, r2
 8001ece:	1e78      	subs	r0, r7, #1
 8001ed0:	4187      	sbcs	r7, r0
 8001ed2:	40d1      	lsrs	r1, r2
 8001ed4:	4334      	orrs	r4, r6
 8001ed6:	433c      	orrs	r4, r7
 8001ed8:	448c      	add	ip, r1
 8001eda:	e7a4      	b.n	8001e26 <__aeabi_dsub+0x41a>
 8001edc:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <__aeabi_dsub+0x6d4>)
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x4d8>
 8001ee2:	e0e9      	b.n	80020b8 <__aeabi_dsub+0x6ac>
 8001ee4:	19df      	adds	r7, r3, r7
 8001ee6:	429f      	cmp	r7, r3
 8001ee8:	419b      	sbcs	r3, r3
 8001eea:	4461      	add	r1, ip
 8001eec:	425b      	negs	r3, r3
 8001eee:	18c9      	adds	r1, r1, r3
 8001ef0:	07cc      	lsls	r4, r1, #31
 8001ef2:	087f      	lsrs	r7, r7, #1
 8001ef4:	084b      	lsrs	r3, r1, #1
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	4680      	mov	r8, r0
 8001efa:	433c      	orrs	r4, r7
 8001efc:	e6f4      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001efe:	1afc      	subs	r4, r7, r3
 8001f00:	42a7      	cmp	r7, r4
 8001f02:	41bf      	sbcs	r7, r7
 8001f04:	4663      	mov	r3, ip
 8001f06:	427f      	negs	r7, r7
 8001f08:	1ac9      	subs	r1, r1, r3
 8001f0a:	1bcb      	subs	r3, r1, r7
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	465d      	mov	r5, fp
 8001f10:	e5d5      	b.n	8001abe <__aeabi_dsub+0xb2>
 8001f12:	08ff      	lsrs	r7, r7, #3
 8001f14:	074b      	lsls	r3, r1, #29
 8001f16:	465d      	mov	r5, fp
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	08cc      	lsrs	r4, r1, #3
 8001f1c:	e6ee      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 8001f1e:	4662      	mov	r2, ip
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x51a>
 8001f24:	e082      	b.n	800202c <__aeabi_dsub+0x620>
 8001f26:	000b      	movs	r3, r1
 8001f28:	433b      	orrs	r3, r7
 8001f2a:	d11b      	bne.n	8001f64 <__aeabi_dsub+0x558>
 8001f2c:	2480      	movs	r4, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	e6f9      	b.n	8001d28 <__aeabi_dsub+0x31c>
 8001f34:	19dc      	adds	r4, r3, r7
 8001f36:	429c      	cmp	r4, r3
 8001f38:	419b      	sbcs	r3, r3
 8001f3a:	4461      	add	r1, ip
 8001f3c:	4689      	mov	r9, r1
 8001f3e:	425b      	negs	r3, r3
 8001f40:	4499      	add	r9, r3
 8001f42:	464b      	mov	r3, r9
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d444      	bmi.n	8001fd2 <__aeabi_dsub+0x5c6>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	e6cc      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8001f4e:	1bdc      	subs	r4, r3, r7
 8001f50:	4662      	mov	r2, ip
 8001f52:	42a3      	cmp	r3, r4
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	1a51      	subs	r1, r2, r1
 8001f58:	425b      	negs	r3, r3
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4698      	mov	r8, r3
 8001f62:	e5a4      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001f64:	08ff      	lsrs	r7, r7, #3
 8001f66:	074b      	lsls	r3, r1, #29
 8001f68:	465d      	mov	r5, fp
 8001f6a:	433b      	orrs	r3, r7
 8001f6c:	08cc      	lsrs	r4, r1, #3
 8001f6e:	e6d7      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001f70:	4662      	mov	r2, ip
 8001f72:	431a      	orrs	r2, r3
 8001f74:	0014      	movs	r4, r2
 8001f76:	1e63      	subs	r3, r4, #1
 8001f78:	419c      	sbcs	r4, r3
 8001f7a:	e679      	b.n	8001c70 <__aeabi_dsub+0x264>
 8001f7c:	0015      	movs	r5, r2
 8001f7e:	4664      	mov	r4, ip
 8001f80:	3d20      	subs	r5, #32
 8001f82:	40ec      	lsrs	r4, r5
 8001f84:	46a0      	mov	r8, r4
 8001f86:	2a20      	cmp	r2, #32
 8001f88:	d005      	beq.n	8001f96 <__aeabi_dsub+0x58a>
 8001f8a:	2540      	movs	r5, #64	; 0x40
 8001f8c:	4664      	mov	r4, ip
 8001f8e:	1aaa      	subs	r2, r5, r2
 8001f90:	4094      	lsls	r4, r2
 8001f92:	4323      	orrs	r3, r4
 8001f94:	469a      	mov	sl, r3
 8001f96:	4654      	mov	r4, sl
 8001f98:	1e63      	subs	r3, r4, #1
 8001f9a:	419c      	sbcs	r4, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	4323      	orrs	r3, r4
 8001fa0:	e773      	b.n	8001e8a <__aeabi_dsub+0x47e>
 8001fa2:	4662      	mov	r2, ip
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	d023      	beq.n	8001ff0 <__aeabi_dsub+0x5e4>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	433a      	orrs	r2, r7
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x5a4>
 8001fae:	e0a0      	b.n	80020f2 <__aeabi_dsub+0x6e6>
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	08d4      	lsrs	r4, r2, #3
 8001fbc:	e6b0      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001fbe:	000b      	movs	r3, r1
 8001fc0:	433b      	orrs	r3, r7
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x5ba>
 8001fc4:	e728      	b.n	8001e18 <__aeabi_dsub+0x40c>
 8001fc6:	08ff      	lsrs	r7, r7, #3
 8001fc8:	074b      	lsls	r3, r1, #29
 8001fca:	465d      	mov	r5, fp
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	08cc      	lsrs	r4, r1, #3
 8001fd0:	e697      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	e736      	b.n	8001e46 <__aeabi_dsub+0x43a>
 8001fd8:	1afc      	subs	r4, r7, r3
 8001fda:	42a7      	cmp	r7, r4
 8001fdc:	41bf      	sbcs	r7, r7
 8001fde:	4663      	mov	r3, ip
 8001fe0:	427f      	negs	r7, r7
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	1bcb      	subs	r3, r1, r7
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	465d      	mov	r5, fp
 8001fec:	4698      	mov	r8, r3
 8001fee:	e55e      	b.n	8001aae <__aeabi_dsub+0xa2>
 8001ff0:	074b      	lsls	r3, r1, #29
 8001ff2:	08ff      	lsrs	r7, r7, #3
 8001ff4:	433b      	orrs	r3, r7
 8001ff6:	08cc      	lsrs	r4, r1, #3
 8001ff8:	e692      	b.n	8001d20 <__aeabi_dsub+0x314>
 8001ffa:	1bdc      	subs	r4, r3, r7
 8001ffc:	4660      	mov	r0, ip
 8001ffe:	42a3      	cmp	r3, r4
 8002000:	41b6      	sbcs	r6, r6
 8002002:	1a40      	subs	r0, r0, r1
 8002004:	4276      	negs	r6, r6
 8002006:	1b80      	subs	r0, r0, r6
 8002008:	4681      	mov	r9, r0
 800200a:	0200      	lsls	r0, r0, #8
 800200c:	d560      	bpl.n	80020d0 <__aeabi_dsub+0x6c4>
 800200e:	1afc      	subs	r4, r7, r3
 8002010:	42a7      	cmp	r7, r4
 8002012:	41bf      	sbcs	r7, r7
 8002014:	4663      	mov	r3, ip
 8002016:	427f      	negs	r7, r7
 8002018:	1ac9      	subs	r1, r1, r3
 800201a:	1bcb      	subs	r3, r1, r7
 800201c:	4699      	mov	r9, r3
 800201e:	465d      	mov	r5, fp
 8002020:	e576      	b.n	8001b10 <__aeabi_dsub+0x104>
 8002022:	08ff      	lsrs	r7, r7, #3
 8002024:	074b      	lsls	r3, r1, #29
 8002026:	433b      	orrs	r3, r7
 8002028:	08cc      	lsrs	r4, r1, #3
 800202a:	e667      	b.n	8001cfc <__aeabi_dsub+0x2f0>
 800202c:	000a      	movs	r2, r1
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	433a      	orrs	r2, r7
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x62a>
 8002034:	e66f      	b.n	8001d16 <__aeabi_dsub+0x30a>
 8002036:	4662      	mov	r2, ip
 8002038:	0752      	lsls	r2, r2, #29
 800203a:	4313      	orrs	r3, r2
 800203c:	4662      	mov	r2, ip
 800203e:	08d4      	lsrs	r4, r2, #3
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	0312      	lsls	r2, r2, #12
 8002044:	4214      	tst	r4, r2
 8002046:	d007      	beq.n	8002058 <__aeabi_dsub+0x64c>
 8002048:	08c8      	lsrs	r0, r1, #3
 800204a:	4210      	tst	r0, r2
 800204c:	d104      	bne.n	8002058 <__aeabi_dsub+0x64c>
 800204e:	465d      	mov	r5, fp
 8002050:	0004      	movs	r4, r0
 8002052:	08fb      	lsrs	r3, r7, #3
 8002054:	0749      	lsls	r1, r1, #29
 8002056:	430b      	orrs	r3, r1
 8002058:	0f5a      	lsrs	r2, r3, #29
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	0752      	lsls	r2, r2, #29
 8002060:	4313      	orrs	r3, r2
 8002062:	e65d      	b.n	8001d20 <__aeabi_dsub+0x314>
 8002064:	074b      	lsls	r3, r1, #29
 8002066:	08ff      	lsrs	r7, r7, #3
 8002068:	433b      	orrs	r3, r7
 800206a:	08cc      	lsrs	r4, r1, #3
 800206c:	e649      	b.n	8001d02 <__aeabi_dsub+0x2f6>
 800206e:	19dc      	adds	r4, r3, r7
 8002070:	429c      	cmp	r4, r3
 8002072:	419b      	sbcs	r3, r3
 8002074:	4461      	add	r1, ip
 8002076:	4689      	mov	r9, r1
 8002078:	425b      	negs	r3, r3
 800207a:	4499      	add	r9, r3
 800207c:	464b      	mov	r3, r9
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	d400      	bmi.n	8002084 <__aeabi_dsub+0x678>
 8002082:	e631      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8002084:	464a      	mov	r2, r9
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <__aeabi_dsub+0x6d8>)
 8002088:	401a      	ands	r2, r3
 800208a:	2301      	movs	r3, #1
 800208c:	4691      	mov	r9, r2
 800208e:	4698      	mov	r8, r3
 8002090:	e62a      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 8002092:	0016      	movs	r6, r2
 8002094:	4664      	mov	r4, ip
 8002096:	3e20      	subs	r6, #32
 8002098:	40f4      	lsrs	r4, r6
 800209a:	46a0      	mov	r8, r4
 800209c:	2a20      	cmp	r2, #32
 800209e:	d005      	beq.n	80020ac <__aeabi_dsub+0x6a0>
 80020a0:	2640      	movs	r6, #64	; 0x40
 80020a2:	4664      	mov	r4, ip
 80020a4:	1ab2      	subs	r2, r6, r2
 80020a6:	4094      	lsls	r4, r2
 80020a8:	4323      	orrs	r3, r4
 80020aa:	469a      	mov	sl, r3
 80020ac:	4654      	mov	r4, sl
 80020ae:	1e63      	subs	r3, r4, #1
 80020b0:	419c      	sbcs	r4, r3
 80020b2:	4643      	mov	r3, r8
 80020b4:	431c      	orrs	r4, r3
 80020b6:	e5db      	b.n	8001c70 <__aeabi_dsub+0x264>
 80020b8:	0002      	movs	r2, r0
 80020ba:	2400      	movs	r4, #0
 80020bc:	2300      	movs	r3, #0
 80020be:	e548      	b.n	8001b52 <__aeabi_dsub+0x146>
 80020c0:	19dc      	adds	r4, r3, r7
 80020c2:	42bc      	cmp	r4, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	4461      	add	r1, ip
 80020c8:	4689      	mov	r9, r1
 80020ca:	427f      	negs	r7, r7
 80020cc:	44b9      	add	r9, r7
 80020ce:	e738      	b.n	8001f42 <__aeabi_dsub+0x536>
 80020d0:	464b      	mov	r3, r9
 80020d2:	4323      	orrs	r3, r4
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x6cc>
 80020d6:	e69f      	b.n	8001e18 <__aeabi_dsub+0x40c>
 80020d8:	e606      	b.n	8001ce8 <__aeabi_dsub+0x2dc>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	000007fe 	.word	0x000007fe
 80020e0:	000007ff 	.word	0x000007ff
 80020e4:	ff7fffff 	.word	0xff7fffff
 80020e8:	08ff      	lsrs	r7, r7, #3
 80020ea:	074b      	lsls	r3, r1, #29
 80020ec:	433b      	orrs	r3, r7
 80020ee:	08cc      	lsrs	r4, r1, #3
 80020f0:	e616      	b.n	8001d20 <__aeabi_dsub+0x314>
 80020f2:	4662      	mov	r2, ip
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	0752      	lsls	r2, r2, #29
 80020f8:	4313      	orrs	r3, r2
 80020fa:	4662      	mov	r2, ip
 80020fc:	08d4      	lsrs	r4, r2, #3
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0312      	lsls	r2, r2, #12
 8002102:	4214      	tst	r4, r2
 8002104:	d007      	beq.n	8002116 <__aeabi_dsub+0x70a>
 8002106:	08c8      	lsrs	r0, r1, #3
 8002108:	4210      	tst	r0, r2
 800210a:	d104      	bne.n	8002116 <__aeabi_dsub+0x70a>
 800210c:	465d      	mov	r5, fp
 800210e:	0004      	movs	r4, r0
 8002110:	08fb      	lsrs	r3, r7, #3
 8002112:	0749      	lsls	r1, r1, #29
 8002114:	430b      	orrs	r3, r1
 8002116:	0f5a      	lsrs	r2, r3, #29
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	4313      	orrs	r3, r2
 8002120:	e5fe      	b.n	8001d20 <__aeabi_dsub+0x314>
 8002122:	2300      	movs	r3, #0
 8002124:	4a01      	ldr	r2, [pc, #4]	; (800212c <__aeabi_dsub+0x720>)
 8002126:	001c      	movs	r4, r3
 8002128:	e513      	b.n	8001b52 <__aeabi_dsub+0x146>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_dcmpun>:
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	0005      	movs	r5, r0
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <__aeabi_dcmpun+0x38>)
 8002136:	031c      	lsls	r4, r3, #12
 8002138:	0016      	movs	r6, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	030a      	lsls	r2, r1, #12
 800213e:	0049      	lsls	r1, r1, #1
 8002140:	0b12      	lsrs	r2, r2, #12
 8002142:	0d49      	lsrs	r1, r1, #21
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	4281      	cmp	r1, r0
 800214a:	d008      	beq.n	800215e <__aeabi_dcmpun+0x2e>
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <__aeabi_dcmpun+0x38>)
 800214e:	2000      	movs	r0, #0
 8002150:	4293      	cmp	r3, r2
 8002152:	d103      	bne.n	800215c <__aeabi_dcmpun+0x2c>
 8002154:	0020      	movs	r0, r4
 8002156:	4330      	orrs	r0, r6
 8002158:	1e43      	subs	r3, r0, #1
 800215a:	4198      	sbcs	r0, r3
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	2001      	movs	r0, #1
 8002160:	432a      	orrs	r2, r5
 8002162:	d1fb      	bne.n	800215c <__aeabi_dcmpun+0x2c>
 8002164:	e7f2      	b.n	800214c <__aeabi_dcmpun+0x1c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	000007ff 	.word	0x000007ff

0800216c <__aeabi_d2iz>:
 800216c:	000a      	movs	r2, r1
 800216e:	b530      	push	{r4, r5, lr}
 8002170:	4c13      	ldr	r4, [pc, #76]	; (80021c0 <__aeabi_d2iz+0x54>)
 8002172:	0053      	lsls	r3, r2, #1
 8002174:	0309      	lsls	r1, r1, #12
 8002176:	0005      	movs	r5, r0
 8002178:	0b09      	lsrs	r1, r1, #12
 800217a:	2000      	movs	r0, #0
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	0fd2      	lsrs	r2, r2, #31
 8002180:	42a3      	cmp	r3, r4
 8002182:	dd04      	ble.n	800218e <__aeabi_d2iz+0x22>
 8002184:	480f      	ldr	r0, [pc, #60]	; (80021c4 <__aeabi_d2iz+0x58>)
 8002186:	4283      	cmp	r3, r0
 8002188:	dd02      	ble.n	8002190 <__aeabi_d2iz+0x24>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_d2iz+0x5c>)
 800218c:	18d0      	adds	r0, r2, r3
 800218e:	bd30      	pop	{r4, r5, pc}
 8002190:	2080      	movs	r0, #128	; 0x80
 8002192:	0340      	lsls	r0, r0, #13
 8002194:	4301      	orrs	r1, r0
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <__aeabi_d2iz+0x60>)
 8002198:	1ac0      	subs	r0, r0, r3
 800219a:	281f      	cmp	r0, #31
 800219c:	dd08      	ble.n	80021b0 <__aeabi_d2iz+0x44>
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <__aeabi_d2iz+0x64>)
 80021a0:	1ac3      	subs	r3, r0, r3
 80021a2:	40d9      	lsrs	r1, r3
 80021a4:	000b      	movs	r3, r1
 80021a6:	4258      	negs	r0, r3
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	d1f0      	bne.n	800218e <__aeabi_d2iz+0x22>
 80021ac:	0018      	movs	r0, r3
 80021ae:	e7ee      	b.n	800218e <__aeabi_d2iz+0x22>
 80021b0:	4c08      	ldr	r4, [pc, #32]	; (80021d4 <__aeabi_d2iz+0x68>)
 80021b2:	40c5      	lsrs	r5, r0
 80021b4:	46a4      	mov	ip, r4
 80021b6:	4463      	add	r3, ip
 80021b8:	4099      	lsls	r1, r3
 80021ba:	000b      	movs	r3, r1
 80021bc:	432b      	orrs	r3, r5
 80021be:	e7f2      	b.n	80021a6 <__aeabi_d2iz+0x3a>
 80021c0:	000003fe 	.word	0x000003fe
 80021c4:	0000041d 	.word	0x0000041d
 80021c8:	7fffffff 	.word	0x7fffffff
 80021cc:	00000433 	.word	0x00000433
 80021d0:	00000413 	.word	0x00000413
 80021d4:	fffffbed 	.word	0xfffffbed

080021d8 <__aeabi_i2d>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2800      	cmp	r0, #0
 80021dc:	d016      	beq.n	800220c <__aeabi_i2d+0x34>
 80021de:	17c3      	asrs	r3, r0, #31
 80021e0:	18c5      	adds	r5, r0, r3
 80021e2:	405d      	eors	r5, r3
 80021e4:	0fc4      	lsrs	r4, r0, #31
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f826 	bl	8002238 <__clzsi2>
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <__aeabi_i2d+0x5c>)
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	280a      	cmp	r0, #10
 80021f2:	dc16      	bgt.n	8002222 <__aeabi_i2d+0x4a>
 80021f4:	0003      	movs	r3, r0
 80021f6:	002e      	movs	r6, r5
 80021f8:	3315      	adds	r3, #21
 80021fa:	409e      	lsls	r6, r3
 80021fc:	230b      	movs	r3, #11
 80021fe:	1a18      	subs	r0, r3, r0
 8002200:	40c5      	lsrs	r5, r0
 8002202:	0552      	lsls	r2, r2, #21
 8002204:	032d      	lsls	r5, r5, #12
 8002206:	0b2d      	lsrs	r5, r5, #12
 8002208:	0d53      	lsrs	r3, r2, #21
 800220a:	e003      	b.n	8002214 <__aeabi_i2d+0x3c>
 800220c:	2400      	movs	r4, #0
 800220e:	2300      	movs	r3, #0
 8002210:	2500      	movs	r5, #0
 8002212:	2600      	movs	r6, #0
 8002214:	051b      	lsls	r3, r3, #20
 8002216:	432b      	orrs	r3, r5
 8002218:	07e4      	lsls	r4, r4, #31
 800221a:	4323      	orrs	r3, r4
 800221c:	0030      	movs	r0, r6
 800221e:	0019      	movs	r1, r3
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	380b      	subs	r0, #11
 8002224:	4085      	lsls	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	2600      	movs	r6, #0
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d53      	lsrs	r3, r2, #21
 8002230:	e7f0      	b.n	8002214 <__aeabi_i2d+0x3c>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	0000041e 	.word	0x0000041e

08002238 <__clzsi2>:
 8002238:	211c      	movs	r1, #28
 800223a:	2301      	movs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0xe>
 8002242:	0c00      	lsrs	r0, r0, #16
 8002244:	3910      	subs	r1, #16
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	4298      	cmp	r0, r3
 800224a:	d301      	bcc.n	8002250 <__clzsi2+0x18>
 800224c:	0a00      	lsrs	r0, r0, #8
 800224e:	3908      	subs	r1, #8
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0x22>
 8002256:	0900      	lsrs	r0, r0, #4
 8002258:	3904      	subs	r1, #4
 800225a:	a202      	add	r2, pc, #8	; (adr r2, 8002264 <__clzsi2+0x2c>)
 800225c:	5c10      	ldrb	r0, [r2, r0]
 800225e:	1840      	adds	r0, r0, r1
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	02020304 	.word	0x02020304
 8002268:	01010101 	.word	0x01010101
	...

08002274 <__clzdi2>:
 8002274:	b510      	push	{r4, lr}
 8002276:	2900      	cmp	r1, #0
 8002278:	d103      	bne.n	8002282 <__clzdi2+0xe>
 800227a:	f7ff ffdd 	bl	8002238 <__clzsi2>
 800227e:	3020      	adds	r0, #32
 8002280:	e002      	b.n	8002288 <__clzdi2+0x14>
 8002282:	0008      	movs	r0, r1
 8002284:	f7ff ffd8 	bl	8002238 <__clzsi2>
 8002288:	bd10      	pop	{r4, pc}
 800228a:	46c0      	nop			; (mov r8, r8)

0800228c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	4cd9      	ldr	r4, [pc, #868]	; (80025f4 <main+0x368>)
 8002290:	44a5      	add	sp, r4
 8002292:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef hStat;
	uint8_t serialBuf[12] = {'\0'};
 8002294:	24a5      	movs	r4, #165	; 0xa5
 8002296:	0124      	lsls	r4, r4, #4
 8002298:	193b      	adds	r3, r7, r4
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	3304      	adds	r3, #4
 80022a0:	2208      	movs	r2, #8
 80022a2:	2100      	movs	r1, #0
 80022a4:	0018      	movs	r0, r3
 80022a6:	f004 fbbd 	bl	8006a24 <memset>
	uint8_t i2cBuf[8]={0};
 80022aa:	4bd3      	ldr	r3, [pc, #844]	; (80025f8 <main+0x36c>)
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
	uint8_t i2cBufRet[FIFO_SIZE]={0};
 80022b6:	4bd1      	ldr	r3, [pc, #836]	; (80025fc <main+0x370>)
 80022b8:	4dd1      	ldr	r5, [pc, #836]	; (8002600 <main+0x374>)
 80022ba:	195b      	adds	r3, r3, r5
 80022bc:	19db      	adds	r3, r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	2100      	movs	r1, #0
 80022ca:	0018      	movs	r0, r3
 80022cc:	f004 fbaa 	bl	8006a24 <memset>
	int16_t rawVal[3]={0};
 80022d0:	4bcc      	ldr	r3, [pc, #816]	; (8002604 <main+0x378>)
 80022d2:	195b      	adds	r3, r3, r5
 80022d4:	19db      	adds	r3, r3, r7
 80022d6:	0018      	movs	r0, r3
 80022d8:	2306      	movs	r3, #6
 80022da:	001a      	movs	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f004 fba1 	bl	8006a24 <memset>
	int16_t myVal[F_SAMP] = {0};
 80022e2:	4bc9      	ldr	r3, [pc, #804]	; (8002608 <main+0x37c>)
 80022e4:	195b      	adds	r3, r3, r5
 80022e6:	19db      	adds	r3, r3, r7
 80022e8:	0018      	movs	r0, r3
 80022ea:	23c8      	movs	r3, #200	; 0xc8
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	001a      	movs	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	f004 fb97 	bl	8006a24 <memset>
	int16_t fifoBytes = 0;
 80022f6:	4bc5      	ldr	r3, [pc, #788]	; (800260c <main+0x380>)
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
	int16_t nbrOverSize = 0;
 80022fe:	4bc4      	ldr	r3, [pc, #784]	; (8002610 <main+0x384>)
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2200      	movs	r2, #0
 8002304:	801a      	strh	r2, [r3, #0]

	uint16_t currentMemPos = 0;
 8002306:	4bc3      	ldr	r3, [pc, #780]	; (8002614 <main+0x388>)
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230e:	f000 fff3 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002312:	f000 fc65 	bl	8002be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002316:	f000 fd85 	bl	8002e24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800231a:	f000 fd53 	bl	8002dc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800231e:	f000 fcd5 	bl	8002ccc <MX_I2C1_Init>
  MX_TIM6_Init();
 8002322:	f000 fd13 	bl	8002d4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  sprintf(serialBuf, "Hello Boss   \r\n");
 8002326:	4abc      	ldr	r2, [pc, #752]	; (8002618 <main+0x38c>)
 8002328:	193b      	adds	r3, r7, r4
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f004 fb81 	bl	8006a34 <siprintf>
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002332:	2301      	movs	r3, #1
 8002334:	425b      	negs	r3, r3
 8002336:	0025      	movs	r5, r4
 8002338:	1939      	adds	r1, r7, r4
 800233a:	48b8      	ldr	r0, [pc, #736]	; (800261c <main+0x390>)
 800233c:	220c      	movs	r2, #12
 800233e:	f003 fddf 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002342:	23fa      	movs	r3, #250	; 0xfa
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	0018      	movs	r0, r3
 8002348:	f001 f846 	bl	80033d8 <HAL_Delay>

    //======================================================================
    // Check that communication is correct
    hStat = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADDR, REG_CHIPID, 1, HAL_MAX_DELAY);
 800234c:	4eb4      	ldr	r6, [pc, #720]	; (8002620 <main+0x394>)
 800234e:	19bc      	adds	r4, r7, r6
 8002350:	48b4      	ldr	r0, [pc, #720]	; (8002624 <main+0x398>)
 8002352:	2301      	movs	r3, #1
 8002354:	425b      	negs	r3, r3
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	2200      	movs	r2, #0
 800235c:	2128      	movs	r1, #40	; 0x28
 800235e:	f001 fb95 	bl	8003a8c <HAL_I2C_Master_Transmit>
 8002362:	0003      	movs	r3, r0
 8002364:	7023      	strb	r3, [r4, #0]
    if(hStat != HAL_OK){
 8002366:	19bb      	adds	r3, r7, r6
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <main+0xf0>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 800236e:	197b      	adds	r3, r7, r5
 8002370:	4aad      	ldr	r2, [pc, #692]	; (8002628 <main+0x39c>)
 8002372:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002374:	c313      	stmia	r3!, {r0, r1, r4}
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e028      	b.n	80023ce <main+0x142>
    } else {
  	  hStat = HAL_I2C_Master_Receive(&hi2c1, ACC_ADDR, i2cBufRet, 2, HAL_MAX_DELAY);
 800237c:	4da8      	ldr	r5, [pc, #672]	; (8002620 <main+0x394>)
 800237e:	197c      	adds	r4, r7, r5
 8002380:	23c9      	movs	r3, #201	; 0xc9
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	18fa      	adds	r2, r7, r3
 8002386:	48a7      	ldr	r0, [pc, #668]	; (8002624 <main+0x398>)
 8002388:	2301      	movs	r3, #1
 800238a:	425b      	negs	r3, r3
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2302      	movs	r3, #2
 8002390:	2128      	movs	r1, #40	; 0x28
 8002392:	f001 fc83 	bl	8003c9c <HAL_I2C_Master_Receive>
 8002396:	0003      	movs	r3, r0
 8002398:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 800239a:	197b      	adds	r3, r7, r5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <main+0x128>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 80023a2:	23a5      	movs	r3, #165	; 0xa5
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	4aa0      	ldr	r2, [pc, #640]	; (800262c <main+0x3a0>)
 80023aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023ac:	c313      	stmia	r3!, {r0, r1, r4}
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e00c      	b.n	80023ce <main+0x142>
  	  } else {
  		  sprintf((char*)serialBuf, "CtrlVal : %x \r\n", i2cBufRet[0]);
 80023b4:	4b91      	ldr	r3, [pc, #580]	; (80025fc <main+0x370>)
 80023b6:	4a92      	ldr	r2, [pc, #584]	; (8002600 <main+0x374>)
 80023b8:	189b      	adds	r3, r3, r2
 80023ba:	19db      	adds	r3, r3, r7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	001a      	movs	r2, r3
 80023c0:	499b      	ldr	r1, [pc, #620]	; (8002630 <main+0x3a4>)
 80023c2:	23a5      	movs	r3, #165	; 0xa5
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	0018      	movs	r0, r3
 80023ca:	f004 fb33 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 80023ce:	2301      	movs	r3, #1
 80023d0:	425b      	negs	r3, r3
 80023d2:	26a5      	movs	r6, #165	; 0xa5
 80023d4:	0136      	lsls	r6, r6, #4
 80023d6:	19b9      	adds	r1, r7, r6
 80023d8:	4890      	ldr	r0, [pc, #576]	; (800261c <main+0x390>)
 80023da:	220c      	movs	r2, #12
 80023dc:	f003 fd90 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 80023e0:	23fa      	movs	r3, #250	; 0xfa
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fff7 	bl	80033d8 <HAL_Delay>

    //======================================================================
    //Go out of sleep mode
    i2cBuf[0] = 0b00000010;
 80023ea:	4983      	ldr	r1, [pc, #524]	; (80025f8 <main+0x36c>)
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <main+0x394>)
 80023f4:	18fc      	adds	r4, r7, r3
 80023f6:	488b      	ldr	r0, [pc, #556]	; (8002624 <main+0x398>)
 80023f8:	2301      	movs	r3, #1
 80023fa:	425b      	negs	r3, r3
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2301      	movs	r3, #1
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	000d      	movs	r5, r1
 8002404:	187b      	adds	r3, r7, r1
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	2219      	movs	r2, #25
 800240c:	2128      	movs	r1, #40	; 0x28
 800240e:	f001 fd4d 	bl	8003eac <HAL_I2C_Mem_Write>
 8002412:	0003      	movs	r3, r0
 8002414:	7023      	strb	r3, [r4, #0]
    i2cBuf[0] = 0x00;
 8002416:	197b      	adds	r3, r7, r5
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 800241c:	4b80      	ldr	r3, [pc, #512]	; (8002620 <main+0x394>)
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <main+0x1a8>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 8002426:	19bb      	adds	r3, r7, r6
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <main+0x39c>)
 800242a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800242c:	c313      	stmia	r3!, {r0, r1, r4}
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e02c      	b.n	800248e <main+0x202>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG0, 1, i2cBufRet, 8, HAL_MAX_DELAY);
 8002434:	4d7a      	ldr	r5, [pc, #488]	; (8002620 <main+0x394>)
 8002436:	197c      	adds	r4, r7, r5
 8002438:	487a      	ldr	r0, [pc, #488]	; (8002624 <main+0x398>)
 800243a:	2301      	movs	r3, #1
 800243c:	425b      	negs	r3, r3
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	2308      	movs	r3, #8
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	23c9      	movs	r3, #201	; 0xc9
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	2219      	movs	r2, #25
 8002450:	2128      	movs	r1, #40	; 0x28
 8002452:	f001 fe59 	bl	8004108 <HAL_I2C_Mem_Read>
 8002456:	0003      	movs	r3, r0
 8002458:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 800245a:	197b      	adds	r3, r7, r5
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <main+0x1e8>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 8002462:	23a5      	movs	r3, #165	; 0xa5
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	4a70      	ldr	r2, [pc, #448]	; (800262c <main+0x3a0>)
 800246a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800246c:	c313      	stmia	r3!, {r0, r1, r4}
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00c      	b.n	800248e <main+0x202>
  	  } else {
  		  sprintf((char*)serialBuf, "OutSlp : %x \r\n", i2cBufRet[0]);
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <main+0x370>)
 8002476:	4a62      	ldr	r2, [pc, #392]	; (8002600 <main+0x374>)
 8002478:	189b      	adds	r3, r3, r2
 800247a:	19db      	adds	r3, r3, r7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	001a      	movs	r2, r3
 8002480:	496c      	ldr	r1, [pc, #432]	; (8002634 <main+0x3a8>)
 8002482:	23a5      	movs	r3, #165	; 0xa5
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	0018      	movs	r0, r3
 800248a:	f004 fad3 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 800248e:	2301      	movs	r3, #1
 8002490:	425b      	negs	r3, r3
 8002492:	26a5      	movs	r6, #165	; 0xa5
 8002494:	0136      	lsls	r6, r6, #4
 8002496:	19b9      	adds	r1, r7, r6
 8002498:	4860      	ldr	r0, [pc, #384]	; (800261c <main+0x390>)
 800249a:	220c      	movs	r2, #12
 800249c:	f003 fd30 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 80024a0:	23fa      	movs	r3, #250	; 0xfa
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 ff97 	bl	80033d8 <HAL_Delay>

    //======================================================================
    //Go in 2g mode
    i2cBuf[0] = 0x00;
 80024aa:	4953      	ldr	r1, [pc, #332]	; (80025f8 <main+0x36c>)
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <main+0x394>)
 80024b4:	18fc      	adds	r4, r7, r3
 80024b6:	485b      	ldr	r0, [pc, #364]	; (8002624 <main+0x398>)
 80024b8:	2301      	movs	r3, #1
 80024ba:	425b      	negs	r3, r3
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	000d      	movs	r5, r1
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	221a      	movs	r2, #26
 80024cc:	2128      	movs	r1, #40	; 0x28
 80024ce:	f001 fced 	bl	8003eac <HAL_I2C_Mem_Write>
 80024d2:	0003      	movs	r3, r0
 80024d4:	7023      	strb	r3, [r4, #0]
    i2cBuf[0] = 0x00;
 80024d6:	197b      	adds	r3, r7, r5
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <main+0x394>)
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <main+0x268>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 80024e6:	19bb      	adds	r3, r7, r6
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <main+0x39c>)
 80024ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ec:	c313      	stmia	r3!, {r0, r1, r4}
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e02c      	b.n	800254e <main+0x2c2>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBufRet, 8, HAL_MAX_DELAY);
 80024f4:	4d4a      	ldr	r5, [pc, #296]	; (8002620 <main+0x394>)
 80024f6:	197c      	adds	r4, r7, r5
 80024f8:	484a      	ldr	r0, [pc, #296]	; (8002624 <main+0x398>)
 80024fa:	2301      	movs	r3, #1
 80024fc:	425b      	negs	r3, r3
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2308      	movs	r3, #8
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	23c9      	movs	r3, #201	; 0xc9
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2301      	movs	r3, #1
 800250e:	221a      	movs	r2, #26
 8002510:	2128      	movs	r1, #40	; 0x28
 8002512:	f001 fdf9 	bl	8004108 <HAL_I2C_Mem_Read>
 8002516:	0003      	movs	r3, r0
 8002518:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 800251a:	197b      	adds	r3, r7, r5
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <main+0x2a8>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 8002522:	23a5      	movs	r3, #165	; 0xa5
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	4a40      	ldr	r2, [pc, #256]	; (800262c <main+0x3a0>)
 800252a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800252c:	c313      	stmia	r3!, {r0, r1, r4}
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e00c      	b.n	800254e <main+0x2c2>
  	  } else {
  		  sprintf((char*)serialBuf, "4gMode : %x  \r\n", i2cBufRet[0]);
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <main+0x370>)
 8002536:	4a32      	ldr	r2, [pc, #200]	; (8002600 <main+0x374>)
 8002538:	189b      	adds	r3, r3, r2
 800253a:	19db      	adds	r3, r3, r7
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	001a      	movs	r2, r3
 8002540:	493d      	ldr	r1, [pc, #244]	; (8002638 <main+0x3ac>)
 8002542:	23a5      	movs	r3, #165	; 0xa5
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	0018      	movs	r0, r3
 800254a:	f004 fa73 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 800254e:	2301      	movs	r3, #1
 8002550:	425b      	negs	r3, r3
 8002552:	26a5      	movs	r6, #165	; 0xa5
 8002554:	0136      	lsls	r6, r6, #4
 8002556:	19b9      	adds	r1, r7, r6
 8002558:	4830      	ldr	r0, [pc, #192]	; (800261c <main+0x390>)
 800255a:	220c      	movs	r2, #12
 800255c:	f003 fcd0 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002560:	23fa      	movs	r3, #250	; 0xfa
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	0018      	movs	r0, r3
 8002566:	f000 ff37 	bl	80033d8 <HAL_Delay>

    //======================================================================
    //Go in 12 bit fifo mode
    i2cBuf[0] = 0x00;
 800256a:	4923      	ldr	r1, [pc, #140]	; (80025f8 <main+0x36c>)
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <main+0x394>)
 8002574:	18fc      	adds	r4, r7, r3
 8002576:	482b      	ldr	r0, [pc, #172]	; (8002624 <main+0x398>)
 8002578:	2301      	movs	r3, #1
 800257a:	425b      	negs	r3, r3
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2301      	movs	r3, #1
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	000d      	movs	r5, r1
 8002584:	187b      	adds	r3, r7, r1
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2301      	movs	r3, #1
 800258a:	221a      	movs	r2, #26
 800258c:	2128      	movs	r1, #40	; 0x28
 800258e:	f001 fc8d 	bl	8003eac <HAL_I2C_Mem_Write>
 8002592:	0003      	movs	r3, r0
 8002594:	7023      	strb	r3, [r4, #0]
    i2cBuf[0] = 0x00;
 8002596:	197b      	adds	r3, r7, r5
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <main+0x394>)
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <main+0x328>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 80025a6:	19bb      	adds	r3, r7, r6
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <main+0x39c>)
 80025aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ac:	c313      	stmia	r3!, {r0, r1, r4}
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e050      	b.n	8002656 <main+0x3ca>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80025b4:	4d1a      	ldr	r5, [pc, #104]	; (8002620 <main+0x394>)
 80025b6:	197c      	adds	r4, r7, r5
 80025b8:	481a      	ldr	r0, [pc, #104]	; (8002624 <main+0x398>)
 80025ba:	2301      	movs	r3, #1
 80025bc:	425b      	negs	r3, r3
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	2301      	movs	r3, #1
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	23c9      	movs	r3, #201	; 0xc9
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	221a      	movs	r2, #26
 80025d0:	2128      	movs	r1, #40	; 0x28
 80025d2:	f001 fd99 	bl	8004108 <HAL_I2C_Mem_Read>
 80025d6:	0003      	movs	r3, r0
 80025d8:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 80025da:	197b      	adds	r3, r7, r5
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02c      	beq.n	800263c <main+0x3b0>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 80025e2:	23a5      	movs	r3, #165	; 0xa5
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <main+0x3a0>)
 80025ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ec:	c313      	stmia	r3!, {r0, r1, r4}
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e030      	b.n	8002656 <main+0x3ca>
 80025f4:	fffff584 	.word	0xfffff584
 80025f8:	00000a48 	.word	0x00000a48
 80025fc:	fffffbe0 	.word	0xfffffbe0
 8002600:	00000a68 	.word	0x00000a68
 8002604:	fffffbd8 	.word	0xfffffbd8
 8002608:	fffff598 	.word	0xfffff598
 800260c:	00000a66 	.word	0x00000a66
 8002610:	00000a64 	.word	0x00000a64
 8002614:	00000a62 	.word	0x00000a62
 8002618:	08008128 	.word	0x08008128
 800261c:	20000120 	.word	0x20000120
 8002620:	00000a5f 	.word	0x00000a5f
 8002624:	2000008c 	.word	0x2000008c
 8002628:	08008138 	.word	0x08008138
 800262c:	08008148 	.word	0x08008148
 8002630:	08008158 	.word	0x08008158
 8002634:	08008168 	.word	0x08008168
 8002638:	08008178 	.word	0x08008178
  	  } else {
  		  sprintf((char*)serialBuf, "4gMode : %x  \r\n", i2cBufRet[0]);
 800263c:	4bc2      	ldr	r3, [pc, #776]	; (8002948 <main+0x6bc>)
 800263e:	4ac3      	ldr	r2, [pc, #780]	; (800294c <main+0x6c0>)
 8002640:	189b      	adds	r3, r3, r2
 8002642:	19db      	adds	r3, r3, r7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	001a      	movs	r2, r3
 8002648:	49c1      	ldr	r1, [pc, #772]	; (8002950 <main+0x6c4>)
 800264a:	23a5      	movs	r3, #165	; 0xa5
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	0018      	movs	r0, r3
 8002652:	f004 f9ef 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002656:	2301      	movs	r3, #1
 8002658:	425b      	negs	r3, r3
 800265a:	26a5      	movs	r6, #165	; 0xa5
 800265c:	0136      	lsls	r6, r6, #4
 800265e:	19b9      	adds	r1, r7, r6
 8002660:	48bc      	ldr	r0, [pc, #752]	; (8002954 <main+0x6c8>)
 8002662:	220c      	movs	r2, #12
 8002664:	f003 fc4c 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002668:	23fa      	movs	r3, #250	; 0xfa
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	0018      	movs	r0, r3
 800266e:	f000 feb3 	bl	80033d8 <HAL_Delay>

    //======================================================================
    //Go in 800Hz
    i2cBuf[0] = 0x0B;
 8002672:	49b9      	ldr	r1, [pc, #740]	; (8002958 <main+0x6cc>)
 8002674:	187b      	adds	r3, r7, r1
 8002676:	220b      	movs	r2, #11
 8002678:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800267a:	4bb8      	ldr	r3, [pc, #736]	; (800295c <main+0x6d0>)
 800267c:	18fc      	adds	r4, r7, r3
 800267e:	48b8      	ldr	r0, [pc, #736]	; (8002960 <main+0x6d4>)
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2301      	movs	r3, #1
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	000d      	movs	r5, r1
 800268c:	187b      	adds	r3, r7, r1
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2301      	movs	r3, #1
 8002692:	221a      	movs	r2, #26
 8002694:	2128      	movs	r1, #40	; 0x28
 8002696:	f001 fc09 	bl	8003eac <HAL_I2C_Mem_Write>
 800269a:	0003      	movs	r3, r0
 800269c:	7023      	strb	r3, [r4, #0]
    i2cBuf[0] = 0x00;
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 80026a4:	4bad      	ldr	r3, [pc, #692]	; (800295c <main+0x6d0>)
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <main+0x430>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 80026ae:	19bb      	adds	r3, r7, r6
 80026b0:	4aac      	ldr	r2, [pc, #688]	; (8002964 <main+0x6d8>)
 80026b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026b4:	c313      	stmia	r3!, {r0, r1, r4}
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e02c      	b.n	8002716 <main+0x48a>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_ACC_CONFIG1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80026bc:	4da7      	ldr	r5, [pc, #668]	; (800295c <main+0x6d0>)
 80026be:	197c      	adds	r4, r7, r5
 80026c0:	48a7      	ldr	r0, [pc, #668]	; (8002960 <main+0x6d4>)
 80026c2:	2301      	movs	r3, #1
 80026c4:	425b      	negs	r3, r3
 80026c6:	9302      	str	r3, [sp, #8]
 80026c8:	2301      	movs	r3, #1
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	23c9      	movs	r3, #201	; 0xc9
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	221a      	movs	r2, #26
 80026d8:	2128      	movs	r1, #40	; 0x28
 80026da:	f001 fd15 	bl	8004108 <HAL_I2C_Mem_Read>
 80026de:	0003      	movs	r3, r0
 80026e0:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <main+0x470>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 80026ea:	23a5      	movs	r3, #165	; 0xa5
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	4a9d      	ldr	r2, [pc, #628]	; (8002968 <main+0x6dc>)
 80026f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026f4:	c313      	stmia	r3!, {r0, r1, r4}
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00c      	b.n	8002716 <main+0x48a>
  	  } else {
  		  sprintf((char*)serialBuf, "800 Hz : %x  \r\n", i2cBufRet[0]);
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <main+0x6bc>)
 80026fe:	4a93      	ldr	r2, [pc, #588]	; (800294c <main+0x6c0>)
 8002700:	189b      	adds	r3, r3, r2
 8002702:	19db      	adds	r3, r3, r7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	001a      	movs	r2, r3
 8002708:	4998      	ldr	r1, [pc, #608]	; (800296c <main+0x6e0>)
 800270a:	23a5      	movs	r3, #165	; 0xa5
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	0018      	movs	r0, r3
 8002712:	f004 f98f 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002716:	2301      	movs	r3, #1
 8002718:	425b      	negs	r3, r3
 800271a:	26a5      	movs	r6, #165	; 0xa5
 800271c:	0136      	lsls	r6, r6, #4
 800271e:	19b9      	adds	r1, r7, r6
 8002720:	488c      	ldr	r0, [pc, #560]	; (8002954 <main+0x6c8>)
 8002722:	220c      	movs	r2, #12
 8002724:	f003 fbec 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002728:	23fa      	movs	r3, #250	; 0xfa
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fe53 	bl	80033d8 <HAL_Delay>

    //======================================================================
    //x,y,z in fifo
    i2cBuf[0] = 0xE0;
 8002732:	4989      	ldr	r1, [pc, #548]	; (8002958 <main+0x6cc>)
 8002734:	187b      	adds	r3, r7, r1
 8002736:	22e0      	movs	r2, #224	; 0xe0
 8002738:	701a      	strb	r2, [r3, #0]
    hStat = HAL_I2C_Mem_Write(&hi2c1, ACC_ADDR, REG_FIFO_CONFIG0, 1, i2cBuf, 1, HAL_MAX_DELAY);
 800273a:	4b88      	ldr	r3, [pc, #544]	; (800295c <main+0x6d0>)
 800273c:	18fc      	adds	r4, r7, r3
 800273e:	4888      	ldr	r0, [pc, #544]	; (8002960 <main+0x6d4>)
 8002740:	2301      	movs	r3, #1
 8002742:	425b      	negs	r3, r3
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	2301      	movs	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	000d      	movs	r5, r1
 800274c:	187b      	adds	r3, r7, r1
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2301      	movs	r3, #1
 8002752:	2226      	movs	r2, #38	; 0x26
 8002754:	2128      	movs	r1, #40	; 0x28
 8002756:	f001 fba9 	bl	8003eac <HAL_I2C_Mem_Write>
 800275a:	0003      	movs	r3, r0
 800275c:	7023      	strb	r3, [r4, #0]
    i2cBuf[0] = 0x00;
 800275e:	197b      	adds	r3, r7, r5
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    if(hStat != HAL_OK){
 8002764:	4b7d      	ldr	r3, [pc, #500]	; (800295c <main+0x6d0>)
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <main+0x4f0>
  	  strcpy((char*)serialBuf, "Error Tx     \r\n");
 800276e:	19bb      	adds	r3, r7, r6
 8002770:	4a7c      	ldr	r2, [pc, #496]	; (8002964 <main+0x6d8>)
 8002772:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002774:	c313      	stmia	r3!, {r0, r1, r4}
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e02c      	b.n	80027d6 <main+0x54a>
    } else {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_CONFIG0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 800277c:	4d77      	ldr	r5, [pc, #476]	; (800295c <main+0x6d0>)
 800277e:	197c      	adds	r4, r7, r5
 8002780:	4877      	ldr	r0, [pc, #476]	; (8002960 <main+0x6d4>)
 8002782:	2301      	movs	r3, #1
 8002784:	425b      	negs	r3, r3
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	2301      	movs	r3, #1
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	23c9      	movs	r3, #201	; 0xc9
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	2226      	movs	r2, #38	; 0x26
 8002798:	2128      	movs	r1, #40	; 0x28
 800279a:	f001 fcb5 	bl	8004108 <HAL_I2C_Mem_Read>
 800279e:	0003      	movs	r3, r0
 80027a0:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <main+0x530>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 80027aa:	23a5      	movs	r3, #165	; 0xa5
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <main+0x6dc>)
 80027b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027b4:	c313      	stmia	r3!, {r0, r1, r4}
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e00c      	b.n	80027d6 <main+0x54a>
  	  } else {
  		  sprintf((char*)serialBuf, "xyz md : %x  \r\n", i2cBufRet[0]);
 80027bc:	4b62      	ldr	r3, [pc, #392]	; (8002948 <main+0x6bc>)
 80027be:	4a63      	ldr	r2, [pc, #396]	; (800294c <main+0x6c0>)
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	19db      	adds	r3, r3, r7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	001a      	movs	r2, r3
 80027c8:	4969      	ldr	r1, [pc, #420]	; (8002970 <main+0x6e4>)
 80027ca:	23a5      	movs	r3, #165	; 0xa5
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	0018      	movs	r0, r3
 80027d2:	f004 f92f 	bl	8006a34 <siprintf>
  	  }
    }
    HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 80027d6:	2301      	movs	r3, #1
 80027d8:	425b      	negs	r3, r3
 80027da:	22a5      	movs	r2, #165	; 0xa5
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	18b9      	adds	r1, r7, r2
 80027e0:	485c      	ldr	r0, [pc, #368]	; (8002954 <main+0x6c8>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	f003 fb8c 	bl	8005f00 <HAL_UART_Transmit>
    HAL_Delay(500);
 80027e8:	23fa      	movs	r3, #250	; 0xfa
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fdf3 	bl	80033d8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 80027f2:	4d5a      	ldr	r5, [pc, #360]	; (800295c <main+0x6d0>)
 80027f4:	197c      	adds	r4, r7, r5
 80027f6:	485a      	ldr	r0, [pc, #360]	; (8002960 <main+0x6d4>)
 80027f8:	2301      	movs	r3, #1
 80027fa:	425b      	negs	r3, r3
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	23c9      	movs	r3, #201	; 0xc9
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2212      	movs	r2, #18
 800280e:	2128      	movs	r1, #40	; 0x28
 8002810:	f001 fc7a 	bl	8004108 <HAL_I2C_Mem_Read>
 8002814:	0003      	movs	r3, r0
 8002816:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 8002818:	197b      	adds	r3, r7, r5
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00f      	beq.n	8002840 <main+0x5b4>
  		  strcpy((char*)serialBuf, "Error Rx2    \r\n");
 8002820:	21a5      	movs	r1, #165	; 0xa5
 8002822:	0109      	lsls	r1, r1, #4
 8002824:	187b      	adds	r3, r7, r1
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <main+0x6e8>)
 8002828:	ca31      	ldmia	r2!, {r0, r4, r5}
 800282a:	c331      	stmia	r3!, {r0, r4, r5}
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	601a      	str	r2, [r3, #0]
  		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002830:	2301      	movs	r3, #1
 8002832:	425b      	negs	r3, r3
 8002834:	1879      	adds	r1, r7, r1
 8002836:	4847      	ldr	r0, [pc, #284]	; (8002954 <main+0x6c8>)
 8002838:	220c      	movs	r2, #12
 800283a:	f003 fb61 	bl	8005f00 <HAL_UART_Transmit>
 800283e:	e007      	b.n	8002850 <main+0x5c4>
  	  } else {
  		  fifoBytes = i2cBufRet[0];
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <main+0x6bc>)
 8002842:	4a42      	ldr	r2, [pc, #264]	; (800294c <main+0x6c0>)
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <main+0x6ec>)
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	801a      	strh	r2, [r3, #0]
  	  }
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH1, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002850:	4d42      	ldr	r5, [pc, #264]	; (800295c <main+0x6d0>)
 8002852:	197c      	adds	r4, r7, r5
 8002854:	4842      	ldr	r0, [pc, #264]	; (8002960 <main+0x6d4>)
 8002856:	2301      	movs	r3, #1
 8002858:	425b      	negs	r3, r3
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	2301      	movs	r3, #1
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	23c9      	movs	r3, #201	; 0xc9
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2301      	movs	r3, #1
 800286a:	2213      	movs	r2, #19
 800286c:	2128      	movs	r1, #40	; 0x28
 800286e:	f001 fc4b 	bl	8004108 <HAL_I2C_Mem_Read>
 8002872:	0003      	movs	r3, r0
 8002874:	7023      	strb	r3, [r4, #0]
  	  if(hStat != HAL_OK){
 8002876:	197b      	adds	r3, r7, r5
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00f      	beq.n	800289e <main+0x612>
  		  strcpy((char*)serialBuf, "Error Rx     \r\n");
 800287e:	21a5      	movs	r1, #165	; 0xa5
 8002880:	0109      	lsls	r1, r1, #4
 8002882:	187b      	adds	r3, r7, r1
 8002884:	4a38      	ldr	r2, [pc, #224]	; (8002968 <main+0x6dc>)
 8002886:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002888:	c331      	stmia	r3!, {r0, r4, r5}
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	601a      	str	r2, [r3, #0]
  		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 800288e:	2301      	movs	r3, #1
 8002890:	425b      	negs	r3, r3
 8002892:	1879      	adds	r1, r7, r1
 8002894:	482f      	ldr	r0, [pc, #188]	; (8002954 <main+0x6c8>)
 8002896:	220c      	movs	r2, #12
 8002898:	f003 fb32 	bl	8005f00 <HAL_UART_Transmit>
 800289c:	e00c      	b.n	80028b8 <main+0x62c>
  	  } else {
  		  fifoBytes = fifoBytes | i2cBufRet[0]<<8;
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <main+0x6bc>)
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <main+0x6c0>)
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	19db      	adds	r3, r3, r7
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	b219      	sxth	r1, r3
 80028ac:	4a32      	ldr	r2, [pc, #200]	; (8002978 <main+0x6ec>)
 80028ae:	18bb      	adds	r3, r7, r2
 80028b0:	18ba      	adds	r2, r7, r2
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	801a      	strh	r2, [r3, #0]
  	  }
	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_DATA, 1, i2cBufRet, fifoBytes, HAL_MAX_DELAY);
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <main+0x6ec>)
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	4d27      	ldr	r5, [pc, #156]	; (800295c <main+0x6d0>)
 80028c0:	197c      	adds	r4, r7, r5
 80028c2:	4827      	ldr	r0, [pc, #156]	; (8002960 <main+0x6d4>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	4252      	negs	r2, r2
 80028c8:	9202      	str	r2, [sp, #8]
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	23c9      	movs	r3, #201	; 0xc9
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	2214      	movs	r2, #20
 80028d8:	2128      	movs	r1, #40	; 0x28
 80028da:	f001 fc15 	bl	8004108 <HAL_I2C_Mem_Read>
 80028de:	0003      	movs	r3, r0
 80028e0:	7023      	strb	r3, [r4, #0]
	  if(hStat != HAL_OK){
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00f      	beq.n	800290a <main+0x67e>
		  strcpy((char*)serialBuf, "Error Rx1    \r\n");
 80028ea:	21a5      	movs	r1, #165	; 0xa5
 80028ec:	0109      	lsls	r1, r1, #4
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <main+0x6f0>)
 80028f2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80028f4:	c331      	stmia	r3!, {r0, r4, r5}
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 80028fa:	2301      	movs	r3, #1
 80028fc:	425b      	negs	r3, r3
 80028fe:	1879      	adds	r1, r7, r1
 8002900:	4814      	ldr	r0, [pc, #80]	; (8002954 <main+0x6c8>)
 8002902:	220c      	movs	r2, #12
 8002904:	f003 fafc 	bl	8005f00 <HAL_UART_Transmit>
 8002908:	e105      	b.n	8002b16 <main+0x88a>
	  } else {
		  for(uint8_t i = 0; i<(fifoBytes/7); i++){
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <main+0x6f4>)
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e0f0      	b.n	8002af6 <main+0x86a>
			  if(currentMemPos >= F_SAMP){
 8002914:	491b      	ldr	r1, [pc, #108]	; (8002984 <main+0x6f8>)
 8002916:	187b      	adds	r3, r7, r1
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	23c8      	movs	r3, #200	; 0xc8
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	429a      	cmp	r2, r3
 8002920:	d30b      	bcc.n	800293a <main+0x6ae>
				  currentMemPos = 0;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	801a      	strh	r2, [r3, #0]
				  nbrOverSize++;
 8002928:	4917      	ldr	r1, [pc, #92]	; (8002988 <main+0x6fc>)
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2200      	movs	r2, #0
 800292e:	5e9b      	ldrsh	r3, [r3, r2]
 8002930:	b29b      	uxth	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	187b      	adds	r3, r7, r1
 8002938:	801a      	strh	r2, [r3, #0]
			  }
			  for(uint8_t j = 0; j<3; j++){
 800293a:	23a6      	movs	r3, #166	; 0xa6
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e076      	b.n	8002a34 <main+0x7a8>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	fffffbe0 	.word	0xfffffbe0
 800294c:	00000a68 	.word	0x00000a68
 8002950:	08008178 	.word	0x08008178
 8002954:	20000120 	.word	0x20000120
 8002958:	00000a48 	.word	0x00000a48
 800295c:	00000a5f 	.word	0x00000a5f
 8002960:	2000008c 	.word	0x2000008c
 8002964:	08008138 	.word	0x08008138
 8002968:	08008148 	.word	0x08008148
 800296c:	08008188 	.word	0x08008188
 8002970:	08008198 	.word	0x08008198
 8002974:	080081a8 	.word	0x080081a8
 8002978:	00000a66 	.word	0x00000a66
 800297c:	080081b8 	.word	0x080081b8
 8002980:	00000a61 	.word	0x00000a61
 8002984:	00000a62 	.word	0x00000a62
 8002988:	00000a64 	.word	0x00000a64
				  rawVal[j] = i2cBufRet[1+i*7+j*2] | i2cBufRet[2+i*7+j*2]<<4;
 800298c:	4d87      	ldr	r5, [pc, #540]	; (8002bac <main+0x920>)
 800298e:	197b      	adds	r3, r7, r5
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	0013      	movs	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	20a6      	movs	r0, #166	; 0xa6
 800299c:	0100      	lsls	r0, r0, #4
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	18d3      	adds	r3, r2, r3
 80029a6:	4a82      	ldr	r2, [pc, #520]	; (8002bb0 <main+0x924>)
 80029a8:	4c82      	ldr	r4, [pc, #520]	; (8002bb4 <main+0x928>)
 80029aa:	1912      	adds	r2, r2, r4
 80029ac:	19d2      	adds	r2, r2, r7
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	b219      	sxth	r1, r3
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	0013      	movs	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	183b      	adds	r3, r7, r0
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	4a7a      	ldr	r2, [pc, #488]	; (8002bb0 <main+0x924>)
 80029c8:	1912      	adds	r2, r2, r4
 80029ca:	19d2      	adds	r2, r2, r7
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	183a      	adds	r2, r7, r0
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	b219      	sxth	r1, r3
 80029da:	4b77      	ldr	r3, [pc, #476]	; (8002bb8 <main+0x92c>)
 80029dc:	191b      	adds	r3, r3, r4
 80029de:	19db      	adds	r3, r3, r7
 80029e0:	0052      	lsls	r2, r2, #1
 80029e2:	52d1      	strh	r1, [r2, r3]
				  if(i2cBufRet[2+i*7+j*2]>0x80){
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	0013      	movs	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	4a6d      	ldr	r2, [pc, #436]	; (8002bb0 <main+0x924>)
 80029fa:	1912      	adds	r2, r2, r4
 80029fc:	19d2      	adds	r2, r2, r7
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d910      	bls.n	8002a26 <main+0x79a>
					  rawVal[j] = rawVal[j] | 0xF<<12;
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	4b6b      	ldr	r3, [pc, #428]	; (8002bb8 <main+0x92c>)
 8002a0a:	191b      	adds	r3, r3, r4
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	5ed3      	ldrsh	r3, [r2, r3]
 8002a12:	183a      	adds	r2, r7, r0
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	4969      	ldr	r1, [pc, #420]	; (8002bbc <main+0x930>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	b219      	sxth	r1, r3
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <main+0x92c>)
 8002a1e:	191b      	adds	r3, r3, r4
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	52d1      	strh	r1, [r2, r3]
			  for(uint8_t j = 0; j<3; j++){
 8002a26:	21a6      	movs	r1, #166	; 0xa6
 8002a28:	0109      	lsls	r1, r1, #4
 8002a2a:	187b      	adds	r3, r7, r1
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	3201      	adds	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	23a6      	movs	r3, #166	; 0xa6
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d9a5      	bls.n	800298c <main+0x700>
				  }
			  }
			  myVal[currentMemPos] = sqrt(pow(rawVal[0],2) + pow(rawVal[1],2) + pow(rawVal[2],2));
 8002a40:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <main+0x92c>)
 8002a42:	4e5c      	ldr	r6, [pc, #368]	; (8002bb4 <main+0x928>)
 8002a44:	199b      	adds	r3, r3, r6
 8002a46:	19db      	adds	r3, r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	5e9b      	ldrsh	r3, [r3, r2]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff fbc3 	bl	80021d8 <__aeabi_i2d>
 8002a52:	2200      	movs	r2, #0
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	f004 fc56 	bl	8007308 <pow>
 8002a5c:	0004      	movs	r4, r0
 8002a5e:	000d      	movs	r5, r1
 8002a60:	4b55      	ldr	r3, [pc, #340]	; (8002bb8 <main+0x92c>)
 8002a62:	199b      	adds	r3, r3, r6
 8002a64:	19db      	adds	r3, r3, r7
 8002a66:	2202      	movs	r2, #2
 8002a68:	5e9b      	ldrsh	r3, [r3, r2]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff fbb4 	bl	80021d8 <__aeabi_i2d>
 8002a70:	2200      	movs	r2, #0
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	05db      	lsls	r3, r3, #23
 8002a76:	f004 fc47 	bl	8007308 <pow>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	0020      	movs	r0, r4
 8002a80:	0029      	movs	r1, r5
 8002a82:	f7fd fe19 	bl	80006b8 <__aeabi_dadd>
 8002a86:	0002      	movs	r2, r0
 8002a88:	000b      	movs	r3, r1
 8002a8a:	0014      	movs	r4, r2
 8002a8c:	001d      	movs	r5, r3
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <main+0x92c>)
 8002a90:	199b      	adds	r3, r3, r6
 8002a92:	19db      	adds	r3, r3, r7
 8002a94:	2204      	movs	r2, #4
 8002a96:	5e9b      	ldrsh	r3, [r3, r2]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff fb9d 	bl	80021d8 <__aeabi_i2d>
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	05db      	lsls	r3, r3, #23
 8002aa4:	f004 fc30 	bl	8007308 <pow>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	000b      	movs	r3, r1
 8002aac:	0020      	movs	r0, r4
 8002aae:	0029      	movs	r1, r5
 8002ab0:	f7fd fe02 	bl	80006b8 <__aeabi_dadd>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0010      	movs	r0, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	f004 fc92 	bl	80073e4 <sqrt>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	4d3e      	ldr	r5, [pc, #248]	; (8002bc0 <main+0x934>)
 8002ac6:	1979      	adds	r1, r7, r5
 8002ac8:	880c      	ldrh	r4, [r1, #0]
 8002aca:	0010      	movs	r0, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	f7ff fb4d 	bl	800216c <__aeabi_d2iz>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	b219      	sxth	r1, r3
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <main+0x938>)
 8002ad8:	199b      	adds	r3, r3, r6
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	0062      	lsls	r2, r4, #1
 8002ade:	52d1      	strh	r1, [r2, r3]
			  currentMemPos++;
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	881a      	ldrh	r2, [r3, #0]
 8002ae4:	197b      	adds	r3, r7, r5
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	801a      	strh	r2, [r3, #0]
		  for(uint8_t i = 0; i<(fifoBytes/7); i++){
 8002aea:	4930      	ldr	r1, [pc, #192]	; (8002bac <main+0x920>)
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	3201      	adds	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <main+0x920>)
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781c      	ldrb	r4, [r3, #0]
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <main+0x93c>)
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	5e9b      	ldrsh	r3, [r3, r2]
 8002b04:	2107      	movs	r1, #7
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7fd fb92 	bl	8000230 <__divsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	429c      	cmp	r4, r3
 8002b12:	da00      	bge.n	8002b16 <main+0x88a>
 8002b14:	e6fe      	b.n	8002914 <main+0x688>
		  }
	  }

	  if(currentMemPos == F_SAMP){
 8002b16:	492a      	ldr	r1, [pc, #168]	; (8002bc0 <main+0x934>)
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	23c8      	movs	r3, #200	; 0xc8
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d11b      	bne.n	8002b5c <main+0x8d0>
		  sprintf((char*)serialBuf, "%d:%d\r\n", myVal[F_SAMP - 1], currentMemPos+800*nbrOverSize);
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <main+0x938>)
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <main+0x928>)
 8002b28:	189b      	adds	r3, r3, r2
 8002b2a:	19db      	adds	r3, r3, r7
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <main+0x940>)
 8002b2e:	5e9b      	ldrsh	r3, [r3, r2]
 8002b30:	001c      	movs	r4, r3
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	8819      	ldrh	r1, [r3, #0]
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <main+0x944>)
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	5e9a      	ldrsh	r2, [r3, r2]
 8002b3e:	0013      	movs	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	18cb      	adds	r3, r1, r3
 8002b4c:	4921      	ldr	r1, [pc, #132]	; (8002bd4 <main+0x948>)
 8002b4e:	22a5      	movs	r2, #165	; 0xa5
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	18b8      	adds	r0, r7, r2
 8002b54:	0022      	movs	r2, r4
 8002b56:	f003 ff6d 	bl	8006a34 <siprintf>
 8002b5a:	e01d      	b.n	8002b98 <main+0x90c>
	  } else {
		  sprintf((char*)serialBuf, "%d,%d\r\n", myVal[currentMemPos], currentMemPos+800*nbrOverSize);
 8002b5c:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <main+0x934>)
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <main+0x938>)
 8002b64:	4813      	ldr	r0, [pc, #76]	; (8002bb4 <main+0x928>)
 8002b66:	181b      	adds	r3, r3, r0
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	0052      	lsls	r2, r2, #1
 8002b6c:	5ed3      	ldrsh	r3, [r2, r3]
 8002b6e:	001c      	movs	r4, r3
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	8819      	ldrh	r1, [r3, #0]
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <main+0x944>)
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	5e9a      	ldrsh	r2, [r3, r2]
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	015b      	lsls	r3, r3, #5
 8002b88:	18cb      	adds	r3, r1, r3
 8002b8a:	4913      	ldr	r1, [pc, #76]	; (8002bd8 <main+0x94c>)
 8002b8c:	22a5      	movs	r2, #165	; 0xa5
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	18b8      	adds	r0, r7, r2
 8002b92:	0022      	movs	r2, r4
 8002b94:	f003 ff4e 	bl	8006a34 <siprintf>
	  }
	  //sprintf((char*)serialBuf, "ffByte %d\r\n", rawVal[400][2]);
	  HAL_UART_Transmit(&huart2, serialBuf, sizeof(serialBuf), HAL_MAX_DELAY);
 8002b98:	2301      	movs	r3, #1
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	22a5      	movs	r2, #165	; 0xa5
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	480e      	ldr	r0, [pc, #56]	; (8002bdc <main+0x950>)
 8002ba4:	220c      	movs	r2, #12
 8002ba6:	f003 f9ab 	bl	8005f00 <HAL_UART_Transmit>
  	  hStat = HAL_I2C_Mem_Read(&hi2c1, ACC_ADDR, REG_FIFO_LENGTH0, 1, i2cBufRet, 1, HAL_MAX_DELAY);
 8002baa:	e622      	b.n	80027f2 <main+0x566>
 8002bac:	00000a61 	.word	0x00000a61
 8002bb0:	fffffbe0 	.word	0xfffffbe0
 8002bb4:	00000a68 	.word	0x00000a68
 8002bb8:	fffffbd8 	.word	0xfffffbd8
 8002bbc:	fffff000 	.word	0xfffff000
 8002bc0:	00000a62 	.word	0x00000a62
 8002bc4:	fffff598 	.word	0xfffff598
 8002bc8:	00000a66 	.word	0x00000a66
 8002bcc:	0000063e 	.word	0x0000063e
 8002bd0:	00000a64 	.word	0x00000a64
 8002bd4:	080081c8 	.word	0x080081c8
 8002bd8:	080081d0 	.word	0x080081d0
 8002bdc:	20000120 	.word	0x20000120

08002be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b09d      	sub	sp, #116	; 0x74
 8002be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002be6:	2438      	movs	r4, #56	; 0x38
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	0018      	movs	r0, r3
 8002bec:	2338      	movs	r3, #56	; 0x38
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f003 ff17 	bl	8006a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bf6:	2324      	movs	r3, #36	; 0x24
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2314      	movs	r3, #20
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f003 ff0f 	bl	8006a24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c06:	003b      	movs	r3, r7
 8002c08:	0018      	movs	r0, r3
 8002c0a:	2324      	movs	r3, #36	; 0x24
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f003 ff08 	bl	8006a24 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <SystemClock_Config+0xe4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <SystemClock_Config+0xe8>)
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <SystemClock_Config+0xe4>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0109      	lsls	r1, r1, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c26:	0021      	movs	r1, r4
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2201      	movs	r2, #1
 8002c32:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2210      	movs	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2200      	movs	r2, #0
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0312      	lsls	r2, r2, #12
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0412      	lsls	r2, r2, #16
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 ff9d 	bl	8004b98 <HAL_RCC_OscConfig>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002c62:	f000 f9cf 	bl	8003004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c66:	2124      	movs	r1, #36	; 0x24
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2203      	movs	r2, #3
 8002c72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2101      	movs	r1, #1
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f002 fb58 	bl	8005340 <HAL_RCC_ClockConfig>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d001      	beq.n	8002c98 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002c94:	f000 f9b6 	bl	8003004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002c98:	003b      	movs	r3, r7
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ca4:	003b      	movs	r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002caa:	003b      	movs	r3, r7
 8002cac:	0018      	movs	r0, r3
 8002cae:	f002 fd6b 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002cb6:	f000 f9a5 	bl	8003004 <Error_Handler>
  }
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b01d      	add	sp, #116	; 0x74
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	ffffe7ff 	.word	0xffffe7ff

08002ccc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <MX_I2C1_Init+0x78>)
 8002cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <MX_I2C1_Init+0x7c>)
 8002cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fe29 	bl	8003960 <HAL_I2C_Init>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d12:	f000 f977 	bl	8003004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f001 fea4 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 8002d20:	1e03      	subs	r3, r0, #0
 8002d22:	d001      	beq.n	8002d28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d24:	f000 f96e 	bl	8003004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <MX_I2C1_Init+0x74>)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f001 fee7 	bl	8004b00 <HAL_I2CEx_ConfigDigitalFilter>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d001      	beq.n	8002d3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d36:	f000 f965 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	2000008c 	.word	0x2000008c
 8002d44:	40005400 	.word	0x40005400
 8002d48:	00707cbb 	.word	0x00707cbb

08002d4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d52:	003b      	movs	r3, r7
 8002d54:	0018      	movs	r0, r3
 8002d56:	2308      	movs	r3, #8
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f003 fe62 	bl	8006a24 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <MX_TIM6_Init+0x70>)
 8002d64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d74:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <MX_TIM6_Init+0x74>)
 8002d76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f002 fe5d 	bl	8005a40 <HAL_TIM_Base_Init>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002d8a:	f000 f93b 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8e:	003b      	movs	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d94:	003b      	movs	r3, r7
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d9a:	003a      	movs	r2, r7
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <MX_TIM6_Init+0x6c>)
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f002 fffb 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002daa:	f000 f92b 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	200000e0 	.word	0x200000e0
 8002dbc:	40001000 	.word	0x40001000
 8002dc0:	0000ffff 	.word	0x0000ffff

08002dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <MX_USART2_UART_Init+0x5c>)
 8002dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dd0:	22e1      	movs	r2, #225	; 0xe1
 8002dd2:	0252      	lsls	r2, r2, #9
 8002dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dea:	220c      	movs	r2, #12
 8002dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <MX_USART2_UART_Init+0x58>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f003 f825 	bl	8005e58 <HAL_UART_Init>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e12:	f000 f8f7 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000120 	.word	0x20000120
 8002e20:	40004400 	.word	0x40004400

08002e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b08b      	sub	sp, #44	; 0x2c
 8002e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2a:	2414      	movs	r4, #20
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	0018      	movs	r0, r3
 8002e30:	2314      	movs	r3, #20
 8002e32:	001a      	movs	r2, r3
 8002e34:	2100      	movs	r1, #0
 8002e36:	f003 fdf5 	bl	8006a24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e46:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e56:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e58:	2102      	movs	r1, #2
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e5e:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e70:	2104      	movs	r1, #4
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e76:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e82:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e86:	4b5c      	ldr	r3, [pc, #368]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <MX_GPIO_Init+0x1d4>)
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	4013      	ands	r3, r2
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002e9a:	2394      	movs	r3, #148	; 0x94
 8002e9c:	0219      	lsls	r1, r3, #8
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 fd17 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8002eaa:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <MX_GPIO_Init+0x1d8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	2107      	movs	r1, #7
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fd11 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin;
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	2290      	movs	r2, #144	; 0x90
 8002eba:	0212      	lsls	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	2202      	movs	r2, #2
 8002ece:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	193a      	adds	r2, r7, r4
 8002ed2:	23a0      	movs	r3, #160	; 0xa0
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 fb7f 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	4a40      	ldr	r2, [pc, #256]	; (8003000 <MX_GPIO_Init+0x1dc>)
 8002f00:	0019      	movs	r1, r3
 8002f02:	0010      	movs	r0, r2
 8002f04:	f000 fb6a 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8002f08:	0021      	movs	r1, r4
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2213      	movs	r2, #19
 8002f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2288      	movs	r2, #136	; 0x88
 8002f14:	0352      	lsls	r2, r2, #13
 8002f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	000c      	movs	r4, r1
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	4a37      	ldr	r2, [pc, #220]	; (8003000 <MX_GPIO_Init+0x1dc>)
 8002f24:	0019      	movs	r1, r3
 8002f26:	0010      	movs	r0, r2
 8002f28:	f000 fb58 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8002f2c:	0021      	movs	r1, r4
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0192      	lsls	r2, r2, #6
 8002f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2288      	movs	r2, #136	; 0x88
 8002f3a:	0352      	lsls	r2, r2, #13
 8002f3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002f44:	000c      	movs	r4, r1
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <MX_GPIO_Init+0x1d8>)
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	f000 fb45 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f52:	0021      	movs	r1, r4
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	00d2      	lsls	r2, r2, #3
 8002f5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	000c      	movs	r4, r1
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2201      	movs	r2, #1
 8002f62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f70:	193a      	adds	r2, r7, r4
 8002f72:	23a0      	movs	r3, #160	; 0xa0
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fb2f 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2201      	movs	r2, #1
 8002f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2202      	movs	r2, #2
 8002f94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <MX_GPIO_Init+0x1d8>)
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f000 fb1d 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7_RESERVED_Pin PA6_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	22c0      	movs	r2, #192	; 0xc0
 8002fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2202      	movs	r2, #2
 8002fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	187a      	adds	r2, r7, r1
 8002fc4:	23a0      	movs	r3, #160	; 0xa0
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	0011      	movs	r1, r2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fb06 	bl	80035dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2005      	movs	r0, #5
 8002fd6:	f000 facf 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002fda:	2005      	movs	r0, #5
 8002fdc:	f000 fae1 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2007      	movs	r0, #7
 8002fe6:	f000 fac7 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002fea:	2007      	movs	r0, #7
 8002fec:	f000 fad9 	bl	80035a2 <HAL_NVIC_EnableIRQ>

}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b00b      	add	sp, #44	; 0x2c
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	50000800 	.word	0x50000800
 8003000:	50000400 	.word	0x50000400

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x8>
	...

08003010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_MspInit+0x24>)
 8003016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x24>)
 800301a:	2101      	movs	r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <HAL_MspInit+0x24>)
 8003022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_MspInit+0x24>)
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0549      	lsls	r1, r1, #21
 800302a:	430a      	orrs	r2, r1
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	240c      	movs	r4, #12
 8003042:	193b      	adds	r3, r7, r4
 8003044:	0018      	movs	r0, r3
 8003046:	2314      	movs	r3, #20
 8003048:	001a      	movs	r2, r3
 800304a:	2100      	movs	r1, #0
 800304c:	f003 fcea 	bl	8006a24 <memset>
  if(hi2c->Instance==I2C1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_I2C_MspInit+0xa8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d13e      	bne.n	80030d8 <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_I2C_MspInit+0xac>)
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_I2C_MspInit+0xac>)
 8003060:	2102      	movs	r1, #2
 8003062:	430a      	orrs	r2, r1
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_I2C_MspInit+0xac>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2202      	movs	r2, #2
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307a:	193b      	adds	r3, r7, r4
 800307c:	2212      	movs	r2, #18
 800307e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003080:	193b      	adds	r3, r7, r4
 8003082:	2201      	movs	r2, #1
 8003084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003086:	193b      	adds	r3, r7, r4
 8003088:	2203      	movs	r2, #3
 800308a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800308c:	193b      	adds	r3, r7, r4
 800308e:	2204      	movs	r2, #4
 8003090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	193b      	adds	r3, r7, r4
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_I2C_MspInit+0xb0>)
 8003096:	0019      	movs	r1, r3
 8003098:	0010      	movs	r0, r2
 800309a:	f000 fa9f 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800309e:	0021      	movs	r1, r4
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	2212      	movs	r2, #18
 80030aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2201      	movs	r2, #1
 80030b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2203      	movs	r2, #3
 80030b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2201      	movs	r2, #1
 80030bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_I2C_MspInit+0xb0>)
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f000 fa89 	bl	80035dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_I2C_MspInit+0xac>)
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_I2C_MspInit+0xac>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0389      	lsls	r1, r1, #14
 80030d4:	430a      	orrs	r2, r1
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b009      	add	sp, #36	; 0x24
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	40005400 	.word	0x40005400
 80030e4:	40021000 	.word	0x40021000
 80030e8:	50000400 	.word	0x50000400

080030ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_TIM_Base_MspInit+0x38>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10d      	bne.n	800311a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_TIM_Base_MspInit+0x3c>)
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_TIM_Base_MspInit+0x3c>)
 8003104:	2110      	movs	r1, #16
 8003106:	430a      	orrs	r2, r1
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2011      	movs	r0, #17
 8003110:	f000 fa32 	bl	8003578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003114:	2011      	movs	r0, #17
 8003116:	f000 fa44 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40001000 	.word	0x40001000
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	240c      	movs	r4, #12
 8003136:	193b      	adds	r3, r7, r4
 8003138:	0018      	movs	r0, r3
 800313a:	2314      	movs	r3, #20
 800313c:	001a      	movs	r2, r3
 800313e:	2100      	movs	r1, #0
 8003140:	f003 fc70 	bl	8006a24 <memset>
  if(huart->Instance==USART2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_UART_MspInit+0x80>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d129      	bne.n	80031a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <HAL_UART_MspInit+0x84>)
 8003150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_UART_MspInit+0x84>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0289      	lsls	r1, r1, #10
 8003158:	430a      	orrs	r2, r1
 800315a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_UART_MspInit+0x84>)
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_UART_MspInit+0x84>)
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_UART_MspInit+0x84>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	2201      	movs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003174:	0021      	movs	r1, r4
 8003176:	187b      	adds	r3, r7, r1
 8003178:	220c      	movs	r2, #12
 800317a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2202      	movs	r2, #2
 8003180:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2203      	movs	r2, #3
 800318c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2204      	movs	r2, #4
 8003192:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	187a      	adds	r2, r7, r1
 8003196:	23a0      	movs	r3, #160	; 0xa0
 8003198:	05db      	lsls	r3, r3, #23
 800319a:	0011      	movs	r1, r2
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fa1d 	bl	80035dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b009      	add	sp, #36	; 0x24
 80031a8:	bd90      	pop	{r4, r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	40004400 	.word	0x40004400
 80031b0:	40021000 	.word	0x40021000

080031b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <NMI_Handler+0x4>

080031ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <HardFault_Handler+0x4>

080031c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d8:	f000 f8e2 	bl	80033a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f000 fb94 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 80031ec:	2002      	movs	r0, #2
 80031ee:	f000 fb91 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 80031fc:	2010      	movs	r0, #16
 80031fe:	f000 fb89 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	0018      	movs	r0, r3
 8003208:	f000 fb84 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <TIM6_DAC_IRQHandler+0x14>)
 800321a:	0018      	movs	r0, r3
 800321c:	f002 fc50 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	200000e0 	.word	0x200000e0

0800322c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <_sbrk+0x5c>)
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <_sbrk+0x60>)
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <_sbrk+0x64>)
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <_sbrk+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <_sbrk+0x64>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d207      	bcs.n	800326c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800325c:	f003 fbb8 	bl	80069d0 <__errno>
 8003260:	0003      	movs	r3, r0
 8003262:	220c      	movs	r2, #12
 8003264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003266:	2301      	movs	r3, #1
 8003268:	425b      	negs	r3, r3
 800326a:	e009      	b.n	8003280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <_sbrk+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	18d2      	adds	r2, r2, r3
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <_sbrk+0x64>)
 800327c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b006      	add	sp, #24
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20005000 	.word	0x20005000
 800328c:	00000400 	.word	0x00000400
 8003290:	200001a8 	.word	0x200001a8
 8003294:	200001c0 	.word	0x200001c0

08003298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80032a6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032a8:	f7ff fff6 	bl	8003298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ae:	490d      	ldr	r1, [pc, #52]	; (80032e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <LoopForever+0xe>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80032c4:	4c0a      	ldr	r4, [pc, #40]	; (80032f0 <LoopForever+0x16>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032d2:	f003 fb83 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7fe ffd9 	bl	800228c <main>

080032da <LoopForever>:

LoopForever:
    b LoopForever
 80032da:	e7fe      	b.n	80032da <LoopForever>
   ldr   r0, =_estack
 80032dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032e8:	08008338 	.word	0x08008338
  ldr r2, =_sbss
 80032ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032f0:	200001c0 	.word	0x200001c0

080032f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC1_COMP_IRQHandler>
	...

080032f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_Init+0x3c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_Init+0x3c>)
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003310:	2000      	movs	r0, #0
 8003312:	f000 f811 	bl	8003338 <HAL_InitTick>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d003      	beq.n	8003322 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e001      	b.n	8003326 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003322:	f7ff fe75 	bl	8003010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40022000 	.word	0x40022000

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_InitTick+0x5c>)
 8003342:	681c      	ldr	r4, [r3, #0]
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_InitTick+0x60>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	0019      	movs	r1, r3
 800334a:	23fa      	movs	r3, #250	; 0xfa
 800334c:	0098      	lsls	r0, r3, #2
 800334e:	f7fc fee5 	bl	800011c <__udivsi3>
 8003352:	0003      	movs	r3, r0
 8003354:	0019      	movs	r1, r3
 8003356:	0020      	movs	r0, r4
 8003358:	f7fc fee0 	bl	800011c <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f92f 	bl	80035c2 <HAL_SYSTICK_Config>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e00f      	b.n	800338c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d80b      	bhi.n	800338a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	2301      	movs	r3, #1
 8003376:	425b      	negs	r3, r3
 8003378:	2200      	movs	r2, #0
 800337a:	0018      	movs	r0, r3
 800337c:	f000 f8fc 	bl	8003578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_InitTick+0x64>)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b003      	add	sp, #12
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	20000000 	.word	0x20000000
 8003398:	20000008 	.word	0x20000008
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_IncTick+0x1c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	001a      	movs	r2, r3
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_IncTick+0x20>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	18d2      	adds	r2, r2, r3
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_IncTick+0x20>)
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	20000008 	.word	0x20000008
 80033c0:	200001ac 	.word	0x200001ac

080033c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  return uwTick;
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <HAL_GetTick+0x10>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	200001ac 	.word	0x200001ac

080033d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	d005      	beq.n	80033fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_Delay+0x44>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	001a      	movs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	f7ff ffe0 	bl	80033c4 <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d8f7      	bhi.n	8003400 <HAL_Delay+0x28>
  {
  }
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000008 	.word	0x20000008

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	0002      	movs	r2, r0
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b7f      	cmp	r3, #127	; 0x7f
 8003432:	d809      	bhi.n	8003448 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	001a      	movs	r2, r3
 800343a:	231f      	movs	r3, #31
 800343c:	401a      	ands	r2, r3
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <__NVIC_EnableIRQ+0x30>)
 8003440:	2101      	movs	r1, #1
 8003442:	4091      	lsls	r1, r2
 8003444:	000a      	movs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
  }
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	0002      	movs	r2, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b7f      	cmp	r3, #127	; 0x7f
 8003468:	d828      	bhi.n	80034bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346a:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <__NVIC_SetPriority+0xd4>)
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b25b      	sxtb	r3, r3
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	33c0      	adds	r3, #192	; 0xc0
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	589b      	ldr	r3, [r3, r2]
 800347a:	1dfa      	adds	r2, r7, #7
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	0011      	movs	r1, r2
 8003480:	2203      	movs	r2, #3
 8003482:	400a      	ands	r2, r1
 8003484:	00d2      	lsls	r2, r2, #3
 8003486:	21ff      	movs	r1, #255	; 0xff
 8003488:	4091      	lsls	r1, r2
 800348a:	000a      	movs	r2, r1
 800348c:	43d2      	mvns	r2, r2
 800348e:	401a      	ands	r2, r3
 8003490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	401a      	ands	r2, r3
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	2303      	movs	r3, #3
 80034a2:	4003      	ands	r3, r0
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a8:	481f      	ldr	r0, [pc, #124]	; (8003528 <__NVIC_SetPriority+0xd4>)
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	430a      	orrs	r2, r1
 80034b4:	33c0      	adds	r3, #192	; 0xc0
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034ba:	e031      	b.n	8003520 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <__NVIC_SetPriority+0xd8>)
 80034be:	1dfb      	adds	r3, r7, #7
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	0019      	movs	r1, r3
 80034c4:	230f      	movs	r3, #15
 80034c6:	400b      	ands	r3, r1
 80034c8:	3b08      	subs	r3, #8
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3306      	adds	r3, #6
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	18d3      	adds	r3, r2, r3
 80034d2:	3304      	adds	r3, #4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1dfa      	adds	r2, r7, #7
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	0011      	movs	r1, r2
 80034dc:	2203      	movs	r2, #3
 80034de:	400a      	ands	r2, r1
 80034e0:	00d2      	lsls	r2, r2, #3
 80034e2:	21ff      	movs	r1, #255	; 0xff
 80034e4:	4091      	lsls	r1, r2
 80034e6:	000a      	movs	r2, r1
 80034e8:	43d2      	mvns	r2, r2
 80034ea:	401a      	ands	r2, r3
 80034ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	019b      	lsls	r3, r3, #6
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	401a      	ands	r2, r3
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	2303      	movs	r3, #3
 80034fe:	4003      	ands	r3, r0
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003504:	4809      	ldr	r0, [pc, #36]	; (800352c <__NVIC_SetPriority+0xd8>)
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	001c      	movs	r4, r3
 800350c:	230f      	movs	r3, #15
 800350e:	4023      	ands	r3, r4
 8003510:	3b08      	subs	r3, #8
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	430a      	orrs	r2, r1
 8003516:	3306      	adds	r3, #6
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	18c3      	adds	r3, r0, r3
 800351c:	3304      	adds	r3, #4
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b003      	add	sp, #12
 8003526:	bd90      	pop	{r4, r7, pc}
 8003528:	e000e100 	.word	0xe000e100
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1e5a      	subs	r2, r3, #1
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	045b      	lsls	r3, r3, #17
 8003540:	429a      	cmp	r2, r3
 8003542:	d301      	bcc.n	8003548 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003544:	2301      	movs	r3, #1
 8003546:	e010      	b.n	800356a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <SysTick_Config+0x44>)
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	3a01      	subs	r2, #1
 800354e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003550:	2301      	movs	r3, #1
 8003552:	425b      	negs	r3, r3
 8003554:	2103      	movs	r1, #3
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff ff7c 	bl	8003454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SysTick_Config+0x44>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SysTick_Config+0x44>)
 8003564:	2207      	movs	r2, #7
 8003566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003568:	2300      	movs	r3, #0
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	210f      	movs	r1, #15
 8003584:	187b      	adds	r3, r7, r1
 8003586:	1c02      	adds	r2, r0, #0
 8003588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	187b      	adds	r3, r7, r1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b25b      	sxtb	r3, r3
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff ff5d 	bl	8003454 <__NVIC_SetPriority>
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b004      	add	sp, #16
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	0002      	movs	r2, r0
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b25b      	sxtb	r3, r3
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff ff33 	bl	8003420 <__NVIC_EnableIRQ>
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b002      	add	sp, #8
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff ffaf 	bl	8003530 <SysTick_Config>
 80035d2:	0003      	movs	r3, r0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80035f2:	e155      	b.n	80038a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4091      	lsls	r1, r2
 80035fe:	000a      	movs	r2, r1
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d100      	bne.n	800360c <HAL_GPIO_Init+0x30>
 800360a:	e146      	b.n	800389a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	4013      	ands	r3, r2
 8003614:	2b01      	cmp	r3, #1
 8003616:	d005      	beq.n	8003624 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003620:	2b02      	cmp	r3, #2
 8003622:	d130      	bne.n	8003686 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	409a      	lsls	r2, r3
 8003632:	0013      	movs	r3, r2
 8003634:	43da      	mvns	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	0013      	movs	r3, r2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800365a:	2201      	movs	r2, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
 8003660:	0013      	movs	r3, r2
 8003662:	43da      	mvns	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	2201      	movs	r2, #1
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2203      	movs	r2, #3
 800368c:	4013      	ands	r3, r2
 800368e:	2b03      	cmp	r3, #3
 8003690:	d017      	beq.n	80036c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	409a      	lsls	r2, r3
 80036a0:	0013      	movs	r3, r2
 80036a2:	43da      	mvns	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	0013      	movs	r3, r2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d123      	bne.n	8003716 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	58d3      	ldr	r3, [r2, r3]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2207      	movs	r2, #7
 80036e0:	4013      	ands	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	409a      	lsls	r2, r3
 80036e8:	0013      	movs	r3, r2
 80036ea:	43da      	mvns	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2107      	movs	r1, #7
 80036fa:	400b      	ands	r3, r1
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	08da      	lsrs	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3208      	adds	r2, #8
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	43da      	mvns	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2203      	movs	r2, #3
 8003734:	401a      	ands	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	0013      	movs	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	23c0      	movs	r3, #192	; 0xc0
 8003750:	029b      	lsls	r3, r3, #10
 8003752:	4013      	ands	r3, r2
 8003754:	d100      	bne.n	8003758 <HAL_GPIO_Init+0x17c>
 8003756:	e0a0      	b.n	800389a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003758:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_GPIO_Init+0x2dc>)
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_GPIO_Init+0x2dc>)
 800375e:	2101      	movs	r1, #1
 8003760:	430a      	orrs	r2, r1
 8003762:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003764:	4a55      	ldr	r2, [pc, #340]	; (80038bc <HAL_GPIO_Init+0x2e0>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	589b      	ldr	r3, [r3, r2]
 8003770:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2203      	movs	r2, #3
 8003776:	4013      	ands	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	409a      	lsls	r2, r3
 800377e:	0013      	movs	r3, r2
 8003780:	43da      	mvns	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	23a0      	movs	r3, #160	; 0xa0
 800378c:	05db      	lsls	r3, r3, #23
 800378e:	429a      	cmp	r2, r3
 8003790:	d01f      	beq.n	80037d2 <HAL_GPIO_Init+0x1f6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_GPIO_Init+0x2e4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d019      	beq.n	80037ce <HAL_GPIO_Init+0x1f2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <HAL_GPIO_Init+0x2e8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_GPIO_Init+0x1ee>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a48      	ldr	r2, [pc, #288]	; (80038c8 <HAL_GPIO_Init+0x2ec>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00d      	beq.n	80037c6 <HAL_GPIO_Init+0x1ea>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a47      	ldr	r2, [pc, #284]	; (80038cc <HAL_GPIO_Init+0x2f0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <HAL_GPIO_Init+0x1e6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a46      	ldr	r2, [pc, #280]	; (80038d0 <HAL_GPIO_Init+0x2f4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_GPIO_Init+0x1e2>
 80037ba:	2305      	movs	r3, #5
 80037bc:	e00a      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037be:	2306      	movs	r3, #6
 80037c0:	e008      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e004      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037d2:	2300      	movs	r3, #0
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	2103      	movs	r1, #3
 80037d8:	400a      	ands	r2, r1
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	4093      	lsls	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e4:	4935      	ldr	r1, [pc, #212]	; (80038bc <HAL_GPIO_Init+0x2e0>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	035b      	lsls	r3, r3, #13
 800380a:	4013      	ands	r3, r2
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43da      	mvns	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	039b      	lsls	r3, r3, #14
 8003834:	4013      	ands	r3, r2
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	4013      	ands	r3, r2
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43da      	mvns	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	4013      	ands	r3, r2
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_GPIO_Init+0x2f8>)
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3301      	adds	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	40da      	lsrs	r2, r3
 80038a8:	1e13      	subs	r3, r2, #0
 80038aa:	d000      	beq.n	80038ae <HAL_GPIO_Init+0x2d2>
 80038ac:	e6a2      	b.n	80035f4 <HAL_GPIO_Init+0x18>
  }
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b006      	add	sp, #24
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40010000 	.word	0x40010000
 80038c0:	50000400 	.word	0x50000400
 80038c4:	50000800 	.word	0x50000800
 80038c8:	50000c00 	.word	0x50000c00
 80038cc:	50001000 	.word	0x50001000
 80038d0:	50001c00 	.word	0x50001c00
 80038d4:	40010400 	.word	0x40010400

080038d8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	0008      	movs	r0, r1
 80038e2:	0011      	movs	r1, r2
 80038e4:	1cbb      	adds	r3, r7, #2
 80038e6:	1c02      	adds	r2, r0, #0
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	1c7b      	adds	r3, r7, #1
 80038ec:	1c0a      	adds	r2, r1, #0
 80038ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f0:	1c7b      	adds	r3, r7, #1
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f8:	1cbb      	adds	r3, r7, #2
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003900:	e003      	b.n	800390a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003902:	1cbb      	adds	r3, r7, #2
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	4013      	ands	r3, r2
 800392a:	d008      	beq.n	800393e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f807 	bl	800394c <HAL_GPIO_EXTI_Callback>
  }
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	0002      	movs	r2, r0
 8003954:	1dbb      	adds	r3, r7, #6
 8003956:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e082      	b.n	8003a78 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2241      	movs	r2, #65	; 0x41
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff fb55 	bl	8003038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2241      	movs	r2, #65	; 0x41
 8003992:	2124      	movs	r1, #36	; 0x24
 8003994:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	438a      	bics	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_I2C_Init+0x120>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4931      	ldr	r1, [pc, #196]	; (8003a84 <HAL_I2C_Init+0x124>)
 80039c0:	400a      	ands	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d108      	bne.n	80039de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	0209      	lsls	r1, r1, #8
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e007      	b.n	80039ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2184      	movs	r1, #132	; 0x84
 80039e8:	0209      	lsls	r1, r1, #8
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d104      	bne.n	8003a00 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	491f      	ldr	r1, [pc, #124]	; (8003a88 <HAL_I2C_Init+0x128>)
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	491a      	ldr	r1, [pc, #104]	; (8003a84 <HAL_I2C_Init+0x124>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69d9      	ldr	r1, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2241      	movs	r2, #65	; 0x41
 8003a64:	2120      	movs	r1, #32
 8003a66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2242      	movs	r2, #66	; 0x42
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	f0ffffff 	.word	0xf0ffffff
 8003a84:	ffff7fff 	.word	0xffff7fff
 8003a88:	02008000 	.word	0x02008000

08003a8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b089      	sub	sp, #36	; 0x24
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	0008      	movs	r0, r1
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	0019      	movs	r1, r3
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	1c02      	adds	r2, r0, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	1c0a      	adds	r2, r1, #0
 8003aa8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2241      	movs	r2, #65	; 0x41
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d000      	beq.n	8003ab8 <HAL_I2C_Master_Transmit+0x2c>
 8003ab6:	e0e7      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Master_Transmit+0x3a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0e1      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2240      	movs	r2, #64	; 0x40
 8003aca:	2101      	movs	r1, #1
 8003acc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ace:	f7ff fc79 	bl	80033c4 <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	0219      	lsls	r1, r3, #8
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2319      	movs	r3, #25
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f000 fd2c 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2241      	movs	r2, #65	; 0x41
 8003af4:	2121      	movs	r1, #33	; 0x21
 8003af6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2242      	movs	r2, #66	; 0x42
 8003afc:	2110      	movs	r1, #16
 8003afe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2208      	movs	r2, #8
 8003b10:	18ba      	adds	r2, r7, r2
 8003b12:	8812      	ldrh	r2, [r2, #0]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2bff      	cmp	r3, #255	; 0xff
 8003b24:	d911      	bls.n	8003b4a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	22ff      	movs	r2, #255	; 0xff
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	045c      	lsls	r4, r3, #17
 8003b36:	230a      	movs	r3, #10
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	8819      	ldrh	r1, [r3, #0]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <HAL_I2C_Master_Transmit+0x208>)
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	0023      	movs	r3, r4
 8003b44:	f000 ff56 	bl	80049f4 <I2C_TransferConfig>
 8003b48:	e075      	b.n	8003c36 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	049c      	lsls	r4, r3, #18
 8003b5e:	230a      	movs	r3, #10
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	8819      	ldrh	r1, [r3, #0]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_I2C_Master_Transmit+0x208>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	0023      	movs	r3, r4
 8003b6c:	f000 ff42 	bl	80049f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b70:	e061      	b.n	8003c36 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fd2f 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e081      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03a      	beq.n	8003c36 <HAL_I2C_Master_Transmit+0x1aa>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d136      	bne.n	8003c36 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0013      	movs	r3, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	f000 fcb3 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e053      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d911      	bls.n	8003c10 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	045c      	lsls	r4, r3, #17
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	8819      	ldrh	r1, [r3, #0]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	0023      	movs	r3, r4
 8003c0a:	f000 fef3 	bl	80049f4 <I2C_TransferConfig>
 8003c0e:	e012      	b.n	8003c36 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	049c      	lsls	r4, r3, #18
 8003c24:	230a      	movs	r3, #10
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	8819      	ldrh	r1, [r3, #0]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	0023      	movs	r3, r4
 8003c32:	f000 fedf 	bl	80049f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d198      	bne.n	8003b72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fd0e 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e01a      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	490c      	ldr	r1, [pc, #48]	; (8003c98 <HAL_I2C_Master_Transmit+0x20c>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2241      	movs	r2, #65	; 0x41
 8003c70:	2120      	movs	r1, #32
 8003c72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2242      	movs	r2, #66	; 0x42
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b007      	add	sp, #28
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	80002000 	.word	0x80002000
 8003c98:	fe00e800 	.word	0xfe00e800

08003c9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	0008      	movs	r0, r1
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	0019      	movs	r1, r3
 8003caa:	230a      	movs	r3, #10
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	1c02      	adds	r2, r0, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	1c0a      	adds	r2, r1, #0
 8003cb8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d000      	beq.n	8003cc8 <HAL_I2C_Master_Receive+0x2c>
 8003cc6:	e0e8      	b.n	8003e9a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2240      	movs	r2, #64	; 0x40
 8003ccc:	5c9b      	ldrb	r3, [r3, r2]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Master_Receive+0x3a>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0e2      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2240      	movs	r2, #64	; 0x40
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cde:	f7ff fb71 	bl	80033c4 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	0219      	lsls	r1, r3, #8
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2319      	movs	r3, #25
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f000 fc24 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	1e03      	subs	r3, r0, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cd      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2241      	movs	r2, #65	; 0x41
 8003d04:	2122      	movs	r1, #34	; 0x22
 8003d06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2242      	movs	r2, #66	; 0x42
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	18ba      	adds	r2, r7, r2
 8003d22:	8812      	ldrh	r2, [r2, #0]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2bff      	cmp	r3, #255	; 0xff
 8003d34:	d911      	bls.n	8003d5a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	045c      	lsls	r4, r3, #17
 8003d46:	230a      	movs	r3, #10
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	8819      	ldrh	r1, [r3, #0]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_I2C_Master_Receive+0x208>)
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0023      	movs	r3, r4
 8003d54:	f000 fe4e 	bl	80049f4 <I2C_TransferConfig>
 8003d58:	e076      	b.n	8003e48 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	049c      	lsls	r4, r3, #18
 8003d6e:	230a      	movs	r3, #10
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	8819      	ldrh	r1, [r3, #0]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_I2C_Master_Receive+0x208>)
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	0023      	movs	r3, r4
 8003d7c:	f000 fe3a 	bl	80049f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d80:	e062      	b.n	8003e48 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 fcb1 	bl	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e082      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03a      	beq.n	8003e48 <HAL_I2C_Master_Receive+0x1ac>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d136      	bne.n	8003e48 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	0013      	movs	r3, r2
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	f000 fbaa 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e053      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2bff      	cmp	r3, #255	; 0xff
 8003dfc:	d911      	bls.n	8003e22 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	22ff      	movs	r2, #255	; 0xff
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	045c      	lsls	r4, r3, #17
 8003e0e:	230a      	movs	r3, #10
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	8819      	ldrh	r1, [r3, #0]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	0023      	movs	r3, r4
 8003e1c:	f000 fdea 	bl	80049f4 <I2C_TransferConfig>
 8003e20:	e012      	b.n	8003e48 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	049c      	lsls	r4, r3, #18
 8003e36:	230a      	movs	r3, #10
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	8819      	ldrh	r1, [r3, #0]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	0023      	movs	r3, r4
 8003e44:	f000 fdd6 	bl	80049f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d197      	bne.n	8003d82 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 fc05 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e01a      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	490b      	ldr	r1, [pc, #44]	; (8003ea8 <HAL_I2C_Master_Receive+0x20c>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2241      	movs	r2, #65	; 0x41
 8003e82:	2120      	movs	r1, #32
 8003e84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2242      	movs	r2, #66	; 0x42
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2240      	movs	r2, #64	; 0x40
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b007      	add	sp, #28
 8003ea2:	bd90      	pop	{r4, r7, pc}
 8003ea4:	80002400 	.word	0x80002400
 8003ea8:	fe00e800 	.word	0xfe00e800

08003eac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	000c      	movs	r4, r1
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	230a      	movs	r3, #10
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	1c22      	adds	r2, r4, #0
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	1c02      	adds	r2, r0, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	1dbb      	adds	r3, r7, #6
 8003ecc:	1c0a      	adds	r2, r1, #0
 8003ece:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2241      	movs	r2, #65	; 0x41
 8003ed4:	5c9b      	ldrb	r3, [r3, r2]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d000      	beq.n	8003ede <HAL_I2C_Mem_Write+0x32>
 8003edc:	e10c      	b.n	80040f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_I2C_Mem_Write+0x42>
 8003ee4:	232c      	movs	r3, #44	; 0x2c
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2280      	movs	r2, #128	; 0x80
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0ff      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2240      	movs	r2, #64	; 0x40
 8003efe:	5c9b      	ldrb	r3, [r3, r2]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2C_Mem_Write+0x5c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e0f8      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f10:	f7ff fa58 	bl	80033c4 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	0219      	lsls	r1, r3, #8
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	f000 fb0b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0e3      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2241      	movs	r2, #65	; 0x41
 8003f36:	2121      	movs	r1, #33	; 0x21
 8003f38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2242      	movs	r2, #66	; 0x42
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	222c      	movs	r2, #44	; 0x2c
 8003f52:	18ba      	adds	r2, r7, r2
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881c      	ldrh	r4, [r3, #0]
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	230a      	movs	r3, #10
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	8819      	ldrh	r1, [r3, #0]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	0023      	movs	r3, r4
 8003f7a:	f000 f9f9 	bl	8004370 <I2C_RequestMemoryWrite>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0b5      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2bff      	cmp	r3, #255	; 0xff
 8003f96:	d911      	bls.n	8003fbc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	045c      	lsls	r4, r3, #17
 8003fa8:	230a      	movs	r3, #10
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	8819      	ldrh	r1, [r3, #0]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	0023      	movs	r3, r4
 8003fb6:	f000 fd1d 	bl	80049f4 <I2C_TransferConfig>
 8003fba:	e012      	b.n	8003fe2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	049c      	lsls	r4, r3, #18
 8003fd0:	230a      	movs	r3, #10
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	8819      	ldrh	r1, [r3, #0]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	0023      	movs	r3, r4
 8003fde:	f000 fd09 	bl	80049f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 faf7 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003fee:	1e03      	subs	r3, r0, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e081      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d03a      	beq.n	80040a6 <HAL_I2C_Mem_Write+0x1fa>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d136      	bne.n	80040a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	0013      	movs	r3, r2
 8004042:	2200      	movs	r2, #0
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	f000 fa7b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e053      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2bff      	cmp	r3, #255	; 0xff
 800405a:	d911      	bls.n	8004080 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	22ff      	movs	r2, #255	; 0xff
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	b2da      	uxtb	r2, r3
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	045c      	lsls	r4, r3, #17
 800406c:	230a      	movs	r3, #10
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	8819      	ldrh	r1, [r3, #0]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0023      	movs	r3, r4
 800407a:	f000 fcbb 	bl	80049f4 <I2C_TransferConfig>
 800407e:	e012      	b.n	80040a6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	b2da      	uxtb	r2, r3
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	049c      	lsls	r4, r3, #18
 8004094:	230a      	movs	r3, #10
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	8819      	ldrh	r1, [r3, #0]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	0023      	movs	r3, r4
 80040a2:	f000 fca7 	bl	80049f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d198      	bne.n	8003fe2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fad6 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01a      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2220      	movs	r2, #32
 80040ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	490b      	ldr	r1, [pc, #44]	; (8004104 <HAL_I2C_Mem_Write+0x258>)
 80040d8:	400a      	ands	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2241      	movs	r2, #65	; 0x41
 80040e0:	2120      	movs	r1, #32
 80040e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2242      	movs	r2, #66	; 0x42
 80040e8:	2100      	movs	r1, #0
 80040ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b007      	add	sp, #28
 8004100:	bd90      	pop	{r4, r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	fe00e800 	.word	0xfe00e800

08004108 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	000c      	movs	r4, r1
 8004112:	0010      	movs	r0, r2
 8004114:	0019      	movs	r1, r3
 8004116:	230a      	movs	r3, #10
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	1c22      	adds	r2, r4, #0
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	2308      	movs	r3, #8
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	1dbb      	adds	r3, r7, #6
 8004128:	1c0a      	adds	r2, r1, #0
 800412a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2241      	movs	r2, #65	; 0x41
 8004130:	5c9b      	ldrb	r3, [r3, r2]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	d000      	beq.n	800413a <HAL_I2C_Mem_Read+0x32>
 8004138:	e110      	b.n	800435c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <HAL_I2C_Mem_Read+0x42>
 8004140:	232c      	movs	r3, #44	; 0x2c
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e103      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2240      	movs	r2, #64	; 0x40
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_I2C_Mem_Read+0x5c>
 8004160:	2302      	movs	r3, #2
 8004162:	e0fc      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	2101      	movs	r1, #1
 800416a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800416c:	f7ff f92a 	bl	80033c4 <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	0219      	lsls	r1, r3, #8
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2319      	movs	r3, #25
 8004180:	2201      	movs	r2, #1
 8004182:	f000 f9dd 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0e7      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2241      	movs	r2, #65	; 0x41
 8004192:	2122      	movs	r1, #34	; 0x22
 8004194:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2242      	movs	r2, #66	; 0x42
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	222c      	movs	r2, #44	; 0x2c
 80041ae:	18ba      	adds	r2, r7, r2
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	881c      	ldrh	r4, [r3, #0]
 80041be:	2308      	movs	r3, #8
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	230a      	movs	r3, #10
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	8819      	ldrh	r1, [r3, #0]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	0023      	movs	r3, r4
 80041d6:	f000 f92f 	bl	8004438 <I2C_RequestMemoryRead>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d005      	beq.n	80041ea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2240      	movs	r2, #64	; 0x40
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0b9      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2bff      	cmp	r3, #255	; 0xff
 80041f2:	d911      	bls.n	8004218 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	045c      	lsls	r4, r3, #17
 8004204:	230a      	movs	r3, #10
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	8819      	ldrh	r1, [r3, #0]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	4b56      	ldr	r3, [pc, #344]	; (8004368 <HAL_I2C_Mem_Read+0x260>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	0023      	movs	r3, r4
 8004212:	f000 fbef 	bl	80049f4 <I2C_TransferConfig>
 8004216:	e012      	b.n	800423e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	b2da      	uxtb	r2, r3
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	049c      	lsls	r4, r3, #18
 800422c:	230a      	movs	r3, #10
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	8819      	ldrh	r1, [r3, #0]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <HAL_I2C_Mem_Read+0x260>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	0023      	movs	r3, r4
 800423a:	f000 fbdb 	bl	80049f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	0013      	movs	r3, r2
 8004248:	2200      	movs	r2, #0
 800424a:	2104      	movs	r1, #4
 800424c:	f000 f978 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004250:	1e03      	subs	r3, r0, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e082      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03a      	beq.n	800430a <HAL_I2C_Mem_Read+0x202>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	d136      	bne.n	800430a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0013      	movs	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	f000 f949 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e053      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2bff      	cmp	r3, #255	; 0xff
 80042be:	d911      	bls.n	80042e4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	22ff      	movs	r2, #255	; 0xff
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	045c      	lsls	r4, r3, #17
 80042d0:	230a      	movs	r3, #10
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	8819      	ldrh	r1, [r3, #0]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	2300      	movs	r3, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	0023      	movs	r3, r4
 80042de:	f000 fb89 	bl	80049f4 <I2C_TransferConfig>
 80042e2:	e012      	b.n	800430a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	049c      	lsls	r4, r3, #18
 80042f8:	230a      	movs	r3, #10
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	8819      	ldrh	r1, [r3, #0]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	2300      	movs	r3, #0
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	0023      	movs	r3, r4
 8004306:	f000 fb75 	bl	80049f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d194      	bne.n	800423e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9a4 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e01a      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2220      	movs	r2, #32
 800432e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	490c      	ldr	r1, [pc, #48]	; (800436c <HAL_I2C_Mem_Read+0x264>)
 800433c:	400a      	ands	r2, r1
 800433e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2241      	movs	r2, #65	; 0x41
 8004344:	2120      	movs	r1, #32
 8004346:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2242      	movs	r2, #66	; 0x42
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b007      	add	sp, #28
 8004364:	bd90      	pop	{r4, r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	80002400 	.word	0x80002400
 800436c:	fe00e800 	.word	0xfe00e800

08004370 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	000c      	movs	r4, r1
 800437a:	0010      	movs	r0, r2
 800437c:	0019      	movs	r1, r3
 800437e:	250a      	movs	r5, #10
 8004380:	197b      	adds	r3, r7, r5
 8004382:	1c22      	adds	r2, r4, #0
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	2308      	movs	r3, #8
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	1c0a      	adds	r2, r1, #0
 8004392:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004394:	1dbb      	adds	r3, r7, #6
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	045c      	lsls	r4, r3, #17
 800439e:	197b      	adds	r3, r7, r5
 80043a0:	8819      	ldrh	r1, [r3, #0]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <I2C_RequestMemoryWrite+0xc4>)
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	0023      	movs	r3, r4
 80043aa:	f000 fb23 	bl	80049f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6a39      	ldr	r1, [r7, #32]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f911 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 80043ba:	1e03      	subs	r3, r0, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e033      	b.n	800442a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	1dbb      	adds	r3, r7, #6
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ca:	2308      	movs	r3, #8
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
 80043d8:	e019      	b.n	800440e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043da:	2308      	movs	r3, #8
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f8f2 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e014      	b.n	800442a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	2308      	movs	r3, #8
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	0013      	movs	r3, r2
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	f000 f890 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bdb0      	pop	{r4, r5, r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	80002000 	.word	0x80002000

08004438 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	000c      	movs	r4, r1
 8004442:	0010      	movs	r0, r2
 8004444:	0019      	movs	r1, r3
 8004446:	250a      	movs	r5, #10
 8004448:	197b      	adds	r3, r7, r5
 800444a:	1c22      	adds	r2, r4, #0
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	2308      	movs	r3, #8
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	1c0a      	adds	r2, r1, #0
 800445a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800445c:	1dbb      	adds	r3, r7, #6
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	197b      	adds	r3, r7, r5
 8004464:	8819      	ldrh	r1, [r3, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <I2C_RequestMemoryRead+0xc0>)
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	f000 fac1 	bl	80049f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	0018      	movs	r0, r3
 800447a:	f000 f8af 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 800447e:	1e03      	subs	r3, r0, #0
 8004480:	d001      	beq.n	8004486 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e033      	b.n	80044ee <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	1dbb      	adds	r3, r7, #6
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800448e:	2308      	movs	r3, #8
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e019      	b.n	80044d2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800449e:	2308      	movs	r3, #8
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	6a39      	ldr	r1, [r7, #32]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f890 	bl	80045dc <I2C_WaitOnTXISFlagUntilTimeout>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d001      	beq.n	80044c4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e014      	b.n	80044ee <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c4:	2308      	movs	r3, #8
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	0013      	movs	r3, r2
 80044dc:	2200      	movs	r2, #0
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	f000 f82e 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044e4:	1e03      	subs	r3, r0, #0
 80044e6:	d001      	beq.n	80044ec <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bdb0      	pop	{r4, r5, r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	80002000 	.word	0x80002000

080044fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2202      	movs	r2, #2
 800450c:	4013      	ands	r3, r2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d103      	bne.n	800451a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	2b01      	cmp	r3, #1
 8004526:	d007      	beq.n	8004538 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2101      	movs	r1, #1
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]
  }
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e030      	b.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	d02d      	beq.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe ff34 	bl	80033c4 <HAL_GetTick>
 800455c:	0002      	movs	r2, r0
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d122      	bne.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	425a      	negs	r2, r3
 800457e:	4153      	adcs	r3, r2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d113      	bne.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	2220      	movs	r2, #32
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2241      	movs	r2, #65	; 0x41
 800459c:	2120      	movs	r1, #32
 800459e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2242      	movs	r2, #66	; 0x42
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e00f      	b.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	425a      	negs	r2, r3
 80045c4:	4153      	adcs	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	001a      	movs	r2, r3
 80045ca:	1dfb      	adds	r3, r7, #7
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d0bf      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e8:	e032      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f8ff 	bl	80047f4 <I2C_IsErrorOccurred>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e030      	b.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	d025      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	f7fe fede 	bl	80033c4 <HAL_GetTick>
 8004608:	0002      	movs	r2, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	d302      	bcc.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11a      	bne.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2202      	movs	r2, #2
 8004622:	4013      	ands	r3, r2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d013      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	2220      	movs	r2, #32
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2241      	movs	r2, #65	; 0x41
 8004638:	2120      	movs	r1, #32
 800463a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2242      	movs	r2, #66	; 0x42
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2202      	movs	r2, #2
 8004658:	4013      	ands	r3, r2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d1c5      	bne.n	80045ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004674:	e02f      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f8b9 	bl	80047f4 <I2C_IsErrorOccurred>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d001      	beq.n	800468a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e02d      	b.n	80046e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fe fe9b 	bl	80033c4 <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11a      	bne.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2220      	movs	r2, #32
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d013      	beq.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	2220      	movs	r2, #32
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2241      	movs	r2, #65	; 0x41
 80046be:	2120      	movs	r1, #32
 80046c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2242      	movs	r2, #66	; 0x42
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2240      	movs	r2, #64	; 0x40
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e007      	b.n	80046e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2220      	movs	r2, #32
 80046de:	4013      	ands	r3, r2
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d1c8      	bne.n	8004676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046fc:	e06b      	b.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 f875 	bl	80047f4 <I2C_IsErrorOccurred>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d001      	beq.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e069      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	2b20      	cmp	r3, #32
 800471e:	d138      	bne.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2204      	movs	r2, #4
 8004728:	4013      	ands	r3, r2
 800472a:	2b04      	cmp	r3, #4
 800472c:	d105      	bne.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e055      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2210      	movs	r2, #16
 8004742:	4013      	ands	r3, r2
 8004744:	2b10      	cmp	r3, #16
 8004746:	d107      	bne.n	8004758 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2210      	movs	r2, #16
 800474e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2204      	movs	r2, #4
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
 8004756:	e002      	b.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2220      	movs	r2, #32
 8004764:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	491f      	ldr	r1, [pc, #124]	; (80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004772:	400a      	ands	r2, r1
 8004774:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2241      	movs	r2, #65	; 0x41
 800477a:	2120      	movs	r1, #32
 800477c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2242      	movs	r2, #66	; 0x42
 8004782:	2100      	movs	r1, #0
 8004784:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2240      	movs	r2, #64	; 0x40
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e029      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe fe17 	bl	80033c4 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d00f      	beq.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	2220      	movs	r2, #32
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2241      	movs	r2, #65	; 0x41
 80047c6:	2120      	movs	r1, #32
 80047c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e007      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2204      	movs	r2, #4
 80047de:	4013      	ands	r3, r2
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d18c      	bne.n	80046fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	fe00e800 	.word	0xfe00e800

080047f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b08b      	sub	sp, #44	; 0x2c
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2327      	movs	r3, #39	; 0x27
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2210      	movs	r2, #16
 800481c:	4013      	ands	r3, r2
 800481e:	d100      	bne.n	8004822 <I2C_IsErrorOccurred+0x2e>
 8004820:	e082      	b.n	8004928 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2210      	movs	r2, #16
 8004828:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800482a:	e060      	b.n	80048ee <I2C_IsErrorOccurred+0xfa>
 800482c:	2427      	movs	r4, #39	; 0x27
 800482e:	193b      	adds	r3, r7, r4
 8004830:	193a      	adds	r2, r7, r4
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	3301      	adds	r3, #1
 800483a:	d058      	beq.n	80048ee <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fe fdc2 	bl	80033c4 <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d306      	bcc.n	800485a <I2C_IsErrorOccurred+0x66>
 800484c:	193b      	adds	r3, r7, r4
 800484e:	193a      	adds	r2, r7, r4
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d149      	bne.n	80048ee <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4013      	ands	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004868:	2013      	movs	r0, #19
 800486a:	183b      	adds	r3, r7, r0
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	2142      	movs	r1, #66	; 0x42
 8004870:	5c52      	ldrb	r2, [r2, r1]
 8004872:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	401a      	ands	r2, r3
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	429a      	cmp	r2, r3
 8004886:	d126      	bne.n	80048d6 <I2C_IsErrorOccurred+0xe2>
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	429a      	cmp	r2, r3
 8004890:	d021      	beq.n	80048d6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004892:	183b      	adds	r3, r7, r0
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b20      	cmp	r3, #32
 8004898:	d01d      	beq.n	80048d6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	01c9      	lsls	r1, r1, #7
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ac:	f7fe fd8a 	bl	80033c4 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b4:	e00f      	b.n	80048d6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048b6:	f7fe fd85 	bl	80033c4 <HAL_GetTick>
 80048ba:	0002      	movs	r2, r0
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b19      	cmp	r3, #25
 80048c2:	d908      	bls.n	80048d6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4313      	orrs	r3, r2
 80048ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048cc:	2327      	movs	r3, #39	; 0x27
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

              break;
 80048d4:	e00b      	b.n	80048ee <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2220      	movs	r2, #32
 80048de:	4013      	ands	r3, r2
 80048e0:	2127      	movs	r1, #39	; 0x27
 80048e2:	187a      	adds	r2, r7, r1
 80048e4:	1879      	adds	r1, r7, r1
 80048e6:	7809      	ldrb	r1, [r1, #0]
 80048e8:	7011      	strb	r1, [r2, #0]
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d1e3      	bne.n	80048b6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2220      	movs	r2, #32
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d004      	beq.n	8004906 <I2C_IsErrorOccurred+0x112>
 80048fc:	2327      	movs	r3, #39	; 0x27
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d092      	beq.n	800482c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004906:	2327      	movs	r3, #39	; 0x27
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2220      	movs	r2, #32
 8004916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2204      	movs	r2, #4
 800491c:	4313      	orrs	r3, r2
 800491e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004920:	2327      	movs	r3, #39	; 0x27
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4013      	ands	r3, r2
 8004938:	d00c      	beq.n	8004954 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2201      	movs	r2, #1
 800493e:	4313      	orrs	r3, r2
 8004940:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	0052      	lsls	r2, r2, #1
 800494a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800494c:	2327      	movs	r3, #39	; 0x27
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4013      	ands	r3, r2
 800495c:	d00c      	beq.n	8004978 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2208      	movs	r2, #8
 8004962:	4313      	orrs	r3, r2
 8004964:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	00d2      	lsls	r2, r2, #3
 800496e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004970:	2327      	movs	r3, #39	; 0x27
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4013      	ands	r3, r2
 8004980:	d00c      	beq.n	800499c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2202      	movs	r2, #2
 8004986:	4313      	orrs	r3, r2
 8004988:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2280      	movs	r2, #128	; 0x80
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004994:	2327      	movs	r3, #39	; 0x27
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800499c:	2327      	movs	r3, #39	; 0x27
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01d      	beq.n	80049e2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fda7 	bl	80044fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	490d      	ldr	r1, [pc, #52]	; (80049f0 <I2C_IsErrorOccurred+0x1fc>)
 80049ba:	400a      	ands	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2241      	movs	r2, #65	; 0x41
 80049ce:	2120      	movs	r1, #32
 80049d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2242      	movs	r2, #66	; 0x42
 80049d6:	2100      	movs	r1, #0
 80049d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2240      	movs	r2, #64	; 0x40
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80049e2:	2327      	movs	r3, #39	; 0x27
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	781b      	ldrb	r3, [r3, #0]
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b00b      	add	sp, #44	; 0x2c
 80049ee:	bd90      	pop	{r4, r7, pc}
 80049f0:	fe00e800 	.word	0xfe00e800

080049f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	0008      	movs	r0, r1
 80049fe:	0011      	movs	r1, r2
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	240a      	movs	r4, #10
 8004a04:	193b      	adds	r3, r7, r4
 8004a06:	1c02      	adds	r2, r0, #0
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	2009      	movs	r0, #9
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	1c0a      	adds	r2, r1, #0
 8004a10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a12:	193b      	adds	r3, r7, r4
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	059b      	lsls	r3, r3, #22
 8004a18:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a1a:	183b      	adds	r3, r7, r0
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	0419      	lsls	r1, r3, #16
 8004a20:	23ff      	movs	r3, #255	; 0xff
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a3e:	0d51      	lsrs	r1, r2, #21
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	00d2      	lsls	r2, r2, #3
 8004a44:	400a      	ands	r2, r1
 8004a46:	4907      	ldr	r1, [pc, #28]	; (8004a64 <I2C_TransferConfig+0x70>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	43d2      	mvns	r2, r2
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	0011      	movs	r1, r2
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b007      	add	sp, #28
 8004a60:	bd90      	pop	{r4, r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	03ff63ff 	.word	0x03ff63ff

08004a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2241      	movs	r2, #65	; 0x41
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d138      	bne.n	8004af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e032      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	2101      	movs	r1, #1
 8004a92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	; 0x41
 8004a98:	2124      	movs	r1, #36	; 0x24
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4911      	ldr	r1, [pc, #68]	; (8004afc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2241      	movs	r2, #65	; 0x41
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	ffffefff 	.word	0xffffefff

08004b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2241      	movs	r2, #65	; 0x41
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d139      	bne.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	5c9b      	ldrb	r3, [r3, r2]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e033      	b.n	8004b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	2101      	movs	r1, #1
 8004b2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2241      	movs	r2, #65	; 0x41
 8004b30:	2124      	movs	r1, #36	; 0x24
 8004b32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2101      	movs	r1, #1
 8004b40:	438a      	bics	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2241      	movs	r2, #65	; 0x41
 8004b7a:	2120      	movs	r1, #32
 8004b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	fffff0ff 	.word	0xfffff0ff

08004b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b5b0      	push	{r4, r5, r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f000 fbbf 	bl	800532a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bac:	4bc9      	ldr	r3, [pc, #804]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	220c      	movs	r2, #12
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb6:	4bc7      	ldr	r3, [pc, #796]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d100      	bne.n	8004bce <HAL_RCC_OscConfig+0x36>
 8004bcc:	e07e      	b.n	8004ccc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d007      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCC_OscConfig+0x68>
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4bbb      	ldr	r3, [pc, #748]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	4013      	ands	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x5a>
 8004bf0:	e06b      	b.n	8004cca <HAL_RCC_OscConfig+0x132>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d167      	bne.n	8004cca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f000 fb95 	bl	800532a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x84>
 8004c0c:	4bb1      	ldr	r3, [pc, #708]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4bb0      	ldr	r3, [pc, #704]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	0249      	lsls	r1, r1, #9
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e027      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	23a0      	movs	r3, #160	; 0xa0
 8004c22:	02db      	lsls	r3, r3, #11
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d10e      	bne.n	8004c46 <HAL_RCC_OscConfig+0xae>
 8004c28:	4baa      	ldr	r3, [pc, #680]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4ba9      	ldr	r3, [pc, #676]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	02c9      	lsls	r1, r1, #11
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	4ba7      	ldr	r3, [pc, #668]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4ba6      	ldr	r3, [pc, #664]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0249      	lsls	r1, r1, #9
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e012      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c46:	4ba3      	ldr	r3, [pc, #652]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4ba2      	ldr	r3, [pc, #648]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c4c:	49a2      	ldr	r1, [pc, #648]	; (8004ed8 <HAL_RCC_OscConfig+0x340>)
 8004c4e:	400a      	ands	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4ba0      	ldr	r3, [pc, #640]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4b9c      	ldr	r3, [pc, #624]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b9b      	ldr	r3, [pc, #620]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c66:	499d      	ldr	r1, [pc, #628]	; (8004edc <HAL_RCC_OscConfig+0x344>)
 8004c68:	400a      	ands	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe fba6 	bl	80033c4 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7c:	e009      	b.n	8004c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7e:	f7fe fba1 	bl	80033c4 <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d902      	bls.n	8004c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	f000 fb4c 	bl	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c92:	4b90      	ldr	r3, [pc, #576]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d0ef      	beq.n	8004c7e <HAL_RCC_OscConfig+0xe6>
 8004c9e:	e015      	b.n	8004ccc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fb90 	bl	80033c4 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004caa:	f7fe fb8b 	bl	80033c4 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b64      	cmp	r3, #100	; 0x64
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e336      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cbc:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x112>
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d100      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x140>
 8004cd6:	e099      	b.n	8004e0c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004ce6:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b7a      	ldr	r3, [pc, #488]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004cec:	2120      	movs	r1, #32
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d13e      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1ec>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d13b      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004d0c:	4b71      	ldr	r3, [pc, #452]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2204      	movs	r2, #4
 8004d12:	4013      	ands	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_RCC_OscConfig+0x188>
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e304      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0x348>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	021a      	lsls	r2, r3, #8
 8004d30:	4b68      	ldr	r3, [pc, #416]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d36:	4b67      	ldr	r3, [pc, #412]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2209      	movs	r2, #9
 8004d3c:	4393      	bics	r3, r2
 8004d3e:	0019      	movs	r1, r3
 8004d40:	4b64      	ldr	r3, [pc, #400]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d48:	f000 fc42 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8004d4c:	0001      	movs	r1, r0
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	220f      	movs	r2, #15
 8004d56:	4013      	ands	r3, r2
 8004d58:	4a62      	ldr	r2, [pc, #392]	; (8004ee4 <HAL_RCC_OscConfig+0x34c>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	000a      	movs	r2, r1
 8004d5e:	40da      	lsrs	r2, r3
 8004d60:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_RCC_OscConfig+0x350>)
 8004d62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004d64:	4b61      	ldr	r3, [pc, #388]	; (8004eec <HAL_RCC_OscConfig+0x354>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2513      	movs	r5, #19
 8004d6a:	197c      	adds	r4, r7, r5
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fe fae3 	bl	8003338 <HAL_InitTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d046      	beq.n	8004e0c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004d7e:	197b      	adds	r3, r7, r5
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	e2d2      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d027      	beq.n	8004dda <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d8a:	4b52      	ldr	r3, [pc, #328]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2209      	movs	r2, #9
 8004d90:	4393      	bics	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fb12 	bl	80033c4 <HAL_GetTick>
 8004da0:	0003      	movs	r3, r0
 8004da2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fe fb0d 	bl	80033c4 <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e2b8      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d0f1      	beq.n	8004da6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	4b44      	ldr	r3, [pc, #272]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a46      	ldr	r2, [pc, #280]	; (8004ee0 <HAL_RCC_OscConfig+0x348>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	021a      	lsls	r2, r3, #8
 8004dd2:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
 8004dd8:	e018      	b.n	8004e0c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	438a      	bics	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fe faed 	bl	80033c4 <HAL_GetTick>
 8004dea:	0003      	movs	r3, r0
 8004dec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe fae8 	bl	80033c4 <HAL_GetTick>
 8004df4:	0002      	movs	r2, r0
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e293      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d1f1      	bne.n	8004df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	4013      	ands	r3, r2
 8004e14:	d100      	bne.n	8004e18 <HAL_RCC_OscConfig+0x280>
 8004e16:	e0a2      	b.n	8004f5e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d140      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x29e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e279      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e36:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <HAL_RCC_OscConfig+0x358>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e44:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	0a19      	lsrs	r1, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	061a      	lsls	r2, r3, #24
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	0b5b      	lsrs	r3, r3, #13
 8004e64:	3301      	adds	r3, #1
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	0212      	lsls	r2, r2, #8
 8004e6a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e6c:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	210f      	movs	r1, #15
 8004e74:	400b      	ands	r3, r1
 8004e76:	491b      	ldr	r1, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x34c>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCC_OscConfig+0x350>)
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_RCC_OscConfig+0x354>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2513      	movs	r5, #19
 8004e86:	197c      	adds	r4, r7, r5
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fe fa55 	bl	8003338 <HAL_InitTick>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004e92:	197b      	adds	r3, r7, r5
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d061      	beq.n	8004f5e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004e9a:	197b      	adds	r3, r7, r5
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	e244      	b.n	800532a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d040      	beq.n	8004f2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	0049      	lsls	r1, r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fa85 	bl	80033c4 <HAL_GetTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ebe:	e019      	b.n	8004ef4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ec0:	f7fe fa80 	bl	80033c4 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d912      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e22b      	b.n	800532a <HAL_RCC_OscConfig+0x792>
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	fffeffff 	.word	0xfffeffff
 8004edc:	fffbffff 	.word	0xfffbffff
 8004ee0:	ffffe0ff 	.word	0xffffe0ff
 8004ee4:	08008258 	.word	0x08008258
 8004ee8:	20000000 	.word	0x20000000
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ef4:	4bca      	ldr	r3, [pc, #808]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d0df      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f00:	4bc7      	ldr	r3, [pc, #796]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4ac7      	ldr	r2, [pc, #796]	; (8005224 <HAL_RCC_OscConfig+0x68c>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0e:	4bc4      	ldr	r3, [pc, #784]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f14:	4bc2      	ldr	r3, [pc, #776]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	0a19      	lsrs	r1, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	4bbf      	ldr	r3, [pc, #764]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	e019      	b.n	8004f5e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f2a:	4bbd      	ldr	r3, [pc, #756]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4bbc      	ldr	r3, [pc, #752]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f30:	49bd      	ldr	r1, [pc, #756]	; (8005228 <HAL_RCC_OscConfig+0x690>)
 8004f32:	400a      	ands	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fe fa45 	bl	80033c4 <HAL_GetTick>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f40:	f7fe fa40 	bl	80033c4 <HAL_GetTick>
 8004f44:	0002      	movs	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1eb      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f52:	4bb3      	ldr	r3, [pc, #716]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2208      	movs	r2, #8
 8004f64:	4013      	ands	r3, r2
 8004f66:	d036      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d019      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f70:	4bab      	ldr	r3, [pc, #684]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f74:	4baa      	ldr	r3, [pc, #680]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f76:	2101      	movs	r1, #1
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7c:	f7fe fa22 	bl	80033c4 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f86:	f7fe fa1d 	bl	80033c4 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1c8      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f98:	4ba1      	ldr	r3, [pc, #644]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d0f1      	beq.n	8004f86 <HAL_RCC_OscConfig+0x3ee>
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa4:	4b9e      	ldr	r3, [pc, #632]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa8:	4b9d      	ldr	r3, [pc, #628]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004faa:	2101      	movs	r1, #1
 8004fac:	438a      	bics	r2, r1
 8004fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb0:	f7fe fa08 	bl	80033c4 <HAL_GetTick>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fe fa03 	bl	80033c4 <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1ae      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fcc:	4b94      	ldr	r3, [pc, #592]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d1f1      	bne.n	8004fba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x44a>
 8004fe0:	e0ae      	b.n	8005140 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2023      	movs	r0, #35	; 0x23
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	055b      	lsls	r3, r3, #21
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d109      	bne.n	800500a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	4b8a      	ldr	r3, [pc, #552]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004ffc:	2180      	movs	r1, #128	; 0x80
 8004ffe:	0549      	lsls	r1, r1, #21
 8005000:	430a      	orrs	r2, r1
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005004:	183b      	adds	r3, r7, r0
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b88      	ldr	r3, [pc, #544]	; (800522c <HAL_RCC_OscConfig+0x694>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d11a      	bne.n	800504c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b85      	ldr	r3, [pc, #532]	; (800522c <HAL_RCC_OscConfig+0x694>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b84      	ldr	r3, [pc, #528]	; (800522c <HAL_RCC_OscConfig+0x694>)
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	0049      	lsls	r1, r1, #1
 8005020:	430a      	orrs	r2, r1
 8005022:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005024:	f7fe f9ce 	bl	80033c4 <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fe f9c9 	bl	80033c4 <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	; 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e174      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	4b7a      	ldr	r3, [pc, #488]	; (800522c <HAL_RCC_OscConfig+0x694>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4013      	ands	r3, r2
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x4d0>
 8005058:	4b71      	ldr	r3, [pc, #452]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 800505a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800505c:	4b70      	ldr	r3, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	0049      	lsls	r1, r1, #1
 8005062:	430a      	orrs	r2, r1
 8005064:	651a      	str	r2, [r3, #80]	; 0x50
 8005066:	e031      	b.n	80050cc <HAL_RCC_OscConfig+0x534>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10c      	bne.n	800508a <HAL_RCC_OscConfig+0x4f2>
 8005070:	4b6b      	ldr	r3, [pc, #428]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005074:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005076:	496c      	ldr	r1, [pc, #432]	; (8005228 <HAL_RCC_OscConfig+0x690>)
 8005078:	400a      	ands	r2, r1
 800507a:	651a      	str	r2, [r3, #80]	; 0x50
 800507c:	4b68      	ldr	r3, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 800507e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005080:	4b67      	ldr	r3, [pc, #412]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005082:	496b      	ldr	r1, [pc, #428]	; (8005230 <HAL_RCC_OscConfig+0x698>)
 8005084:	400a      	ands	r2, r1
 8005086:	651a      	str	r2, [r3, #80]	; 0x50
 8005088:	e020      	b.n	80050cc <HAL_RCC_OscConfig+0x534>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	23a0      	movs	r3, #160	; 0xa0
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	429a      	cmp	r2, r3
 8005094:	d10e      	bne.n	80050b4 <HAL_RCC_OscConfig+0x51c>
 8005096:	4b62      	ldr	r3, [pc, #392]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800509a:	4b61      	ldr	r3, [pc, #388]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	00c9      	lsls	r1, r1, #3
 80050a0:	430a      	orrs	r2, r1
 80050a2:	651a      	str	r2, [r3, #80]	; 0x50
 80050a4:	4b5e      	ldr	r3, [pc, #376]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050a8:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	0049      	lsls	r1, r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0x534>
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b8:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050ba:	495b      	ldr	r1, [pc, #364]	; (8005228 <HAL_RCC_OscConfig+0x690>)
 80050bc:	400a      	ands	r2, r1
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
 80050c0:	4b57      	ldr	r3, [pc, #348]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c4:	4b56      	ldr	r3, [pc, #344]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050c6:	495a      	ldr	r1, [pc, #360]	; (8005230 <HAL_RCC_OscConfig+0x698>)
 80050c8:	400a      	ands	r2, r1
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d4:	f7fe f976 	bl	80033c4 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050dc:	e009      	b.n	80050f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fe f971 	bl	80033c4 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	4a52      	ldr	r2, [pc, #328]	; (8005234 <HAL_RCC_OscConfig+0x69c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e11b      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f2:	4b4b      	ldr	r3, [pc, #300]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4013      	ands	r3, r2
 80050fc:	d0ef      	beq.n	80050de <HAL_RCC_OscConfig+0x546>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fe f960 	bl	80033c4 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005108:	e009      	b.n	800511e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fe f95b 	bl	80033c4 <HAL_GetTick>
 800510e:	0002      	movs	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	4a47      	ldr	r2, [pc, #284]	; (8005234 <HAL_RCC_OscConfig+0x69c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e105      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800511e:	4b40      	ldr	r3, [pc, #256]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4013      	ands	r3, r2
 8005128:	d1ef      	bne.n	800510a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800512a:	2323      	movs	r3, #35	; 0x23
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005138:	4b39      	ldr	r3, [pc, #228]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 800513a:	493f      	ldr	r1, [pc, #252]	; (8005238 <HAL_RCC_OscConfig+0x6a0>)
 800513c:	400a      	ands	r2, r1
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2220      	movs	r2, #32
 8005146:	4013      	ands	r3, r2
 8005148:	d049      	beq.n	80051de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d026      	beq.n	80051a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005152:	4b33      	ldr	r3, [pc, #204]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	4b32      	ldr	r3, [pc, #200]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005158:	2101      	movs	r1, #1
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005162:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005164:	2101      	movs	r1, #1
 8005166:	430a      	orrs	r2, r1
 8005168:	635a      	str	r2, [r3, #52]	; 0x34
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCC_OscConfig+0x6a4>)
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_RCC_OscConfig+0x6a4>)
 8005170:	2180      	movs	r1, #128	; 0x80
 8005172:	0189      	lsls	r1, r1, #6
 8005174:	430a      	orrs	r2, r1
 8005176:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fe f924 	bl	80033c4 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005182:	f7fe f91f 	bl	80033c4 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e0ca      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005194:	4b22      	ldr	r3, [pc, #136]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2202      	movs	r2, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d0f1      	beq.n	8005182 <HAL_RCC_OscConfig+0x5ea>
 800519e:	e01e      	b.n	80051de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80051a0:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80051a6:	2101      	movs	r1, #1
 80051a8:	438a      	bics	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	4b23      	ldr	r3, [pc, #140]	; (800523c <HAL_RCC_OscConfig+0x6a4>)
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <HAL_RCC_OscConfig+0x6a4>)
 80051b2:	4923      	ldr	r1, [pc, #140]	; (8005240 <HAL_RCC_OscConfig+0x6a8>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7fe f904 	bl	80033c4 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c2:	f7fe f8ff 	bl	80033c4 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0aa      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2202      	movs	r2, #2
 80051da:	4013      	ands	r3, r2
 80051dc:	d1f1      	bne.n	80051c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d100      	bne.n	80051e8 <HAL_RCC_OscConfig+0x650>
 80051e6:	e09f      	b.n	8005328 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x658>
 80051ee:	e078      	b.n	80052e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d159      	bne.n	80052ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80051fe:	4911      	ldr	r1, [pc, #68]	; (8005244 <HAL_RCC_OscConfig+0x6ac>)
 8005200:	400a      	ands	r2, r1
 8005202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005204:	f7fe f8de 	bl	80033c4 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800520c:	e01c      	b.n	8005248 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7fe f8d9 	bl	80033c4 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d915      	bls.n	8005248 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e084      	b.n	800532a <HAL_RCC_OscConfig+0x792>
 8005220:	40021000 	.word	0x40021000
 8005224:	ffff1fff 	.word	0xffff1fff
 8005228:	fffffeff 	.word	0xfffffeff
 800522c:	40007000 	.word	0x40007000
 8005230:	fffffbff 	.word	0xfffffbff
 8005234:	00001388 	.word	0x00001388
 8005238:	efffffff 	.word	0xefffffff
 800523c:	40010000 	.word	0x40010000
 8005240:	ffffdfff 	.word	0xffffdfff
 8005244:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005248:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	049b      	lsls	r3, r3, #18
 8005250:	4013      	ands	r3, r2
 8005252:	d1dc      	bne.n	800520e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005254:	4b37      	ldr	r3, [pc, #220]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a37      	ldr	r2, [pc, #220]	; (8005338 <HAL_RCC_OscConfig+0x7a0>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	431a      	orrs	r2, r3
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 8005270:	430a      	orrs	r2, r1
 8005272:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0449      	lsls	r1, r1, #17
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005282:	f7fe f89f 	bl	80033c4 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fe f89a 	bl	80033c4 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e045      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800529e:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	049b      	lsls	r3, r3, #18
 80052a6:	4013      	ands	r3, r2
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x6f4>
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b21      	ldr	r3, [pc, #132]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 80052b2:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCC_OscConfig+0x7a4>)
 80052b4:	400a      	ands	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe f884 	bl	80033c4 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fe f87f 	bl	80033c4 <HAL_GetTick>
 80052c6:	0002      	movs	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e02a      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052d4:	4b17      	ldr	r3, [pc, #92]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	049b      	lsls	r3, r3, #18
 80052dc:	4013      	ands	r3, r2
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x72a>
 80052e0:	e022      	b.n	8005328 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e01d      	b.n	800532a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_RCC_OscConfig+0x79c>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	2380      	movs	r3, #128	; 0x80
 80052f8:	025b      	lsls	r3, r3, #9
 80052fa:	401a      	ands	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	429a      	cmp	r2, r3
 8005302:	d10f      	bne.n	8005324 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	23f0      	movs	r3, #240	; 0xf0
 8005308:	039b      	lsls	r3, r3, #14
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	23c0      	movs	r3, #192	; 0xc0
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	401a      	ands	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b00a      	add	sp, #40	; 0x28
 8005330:	bdb0      	pop	{r4, r5, r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	40021000 	.word	0x40021000
 8005338:	ff02ffff 	.word	0xff02ffff
 800533c:	feffffff 	.word	0xfeffffff

08005340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e128      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4b96      	ldr	r3, [pc, #600]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	4013      	ands	r3, r2
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d91e      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	4393      	bics	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005374:	f7fe f826 	bl	80033c4 <HAL_GetTick>
 8005378:	0003      	movs	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537c:	e009      	b.n	8005392 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537e:	f7fe f821 	bl	80033c4 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	4a8a      	ldr	r2, [pc, #552]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e109      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b87      	ldr	r3, [pc, #540]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	4013      	ands	r3, r2
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d1ee      	bne.n	800537e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2202      	movs	r2, #2
 80053a6:	4013      	ands	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053aa:	4b83      	ldr	r3, [pc, #524]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	22f0      	movs	r2, #240	; 0xf0
 80053b0:	4393      	bics	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	d100      	bne.n	80053ca <HAL_RCC_ClockConfig+0x8a>
 80053c8:	e089      	b.n	80054de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d2:	4b79      	ldr	r3, [pc, #484]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	4013      	ands	r3, r2
 80053dc:	d120      	bne.n	8005420 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0e1      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ea:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	049b      	lsls	r3, r3, #18
 80053f2:	4013      	ands	r3, r2
 80053f4:	d114      	bne.n	8005420 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e0d5      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d106      	bne.n	8005410 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005402:	4b6d      	ldr	r3, [pc, #436]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2204      	movs	r2, #4
 8005408:	4013      	ands	r3, r2
 800540a:	d109      	bne.n	8005420 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0ca      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005410:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4013      	ands	r3, r2
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0c2      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005420:	4b65      	ldr	r3, [pc, #404]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2203      	movs	r2, #3
 8005426:	4393      	bics	r3, r2
 8005428:	0019      	movs	r1, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	4b62      	ldr	r3, [pc, #392]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005430:	430a      	orrs	r2, r1
 8005432:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005434:	f7fd ffc6 	bl	80033c4 <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d111      	bne.n	8005468 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005444:	e009      	b.n	800545a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005446:	f7fd ffbd 	bl	80033c4 <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	4a58      	ldr	r2, [pc, #352]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0a5      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800545a:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	220c      	movs	r2, #12
 8005460:	4013      	ands	r3, r2
 8005462:	2b08      	cmp	r3, #8
 8005464:	d1ef      	bne.n	8005446 <HAL_RCC_ClockConfig+0x106>
 8005466:	e03a      	b.n	80054de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d111      	bne.n	8005494 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005470:	e009      	b.n	8005486 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005472:	f7fd ffa7 	bl	80033c4 <HAL_GetTick>
 8005476:	0002      	movs	r2, r0
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	4a4d      	ldr	r2, [pc, #308]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e08f      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005486:	4b4c      	ldr	r3, [pc, #304]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	220c      	movs	r2, #12
 800548c:	4013      	ands	r3, r2
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d1ef      	bne.n	8005472 <HAL_RCC_ClockConfig+0x132>
 8005492:	e024      	b.n	80054de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d11b      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800549c:	e009      	b.n	80054b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549e:	f7fd ff91 	bl	80033c4 <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	4a42      	ldr	r2, [pc, #264]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e079      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b2:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	220c      	movs	r2, #12
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d1ef      	bne.n	800549e <HAL_RCC_ClockConfig+0x15e>
 80054be:	e00e      	b.n	80054de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c0:	f7fd ff80 	bl	80033c4 <HAL_GetTick>
 80054c4:	0002      	movs	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	4a3a      	ldr	r2, [pc, #232]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e068      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80054d4:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	220c      	movs	r2, #12
 80054da:	4013      	ands	r3, r2
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	4013      	ands	r3, r2
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d21e      	bcs.n	800552a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	4393      	bics	r3, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054fe:	f7fd ff61 	bl	80033c4 <HAL_GetTick>
 8005502:	0003      	movs	r3, r0
 8005504:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	e009      	b.n	800551c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005508:	f7fd ff5c 	bl	80033c4 <HAL_GetTick>
 800550c:	0002      	movs	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <HAL_RCC_ClockConfig+0x274>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e044      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551c:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <HAL_RCC_ClockConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	4013      	ands	r3, r2
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d1ee      	bne.n	8005508 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2204      	movs	r2, #4
 8005530:	4013      	ands	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a20      	ldr	r2, [pc, #128]	; (80055bc <HAL_RCC_ClockConfig+0x27c>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2208      	movs	r2, #8
 800554e:	4013      	ands	r3, r2
 8005550:	d00a      	beq.n	8005568 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005552:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_RCC_ClockConfig+0x280>)
 8005558:	4013      	ands	r3, r2
 800555a:	0019      	movs	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	00da      	lsls	r2, r3, #3
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005564:	430a      	orrs	r2, r1
 8005566:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005568:	f000 f832 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 800556c:	0001      	movs	r1, r0
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <HAL_RCC_ClockConfig+0x278>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	220f      	movs	r2, #15
 8005576:	4013      	ands	r3, r2
 8005578:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <HAL_RCC_ClockConfig+0x284>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	000a      	movs	r2, r1
 800557e:	40da      	lsrs	r2, r3
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCC_ClockConfig+0x288>)
 8005582:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_RCC_ClockConfig+0x28c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	250b      	movs	r5, #11
 800558a:	197c      	adds	r4, r7, r5
 800558c:	0018      	movs	r0, r3
 800558e:	f7fd fed3 	bl	8003338 <HAL_InitTick>
 8005592:	0003      	movs	r3, r0
 8005594:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005596:	197b      	adds	r3, r7, r5
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	0018      	movs	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b004      	add	sp, #16
 80055ac:	bdb0      	pop	{r4, r5, r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	40022000 	.word	0x40022000
 80055b4:	00001388 	.word	0x00001388
 80055b8:	40021000 	.word	0x40021000
 80055bc:	fffff8ff 	.word	0xfffff8ff
 80055c0:	ffffc7ff 	.word	0xffffc7ff
 80055c4:	08008258 	.word	0x08008258
 80055c8:	20000000 	.word	0x20000000
 80055cc:	20000004 	.word	0x20000004

080055d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80055d6:	4b4c      	ldr	r3, [pc, #304]	; (8005708 <HAL_RCC_GetSysClockFreq+0x138>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055de:	230c      	movs	r3, #12
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d014      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x40>
 80055e6:	d900      	bls.n	80055ea <HAL_RCC_GetSysClockFreq+0x1a>
 80055e8:	e07b      	b.n	80056e2 <HAL_RCC_GetSysClockFreq+0x112>
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d002      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x24>
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d00b      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0x3a>
 80055f2:	e076      	b.n	80056e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80055f4:	4b44      	ldr	r3, [pc, #272]	; (8005708 <HAL_RCC_GetSysClockFreq+0x138>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2210      	movs	r2, #16
 80055fa:	4013      	ands	r3, r2
 80055fc:	d002      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80055fe:	4b43      	ldr	r3, [pc, #268]	; (800570c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005600:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005602:	e07c      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005604:	4b42      	ldr	r3, [pc, #264]	; (8005710 <HAL_RCC_GetSysClockFreq+0x140>)
 8005606:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005608:	e079      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800560a:	4b42      	ldr	r3, [pc, #264]	; (8005714 <HAL_RCC_GetSysClockFreq+0x144>)
 800560c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800560e:	e076      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	0c9a      	lsrs	r2, r3, #18
 8005614:	230f      	movs	r3, #15
 8005616:	401a      	ands	r2, r3
 8005618:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <HAL_RCC_GetSysClockFreq+0x148>)
 800561a:	5c9b      	ldrb	r3, [r3, r2]
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	0d9a      	lsrs	r2, r3, #22
 8005622:	2303      	movs	r3, #3
 8005624:	4013      	ands	r3, r2
 8005626:	3301      	adds	r3, #1
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCC_GetSysClockFreq+0x138>)
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	025b      	lsls	r3, r3, #9
 8005632:	4013      	ands	r3, r2
 8005634:	d01a      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	4a35      	ldr	r2, [pc, #212]	; (8005714 <HAL_RCC_GetSysClockFreq+0x144>)
 8005640:	2300      	movs	r3, #0
 8005642:	69b8      	ldr	r0, [r7, #24]
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	f7fa ff3d 	bl	80004c4 <__aeabi_lmul>
 800564a:	0002      	movs	r2, r0
 800564c:	000b      	movs	r3, r1
 800564e:	0010      	movs	r0, r2
 8005650:	0019      	movs	r1, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f7fa ff11 	bl	8000484 <__aeabi_uldivmod>
 8005662:	0002      	movs	r2, r0
 8005664:	000b      	movs	r3, r1
 8005666:	0013      	movs	r3, r2
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	e037      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800566c:	4b26      	ldr	r3, [pc, #152]	; (8005708 <HAL_RCC_GetSysClockFreq+0x138>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2210      	movs	r2, #16
 8005672:	4013      	ands	r3, r2
 8005674:	d01a      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	4a23      	ldr	r2, [pc, #140]	; (800570c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005680:	2300      	movs	r3, #0
 8005682:	68b8      	ldr	r0, [r7, #8]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	f7fa ff1d 	bl	80004c4 <__aeabi_lmul>
 800568a:	0002      	movs	r2, r0
 800568c:	000b      	movs	r3, r1
 800568e:	0010      	movs	r0, r2
 8005690:	0019      	movs	r1, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f7fa fef1 	bl	8000484 <__aeabi_uldivmod>
 80056a2:	0002      	movs	r2, r0
 80056a4:	000b      	movs	r3, r1
 80056a6:	0013      	movs	r3, r2
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	e017      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	0018      	movs	r0, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	0019      	movs	r1, r3
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_RCC_GetSysClockFreq+0x140>)
 80056b6:	2300      	movs	r3, #0
 80056b8:	f7fa ff04 	bl	80004c4 <__aeabi_lmul>
 80056bc:	0002      	movs	r2, r0
 80056be:	000b      	movs	r3, r1
 80056c0:	0010      	movs	r0, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	001c      	movs	r4, r3
 80056c8:	2300      	movs	r3, #0
 80056ca:	001d      	movs	r5, r3
 80056cc:	0022      	movs	r2, r4
 80056ce:	002b      	movs	r3, r5
 80056d0:	f7fa fed8 	bl	8000484 <__aeabi_uldivmod>
 80056d4:	0002      	movs	r2, r0
 80056d6:	000b      	movs	r3, r1
 80056d8:	0013      	movs	r3, r2
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056e0:	e00d      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_GetSysClockFreq+0x138>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	0b5b      	lsrs	r3, r3, #13
 80056e8:	2207      	movs	r2, #7
 80056ea:	4013      	ands	r3, r2
 80056ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	3301      	adds	r3, #1
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	0212      	lsls	r2, r2, #8
 80056f6:	409a      	lsls	r2, r3
 80056f8:	0013      	movs	r3, r2
 80056fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	b00e      	add	sp, #56	; 0x38
 8005706:	bdb0      	pop	{r4, r5, r7, pc}
 8005708:	40021000 	.word	0x40021000
 800570c:	003d0900 	.word	0x003d0900
 8005710:	00f42400 	.word	0x00f42400
 8005714:	007a1200 	.word	0x007a1200
 8005718:	08008270 	.word	0x08008270

0800571c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <HAL_RCC_GetHCLKFreq+0x10>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	0018      	movs	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	20000000 	.word	0x20000000

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005734:	f7ff fff2 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005738:	0001      	movs	r1, r0
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	2207      	movs	r2, #7
 8005742:	4013      	ands	r3, r2
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	40d9      	lsrs	r1, r3
 800574a:	000b      	movs	r3, r1
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	40021000 	.word	0x40021000
 8005758:	08008268 	.word	0x08008268

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005760:	f7ff ffdc 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005764:	0001      	movs	r1, r0
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	0adb      	lsrs	r3, r3, #11
 800576c:	2207      	movs	r2, #7
 800576e:	4013      	ands	r3, r2
 8005770:	4a04      	ldr	r2, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005772:	5cd3      	ldrb	r3, [r2, r3]
 8005774:	40d9      	lsrs	r1, r3
 8005776:	000b      	movs	r3, r1
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	40021000 	.word	0x40021000
 8005784:	08008268 	.word	0x08008268

08005788 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005790:	2017      	movs	r0, #23
 8005792:	183b      	adds	r3, r7, r0
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2220      	movs	r2, #32
 800579e:	4013      	ands	r3, r2
 80057a0:	d100      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80057a2:	e0c7      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a4:	4b9b      	ldr	r3, [pc, #620]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	055b      	lsls	r3, r3, #21
 80057ac:	4013      	ands	r3, r2
 80057ae:	d109      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b98      	ldr	r3, [pc, #608]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b4:	4b97      	ldr	r3, [pc, #604]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	0549      	lsls	r1, r1, #21
 80057ba:	430a      	orrs	r2, r1
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	4b94      	ldr	r3, [pc, #592]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	d11a      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d0:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b90      	ldr	r3, [pc, #576]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057d6:	2180      	movs	r1, #128	; 0x80
 80057d8:	0049      	lsls	r1, r1, #1
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057de:	f7fd fdf1 	bl	80033c4 <HAL_GetTick>
 80057e2:	0003      	movs	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e6:	e008      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e8:	f7fd fdec 	bl	80033c4 <HAL_GetTick>
 80057ec:	0002      	movs	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e107      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4013      	ands	r3, r2
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005806:	4b83      	ldr	r3, [pc, #524]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	23c0      	movs	r3, #192	; 0xc0
 800580c:	039b      	lsls	r3, r3, #14
 800580e:	4013      	ands	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	23c0      	movs	r3, #192	; 0xc0
 8005818:	039b      	lsls	r3, r3, #14
 800581a:	4013      	ands	r3, r2
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	429a      	cmp	r2, r3
 8005820:	d013      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	23c0      	movs	r3, #192	; 0xc0
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	401a      	ands	r2, r3
 800582c:	23c0      	movs	r3, #192	; 0xc0
 800582e:	029b      	lsls	r3, r3, #10
 8005830:	429a      	cmp	r2, r3
 8005832:	d10a      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005834:	4b77      	ldr	r3, [pc, #476]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	401a      	ands	r2, r3
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	429a      	cmp	r2, r3
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0df      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800584a:	4b72      	ldr	r3, [pc, #456]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800584c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800584e:	23c0      	movs	r3, #192	; 0xc0
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	4013      	ands	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	23c0      	movs	r3, #192	; 0xc0
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	4013      	ands	r3, r2
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d033      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2220      	movs	r2, #32
 8005872:	4013      	ands	r3, r2
 8005874:	d02e      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	4a68      	ldr	r2, [pc, #416]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005880:	4b64      	ldr	r3, [pc, #400]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005884:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	0309      	lsls	r1, r1, #12
 800588a:	430a      	orrs	r2, r1
 800588c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005892:	4b60      	ldr	r3, [pc, #384]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005894:	4962      	ldr	r1, [pc, #392]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005896:	400a      	ands	r2, r1
 8005898:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800589a:	4b5e      	ldr	r3, [pc, #376]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4013      	ands	r3, r2
 80058a8:	d014      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7fd fd8b 	bl	80033c4 <HAL_GetTick>
 80058ae:	0003      	movs	r3, r0
 80058b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058b2:	e009      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b4:	f7fd fd86 	bl	80033c4 <HAL_GetTick>
 80058b8:	0002      	movs	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	4a59      	ldr	r2, [pc, #356]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0a0      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058c8:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4013      	ands	r3, r2
 80058d2:	d0ef      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2220      	movs	r2, #32
 80058da:	4013      	ands	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	23c0      	movs	r3, #192	; 0xc0
 80058e4:	029b      	lsls	r3, r3, #10
 80058e6:	401a      	ands	r2, r3
 80058e8:	23c0      	movs	r3, #192	; 0xc0
 80058ea:	029b      	lsls	r3, r3, #10
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d10c      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x182>
 80058f0:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a4c      	ldr	r2, [pc, #304]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	0019      	movs	r1, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	23c0      	movs	r3, #192	; 0xc0
 8005900:	039b      	lsls	r3, r3, #14
 8005902:	401a      	ands	r2, r3
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800590c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	23c0      	movs	r3, #192	; 0xc0
 8005914:	029b      	lsls	r3, r3, #10
 8005916:	401a      	ands	r2, r3
 8005918:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800591a:	430a      	orrs	r2, r1
 800591c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800591e:	2317      	movs	r3, #23
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005928:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800592a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592c:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800592e:	493f      	ldr	r1, [pc, #252]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005930:	400a      	ands	r2, r1
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	4013      	ands	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800593e:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	2203      	movs	r2, #3
 8005944:	4393      	bics	r3, r2
 8005946:	0019      	movs	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800594e:	430a      	orrs	r2, r1
 8005950:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2202      	movs	r2, #2
 8005958:	4013      	ands	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800595c:	4b2d      	ldr	r3, [pc, #180]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005960:	220c      	movs	r2, #12
 8005962:	4393      	bics	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800596c:	430a      	orrs	r2, r1
 800596e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2204      	movs	r2, #4
 8005976:	4013      	ands	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	4a2c      	ldr	r2, [pc, #176]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800598a:	430a      	orrs	r2, r1
 800598c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2208      	movs	r2, #8
 8005994:	4013      	ands	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800599a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800599e:	4013      	ands	r3, r2
 80059a0:	0019      	movs	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80059be:	4013      	ands	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2240      	movs	r2, #64	; 0x40
 80059d2:	4013      	ands	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	0019      	movs	r1, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005a04:	430a      	orrs	r2, r1
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b006      	add	sp, #24
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	fffcffff 	.word	0xfffcffff
 8005a20:	fff7ffff 	.word	0xfff7ffff
 8005a24:	00001388 	.word	0x00001388
 8005a28:	ffcfffff 	.word	0xffcfffff
 8005a2c:	efffffff 	.word	0xefffffff
 8005a30:	fffff3ff 	.word	0xfffff3ff
 8005a34:	ffffcfff 	.word	0xffffcfff
 8005a38:	fbffffff 	.word	0xfbffffff
 8005a3c:	fff3ffff 	.word	0xfff3ffff

08005a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e032      	b.n	8005ab8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2239      	movs	r2, #57	; 0x39
 8005a56:	5c9b      	ldrb	r3, [r3, r2]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d107      	bne.n	8005a6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2238      	movs	r2, #56	; 0x38
 8005a62:	2100      	movs	r1, #0
 8005a64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7fd fb3f 	bl	80030ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2239      	movs	r2, #57	; 0x39
 8005a72:	2102      	movs	r1, #2
 8005a74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	0019      	movs	r1, r3
 8005a80:	0010      	movs	r0, r2
 8005a82:	f000 f92d 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	223e      	movs	r2, #62	; 0x3e
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	223a      	movs	r2, #58	; 0x3a
 8005a92:	2101      	movs	r1, #1
 8005a94:	5499      	strb	r1, [r3, r2]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	223b      	movs	r2, #59	; 0x3b
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	5499      	strb	r1, [r3, r2]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223c      	movs	r2, #60	; 0x3c
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	223d      	movs	r2, #61	; 0x3d
 8005aaa:	2101      	movs	r1, #1
 8005aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2239      	movs	r2, #57	; 0x39
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b002      	add	sp, #8
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d124      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d11d      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4252      	negs	r2, r2
 8005aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2203      	movs	r2, #3
 8005afc:	4013      	ands	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 f8d4 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e007      	b.n	8005b1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f000 f8c7 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f8d3 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2204      	movs	r2, #4
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d125      	bne.n	8005b7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2204      	movs	r2, #4
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d11e      	bne.n	8005b7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2205      	movs	r2, #5
 8005b42:	4252      	negs	r2, r2
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	23c0      	movs	r3, #192	; 0xc0
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4013      	ands	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 f8a7 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005b62:	e007      	b.n	8005b74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 f89a 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f8a6 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2208      	movs	r2, #8
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d124      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2208      	movs	r2, #8
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d11d      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2209      	movs	r2, #9
 8005b9c:	4252      	negs	r2, r2
 8005b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2203      	movs	r2, #3
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f87b 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005bba:	e007      	b.n	8005bcc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 f86e 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f87a 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2210      	movs	r2, #16
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d125      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2210      	movs	r2, #16
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d11e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2211      	movs	r2, #17
 8005bf4:	4252      	negs	r2, r2
 8005bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	23c0      	movs	r3, #192	; 0xc0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f84e 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e007      	b.n	8005c26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f841 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f84d 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2201      	movs	r2, #1
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10f      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4252      	negs	r2, r2
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f81b 	bl	8005c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2240      	movs	r2, #64	; 0x40
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d10f      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2240      	movs	r2, #64	; 0x40
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d108      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2241      	movs	r2, #65	; 0x41
 8005c7c:	4252      	negs	r2, r2
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f000 f824 	bl	8005cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	05db      	lsls	r3, r3, #23
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0x32>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_Base_SetConfig+0xac>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0x32>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <TIM_Base_SetConfig+0xb0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0x32>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <TIM_Base_SetConfig+0xb4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2270      	movs	r2, #112	; 0x70
 8005d16:	4393      	bics	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	05db      	lsls	r3, r3, #23
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d00b      	beq.n	8005d46 <TIM_Base_SetConfig+0x66>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a16      	ldr	r2, [pc, #88]	; (8005d8c <TIM_Base_SetConfig+0xac>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_Base_SetConfig+0x66>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <TIM_Base_SetConfig+0xb0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0x66>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <TIM_Base_SetConfig+0xb4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <TIM_Base_SetConfig+0xb8>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2280      	movs	r2, #128	; 0x80
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	001a      	movs	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	615a      	str	r2, [r3, #20]
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40010800 	.word	0x40010800
 8005d94:	40011400 	.word	0x40011400
 8005d98:	fffffcff 	.word	0xfffffcff

08005d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2238      	movs	r2, #56	; 0x38
 8005daa:	5c9b      	ldrb	r3, [r3, r2]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e047      	b.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2238      	movs	r2, #56	; 0x38
 8005db8:	2101      	movs	r1, #1
 8005dba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2239      	movs	r2, #57	; 0x39
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2270      	movs	r2, #112	; 0x70
 8005dd8:	4393      	bics	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	05db      	lsls	r3, r3, #23
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00e      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10c      	bne.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2239      	movs	r2, #57	; 0x39
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2238      	movs	r2, #56	; 0x38
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b004      	add	sp, #16
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40010800 	.word	0x40010800
 8005e54:	40011400 	.word	0x40011400

08005e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e044      	b.n	8005ef4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d107      	bne.n	8005e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2278      	movs	r2, #120	; 0x78
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7fd f955 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2224      	movs	r2, #36	; 0x24
 8005e86:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2101      	movs	r1, #1
 8005e94:	438a      	bics	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 f8d0 	bl	8006040 <UART_SetConfig>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e024      	b.n	8005ef4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 fb61 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	490d      	ldr	r1, [pc, #52]	; (8005efc <HAL_UART_Init+0xa4>)
 8005ec6:	400a      	ands	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	212a      	movs	r1, #42	; 0x2a
 8005ed6:	438a      	bics	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 fbf9 	bl	80066e4 <UART_CheckIdleState>
 8005ef2:	0003      	movs	r3, r0
}
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	ffffb7ff 	.word	0xffffb7ff

08005f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	1dbb      	adds	r3, r7, #6
 8005f0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d000      	beq.n	8005f1a <HAL_UART_Transmit+0x1a>
 8005f18:	e08c      	b.n	8006034 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_UART_Transmit+0x28>
 8005f20:	1dbb      	adds	r3, r7, #6
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e084      	b.n	8006036 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d109      	bne.n	8005f4c <HAL_UART_Transmit+0x4c>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4013      	ands	r3, r2
 8005f46:	d001      	beq.n	8005f4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e074      	b.n	8006036 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2284      	movs	r2, #132	; 0x84
 8005f50:	2100      	movs	r1, #0
 8005f52:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f5a:	f7fd fa33 	bl	80033c4 <HAL_GetTick>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1dba      	adds	r2, r7, #6
 8005f66:	2150      	movs	r1, #80	; 0x50
 8005f68:	8812      	ldrh	r2, [r2, #0]
 8005f6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1dba      	adds	r2, r7, #6
 8005f70:	2152      	movs	r1, #82	; 0x52
 8005f72:	8812      	ldrh	r2, [r2, #0]
 8005f74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	015b      	lsls	r3, r3, #5
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d108      	bne.n	8005f94 <HAL_UART_Transmit+0x94>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e003      	b.n	8005f9c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f9c:	e02f      	b.n	8005ffe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	0013      	movs	r3, r2
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	f000 fc42 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	1e03      	subs	r3, r0, #0
 8005fb2:	d004      	beq.n	8005fbe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e03b      	b.n	8006036 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	001a      	movs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	05d2      	lsls	r2, r2, #23
 8005fd0:	0dd2      	lsrs	r2, r2, #23
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e007      	b.n	8005fec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2252      	movs	r2, #82	; 0x52
 8005ff0:	5a9b      	ldrh	r3, [r3, r2]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b299      	uxth	r1, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2252      	movs	r2, #82	; 0x52
 8005ffc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2252      	movs	r2, #82	; 0x52
 8006002:	5a9b      	ldrh	r3, [r3, r2]
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c9      	bne.n	8005f9e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	0013      	movs	r3, r2
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	; 0x40
 8006018:	f000 fc0c 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d004      	beq.n	800602a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e005      	b.n	8006036 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b008      	add	sp, #32
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006040:	b5b0      	push	{r4, r5, r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af00      	add	r7, sp, #0
 8006046:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006048:	231a      	movs	r3, #26
 800604a:	2218      	movs	r2, #24
 800604c:	189b      	adds	r3, r3, r2
 800604e:	19db      	adds	r3, r3, r7
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	431a      	orrs	r2, r3
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	4313      	orrs	r3, r2
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4ac3      	ldr	r2, [pc, #780]	; (8006380 <UART_SetConfig+0x340>)
 8006074:	4013      	ands	r3, r2
 8006076:	0019      	movs	r1, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4abe      	ldr	r2, [pc, #760]	; (8006384 <UART_SetConfig+0x344>)
 800608a:	4013      	ands	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4ab8      	ldr	r2, [pc, #736]	; (8006388 <UART_SetConfig+0x348>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b0:	4313      	orrs	r3, r2
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	4ab4      	ldr	r2, [pc, #720]	; (800638c <UART_SetConfig+0x34c>)
 80060bc:	4013      	ands	r3, r2
 80060be:	0019      	movs	r1, r3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4ab0      	ldr	r2, [pc, #704]	; (8006390 <UART_SetConfig+0x350>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d131      	bne.n	8006138 <UART_SetConfig+0xf8>
 80060d4:	4baf      	ldr	r3, [pc, #700]	; (8006394 <UART_SetConfig+0x354>)
 80060d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d8:	2203      	movs	r2, #3
 80060da:	4013      	ands	r3, r2
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d01d      	beq.n	800611c <UART_SetConfig+0xdc>
 80060e0:	d823      	bhi.n	800612a <UART_SetConfig+0xea>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d00c      	beq.n	8006100 <UART_SetConfig+0xc0>
 80060e6:	d820      	bhi.n	800612a <UART_SetConfig+0xea>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <UART_SetConfig+0xb2>
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d00e      	beq.n	800610e <UART_SetConfig+0xce>
 80060f0:	e01b      	b.n	800612a <UART_SetConfig+0xea>
 80060f2:	231b      	movs	r3, #27
 80060f4:	2218      	movs	r2, #24
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	19db      	adds	r3, r3, r7
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	e0b4      	b.n	800626a <UART_SetConfig+0x22a>
 8006100:	231b      	movs	r3, #27
 8006102:	2218      	movs	r2, #24
 8006104:	189b      	adds	r3, r3, r2
 8006106:	19db      	adds	r3, r3, r7
 8006108:	2202      	movs	r2, #2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e0ad      	b.n	800626a <UART_SetConfig+0x22a>
 800610e:	231b      	movs	r3, #27
 8006110:	2218      	movs	r2, #24
 8006112:	189b      	adds	r3, r3, r2
 8006114:	19db      	adds	r3, r3, r7
 8006116:	2204      	movs	r2, #4
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e0a6      	b.n	800626a <UART_SetConfig+0x22a>
 800611c:	231b      	movs	r3, #27
 800611e:	2218      	movs	r2, #24
 8006120:	189b      	adds	r3, r3, r2
 8006122:	19db      	adds	r3, r3, r7
 8006124:	2208      	movs	r2, #8
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	e09f      	b.n	800626a <UART_SetConfig+0x22a>
 800612a:	231b      	movs	r3, #27
 800612c:	2218      	movs	r2, #24
 800612e:	189b      	adds	r3, r3, r2
 8006130:	19db      	adds	r3, r3, r7
 8006132:	2210      	movs	r2, #16
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e098      	b.n	800626a <UART_SetConfig+0x22a>
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a96      	ldr	r2, [pc, #600]	; (8006398 <UART_SetConfig+0x358>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d131      	bne.n	80061a6 <UART_SetConfig+0x166>
 8006142:	4b94      	ldr	r3, [pc, #592]	; (8006394 <UART_SetConfig+0x354>)
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	220c      	movs	r2, #12
 8006148:	4013      	ands	r3, r2
 800614a:	2b0c      	cmp	r3, #12
 800614c:	d01d      	beq.n	800618a <UART_SetConfig+0x14a>
 800614e:	d823      	bhi.n	8006198 <UART_SetConfig+0x158>
 8006150:	2b08      	cmp	r3, #8
 8006152:	d00c      	beq.n	800616e <UART_SetConfig+0x12e>
 8006154:	d820      	bhi.n	8006198 <UART_SetConfig+0x158>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <UART_SetConfig+0x120>
 800615a:	2b04      	cmp	r3, #4
 800615c:	d00e      	beq.n	800617c <UART_SetConfig+0x13c>
 800615e:	e01b      	b.n	8006198 <UART_SetConfig+0x158>
 8006160:	231b      	movs	r3, #27
 8006162:	2218      	movs	r2, #24
 8006164:	189b      	adds	r3, r3, r2
 8006166:	19db      	adds	r3, r3, r7
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e07d      	b.n	800626a <UART_SetConfig+0x22a>
 800616e:	231b      	movs	r3, #27
 8006170:	2218      	movs	r2, #24
 8006172:	189b      	adds	r3, r3, r2
 8006174:	19db      	adds	r3, r3, r7
 8006176:	2202      	movs	r2, #2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e076      	b.n	800626a <UART_SetConfig+0x22a>
 800617c:	231b      	movs	r3, #27
 800617e:	2218      	movs	r2, #24
 8006180:	189b      	adds	r3, r3, r2
 8006182:	19db      	adds	r3, r3, r7
 8006184:	2204      	movs	r2, #4
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e06f      	b.n	800626a <UART_SetConfig+0x22a>
 800618a:	231b      	movs	r3, #27
 800618c:	2218      	movs	r2, #24
 800618e:	189b      	adds	r3, r3, r2
 8006190:	19db      	adds	r3, r3, r7
 8006192:	2208      	movs	r2, #8
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e068      	b.n	800626a <UART_SetConfig+0x22a>
 8006198:	231b      	movs	r3, #27
 800619a:	2218      	movs	r2, #24
 800619c:	189b      	adds	r3, r3, r2
 800619e:	19db      	adds	r3, r3, r7
 80061a0:	2210      	movs	r2, #16
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e061      	b.n	800626a <UART_SetConfig+0x22a>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7c      	ldr	r2, [pc, #496]	; (800639c <UART_SetConfig+0x35c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d106      	bne.n	80061be <UART_SetConfig+0x17e>
 80061b0:	231b      	movs	r3, #27
 80061b2:	2218      	movs	r2, #24
 80061b4:	189b      	adds	r3, r3, r2
 80061b6:	19db      	adds	r3, r3, r7
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e055      	b.n	800626a <UART_SetConfig+0x22a>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a77      	ldr	r2, [pc, #476]	; (80063a0 <UART_SetConfig+0x360>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d106      	bne.n	80061d6 <UART_SetConfig+0x196>
 80061c8:	231b      	movs	r3, #27
 80061ca:	2218      	movs	r2, #24
 80061cc:	189b      	adds	r3, r3, r2
 80061ce:	19db      	adds	r3, r3, r7
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e049      	b.n	800626a <UART_SetConfig+0x22a>
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a6b      	ldr	r2, [pc, #428]	; (8006388 <UART_SetConfig+0x348>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d13e      	bne.n	800625e <UART_SetConfig+0x21e>
 80061e0:	4b6c      	ldr	r3, [pc, #432]	; (8006394 <UART_SetConfig+0x354>)
 80061e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061e4:	23c0      	movs	r3, #192	; 0xc0
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	4013      	ands	r3, r2
 80061ea:	22c0      	movs	r2, #192	; 0xc0
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d027      	beq.n	8006242 <UART_SetConfig+0x202>
 80061f2:	22c0      	movs	r2, #192	; 0xc0
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d82a      	bhi.n	8006250 <UART_SetConfig+0x210>
 80061fa:	2280      	movs	r2, #128	; 0x80
 80061fc:	0112      	lsls	r2, r2, #4
 80061fe:	4293      	cmp	r3, r2
 8006200:	d011      	beq.n	8006226 <UART_SetConfig+0x1e6>
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	0112      	lsls	r2, r2, #4
 8006206:	4293      	cmp	r3, r2
 8006208:	d822      	bhi.n	8006250 <UART_SetConfig+0x210>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <UART_SetConfig+0x1d8>
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	00d2      	lsls	r2, r2, #3
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <UART_SetConfig+0x1f4>
 8006216:	e01b      	b.n	8006250 <UART_SetConfig+0x210>
 8006218:	231b      	movs	r3, #27
 800621a:	2218      	movs	r2, #24
 800621c:	189b      	adds	r3, r3, r2
 800621e:	19db      	adds	r3, r3, r7
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e021      	b.n	800626a <UART_SetConfig+0x22a>
 8006226:	231b      	movs	r3, #27
 8006228:	2218      	movs	r2, #24
 800622a:	189b      	adds	r3, r3, r2
 800622c:	19db      	adds	r3, r3, r7
 800622e:	2202      	movs	r2, #2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e01a      	b.n	800626a <UART_SetConfig+0x22a>
 8006234:	231b      	movs	r3, #27
 8006236:	2218      	movs	r2, #24
 8006238:	189b      	adds	r3, r3, r2
 800623a:	19db      	adds	r3, r3, r7
 800623c:	2204      	movs	r2, #4
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e013      	b.n	800626a <UART_SetConfig+0x22a>
 8006242:	231b      	movs	r3, #27
 8006244:	2218      	movs	r2, #24
 8006246:	189b      	adds	r3, r3, r2
 8006248:	19db      	adds	r3, r3, r7
 800624a:	2208      	movs	r2, #8
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e00c      	b.n	800626a <UART_SetConfig+0x22a>
 8006250:	231b      	movs	r3, #27
 8006252:	2218      	movs	r2, #24
 8006254:	189b      	adds	r3, r3, r2
 8006256:	19db      	adds	r3, r3, r7
 8006258:	2210      	movs	r2, #16
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e005      	b.n	800626a <UART_SetConfig+0x22a>
 800625e:	231b      	movs	r3, #27
 8006260:	2218      	movs	r2, #24
 8006262:	189b      	adds	r3, r3, r2
 8006264:	19db      	adds	r3, r3, r7
 8006266:	2210      	movs	r2, #16
 8006268:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a46      	ldr	r2, [pc, #280]	; (8006388 <UART_SetConfig+0x348>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d000      	beq.n	8006276 <UART_SetConfig+0x236>
 8006274:	e09a      	b.n	80063ac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	231b      	movs	r3, #27
 8006278:	2218      	movs	r2, #24
 800627a:	189b      	adds	r3, r3, r2
 800627c:	19db      	adds	r3, r3, r7
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d01d      	beq.n	80062c0 <UART_SetConfig+0x280>
 8006284:	dc20      	bgt.n	80062c8 <UART_SetConfig+0x288>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d015      	beq.n	80062b6 <UART_SetConfig+0x276>
 800628a:	dc1d      	bgt.n	80062c8 <UART_SetConfig+0x288>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <UART_SetConfig+0x256>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d005      	beq.n	80062a0 <UART_SetConfig+0x260>
 8006294:	e018      	b.n	80062c8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7ff fa4b 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 800629a:	0003      	movs	r3, r0
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800629e:	e01c      	b.n	80062da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a0:	4b3c      	ldr	r3, [pc, #240]	; (8006394 <UART_SetConfig+0x354>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2210      	movs	r2, #16
 80062a6:	4013      	ands	r3, r2
 80062a8:	d002      	beq.n	80062b0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062aa:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <UART_SetConfig+0x364>)
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b3d      	ldr	r3, [pc, #244]	; (80063a8 <UART_SetConfig+0x368>)
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b4:	e011      	b.n	80062da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7ff f98b 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 80062ba:	0003      	movs	r3, r0
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062be:	e00c      	b.n	80062da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c6:	e008      	b.n	80062da <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062cc:	231a      	movs	r3, #26
 80062ce:	2218      	movs	r2, #24
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]
        break;
 80062d8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d100      	bne.n	80062e2 <UART_SetConfig+0x2a2>
 80062e0:	e133      	b.n	800654a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	0013      	movs	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d305      	bcc.n	80062fe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d906      	bls.n	800630c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80062fe:	231a      	movs	r3, #26
 8006300:	2218      	movs	r2, #24
 8006302:	189b      	adds	r3, r3, r2
 8006304:	19db      	adds	r3, r3, r7
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e11e      	b.n	800654a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	6939      	ldr	r1, [r7, #16]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	000b      	movs	r3, r1
 800631a:	0e1b      	lsrs	r3, r3, #24
 800631c:	0010      	movs	r0, r2
 800631e:	0205      	lsls	r5, r0, #8
 8006320:	431d      	orrs	r5, r3
 8006322:	000b      	movs	r3, r1
 8006324:	021c      	lsls	r4, r3, #8
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68b8      	ldr	r0, [r7, #8]
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	1900      	adds	r0, r0, r4
 8006338:	4169      	adcs	r1, r5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	2300      	movs	r3, #0
 8006342:	607b      	str	r3, [r7, #4]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f7fa f89c 	bl	8000484 <__aeabi_uldivmod>
 800634c:	0002      	movs	r2, r0
 800634e:	000b      	movs	r3, r1
 8006350:	0013      	movs	r3, r2
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	23c0      	movs	r3, #192	; 0xc0
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	429a      	cmp	r2, r3
 800635c:	d309      	bcc.n	8006372 <UART_SetConfig+0x332>
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	035b      	lsls	r3, r3, #13
 8006364:	429a      	cmp	r2, r3
 8006366:	d204      	bcs.n	8006372 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	e0eb      	b.n	800654a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006372:	231a      	movs	r3, #26
 8006374:	2218      	movs	r2, #24
 8006376:	189b      	adds	r3, r3, r2
 8006378:	19db      	adds	r3, r3, r7
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e0e4      	b.n	800654a <UART_SetConfig+0x50a>
 8006380:	efff69f3 	.word	0xefff69f3
 8006384:	ffffcfff 	.word	0xffffcfff
 8006388:	40004800 	.word	0x40004800
 800638c:	fffff4ff 	.word	0xfffff4ff
 8006390:	40013800 	.word	0x40013800
 8006394:	40021000 	.word	0x40021000
 8006398:	40004400 	.word	0x40004400
 800639c:	40004c00 	.word	0x40004c00
 80063a0:	40005000 	.word	0x40005000
 80063a4:	003d0900 	.word	0x003d0900
 80063a8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d000      	beq.n	80063ba <UART_SetConfig+0x37a>
 80063b8:	e070      	b.n	800649c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80063ba:	231b      	movs	r3, #27
 80063bc:	2218      	movs	r2, #24
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	19db      	adds	r3, r3, r7
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d822      	bhi.n	800640e <UART_SetConfig+0x3ce>
 80063c8:	009a      	lsls	r2, r3, #2
 80063ca:	4b67      	ldr	r3, [pc, #412]	; (8006568 <UART_SetConfig+0x528>)
 80063cc:	18d3      	adds	r3, r2, r3
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7ff f9ad 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 80063d6:	0003      	movs	r3, r0
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063da:	e021      	b.n	8006420 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063dc:	f7ff f9be 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 80063e0:	0003      	movs	r3, r0
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e4:	e01c      	b.n	8006420 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e6:	4b61      	ldr	r3, [pc, #388]	; (800656c <UART_SetConfig+0x52c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2210      	movs	r2, #16
 80063ec:	4013      	ands	r3, r2
 80063ee:	d002      	beq.n	80063f6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063f0:	4b5f      	ldr	r3, [pc, #380]	; (8006570 <UART_SetConfig+0x530>)
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f4:	e014      	b.n	8006420 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80063f6:	4b5f      	ldr	r3, [pc, #380]	; (8006574 <UART_SetConfig+0x534>)
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063fa:	e011      	b.n	8006420 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fc:	f7ff f8e8 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8006400:	0003      	movs	r3, r0
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006404:	e00c      	b.n	8006420 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	2380      	movs	r3, #128	; 0x80
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800640c:	e008      	b.n	8006420 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006412:	231a      	movs	r3, #26
 8006414:	2218      	movs	r2, #24
 8006416:	189b      	adds	r3, r3, r2
 8006418:	19db      	adds	r3, r3, r7
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
        break;
 800641e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d100      	bne.n	8006428 <UART_SetConfig+0x3e8>
 8006426:	e090      	b.n	800654a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	005a      	lsls	r2, r3, #1
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	18d2      	adds	r2, r2, r3
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	0019      	movs	r1, r3
 800643a:	0010      	movs	r0, r2
 800643c:	f7f9 fe6e 	bl	800011c <__udivsi3>
 8006440:	0003      	movs	r3, r0
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d921      	bls.n	800648e <UART_SetConfig+0x44e>
 800644a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	025b      	lsls	r3, r3, #9
 8006450:	429a      	cmp	r2, r3
 8006452:	d21c      	bcs.n	800648e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	b29a      	uxth	r2, r3
 8006458:	200e      	movs	r0, #14
 800645a:	2418      	movs	r4, #24
 800645c:	1903      	adds	r3, r0, r4
 800645e:	19db      	adds	r3, r3, r7
 8006460:	210f      	movs	r1, #15
 8006462:	438a      	bics	r2, r1
 8006464:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	2207      	movs	r2, #7
 800646e:	4013      	ands	r3, r2
 8006470:	b299      	uxth	r1, r3
 8006472:	1903      	adds	r3, r0, r4
 8006474:	19db      	adds	r3, r3, r7
 8006476:	1902      	adds	r2, r0, r4
 8006478:	19d2      	adds	r2, r2, r7
 800647a:	8812      	ldrh	r2, [r2, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	1902      	adds	r2, r0, r4
 8006486:	19d2      	adds	r2, r2, r7
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	e05d      	b.n	800654a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800648e:	231a      	movs	r3, #26
 8006490:	2218      	movs	r2, #24
 8006492:	189b      	adds	r3, r3, r2
 8006494:	19db      	adds	r3, r3, r7
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e056      	b.n	800654a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800649c:	231b      	movs	r3, #27
 800649e:	2218      	movs	r2, #24
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d822      	bhi.n	80064f0 <UART_SetConfig+0x4b0>
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	4b32      	ldr	r3, [pc, #200]	; (8006578 <UART_SetConfig+0x538>)
 80064ae:	18d3      	adds	r3, r2, r3
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7ff f93c 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 80064b8:	0003      	movs	r3, r0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064bc:	e021      	b.n	8006502 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064be:	f7ff f94d 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 80064c2:	0003      	movs	r3, r0
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c6:	e01c      	b.n	8006502 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064c8:	4b28      	ldr	r3, [pc, #160]	; (800656c <UART_SetConfig+0x52c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2210      	movs	r2, #16
 80064ce:	4013      	ands	r3, r2
 80064d0:	d002      	beq.n	80064d8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <UART_SetConfig+0x530>)
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064d6:	e014      	b.n	8006502 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b26      	ldr	r3, [pc, #152]	; (8006574 <UART_SetConfig+0x534>)
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064dc:	e011      	b.n	8006502 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064de:	f7ff f877 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 80064e2:	0003      	movs	r3, r0
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064e6:	e00c      	b.n	8006502 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ee:	e008      	b.n	8006502 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064f4:	231a      	movs	r3, #26
 80064f6:	2218      	movs	r2, #24
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	19db      	adds	r3, r3, r7
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
        break;
 8006500:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	085a      	lsrs	r2, r3, #1
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	18d2      	adds	r2, r2, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	0019      	movs	r1, r3
 8006518:	0010      	movs	r0, r2
 800651a:	f7f9 fdff 	bl	800011c <__udivsi3>
 800651e:	0003      	movs	r3, r0
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d90a      	bls.n	800653e <UART_SetConfig+0x4fe>
 8006528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	025b      	lsls	r3, r3, #9
 800652e:	429a      	cmp	r2, r3
 8006530:	d205      	bcs.n	800653e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	b29a      	uxth	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e005      	b.n	800654a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800653e:	231a      	movs	r3, #26
 8006540:	2218      	movs	r2, #24
 8006542:	189b      	adds	r3, r3, r2
 8006544:	19db      	adds	r3, r3, r7
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2200      	movs	r2, #0
 800654e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2200      	movs	r2, #0
 8006554:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006556:	231a      	movs	r3, #26
 8006558:	2218      	movs	r2, #24
 800655a:	189b      	adds	r3, r3, r2
 800655c:	19db      	adds	r3, r3, r7
 800655e:	781b      	ldrb	r3, [r3, #0]
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	b00e      	add	sp, #56	; 0x38
 8006566:	bdb0      	pop	{r4, r5, r7, pc}
 8006568:	0800827c 	.word	0x0800827c
 800656c:	40021000 	.word	0x40021000
 8006570:	003d0900 	.word	0x003d0900
 8006574:	00f42400 	.word	0x00f42400
 8006578:	080082a0 	.word	0x080082a0

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2201      	movs	r2, #1
 800658a:	4013      	ands	r3, r2
 800658c:	d00b      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a4a      	ldr	r2, [pc, #296]	; (80066c0 <UART_AdvFeatureConfig+0x144>)
 8006596:	4013      	ands	r3, r2
 8006598:	0019      	movs	r1, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	2202      	movs	r2, #2
 80065ac:	4013      	ands	r3, r2
 80065ae:	d00b      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4a43      	ldr	r2, [pc, #268]	; (80066c4 <UART_AdvFeatureConfig+0x148>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	0019      	movs	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2204      	movs	r2, #4
 80065ce:	4013      	ands	r3, r2
 80065d0:	d00b      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a3b      	ldr	r2, [pc, #236]	; (80066c8 <UART_AdvFeatureConfig+0x14c>)
 80065da:	4013      	ands	r3, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2208      	movs	r2, #8
 80065f0:	4013      	ands	r3, r2
 80065f2:	d00b      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a34      	ldr	r2, [pc, #208]	; (80066cc <UART_AdvFeatureConfig+0x150>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	0019      	movs	r1, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2210      	movs	r2, #16
 8006612:	4013      	ands	r3, r2
 8006614:	d00b      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <UART_AdvFeatureConfig+0x154>)
 800661e:	4013      	ands	r3, r2
 8006620:	0019      	movs	r1, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	2220      	movs	r2, #32
 8006634:	4013      	ands	r3, r2
 8006636:	d00b      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4a25      	ldr	r2, [pc, #148]	; (80066d4 <UART_AdvFeatureConfig+0x158>)
 8006640:	4013      	ands	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	4013      	ands	r3, r2
 8006658:	d01d      	beq.n	8006696 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <UART_AdvFeatureConfig+0x15c>)
 8006662:	4013      	ands	r3, r2
 8006664:	0019      	movs	r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	035b      	lsls	r3, r3, #13
 800667a:	429a      	cmp	r2, r3
 800667c:	d10b      	bne.n	8006696 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <UART_AdvFeatureConfig+0x160>)
 8006686:	4013      	ands	r3, r2
 8006688:	0019      	movs	r1, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	4013      	ands	r3, r2
 800669e:	d00b      	beq.n	80066b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <UART_AdvFeatureConfig+0x164>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	0019      	movs	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }
}
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	fffdffff 	.word	0xfffdffff
 80066c4:	fffeffff 	.word	0xfffeffff
 80066c8:	fffbffff 	.word	0xfffbffff
 80066cc:	ffff7fff 	.word	0xffff7fff
 80066d0:	ffffefff 	.word	0xffffefff
 80066d4:	ffffdfff 	.word	0xffffdfff
 80066d8:	ffefffff 	.word	0xffefffff
 80066dc:	ff9fffff 	.word	0xff9fffff
 80066e0:	fff7ffff 	.word	0xfff7ffff

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b092      	sub	sp, #72	; 0x48
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2284      	movs	r2, #132	; 0x84
 80066f0:	2100      	movs	r1, #0
 80066f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fc fe66 	bl	80033c4 <HAL_GetTick>
 80066f8:	0003      	movs	r3, r0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2208      	movs	r2, #8
 8006704:	4013      	ands	r3, r2
 8006706:	2b08      	cmp	r3, #8
 8006708:	d12c      	bne.n	8006764 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800670a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670c:	2280      	movs	r2, #128	; 0x80
 800670e:	0391      	lsls	r1, r2, #14
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4a46      	ldr	r2, [pc, #280]	; (800682c <UART_CheckIdleState+0x148>)
 8006714:	9200      	str	r2, [sp, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	f000 f88c 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 800671c:	1e03      	subs	r3, r0, #0
 800671e:	d021      	beq.n	8006764 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006720:	f3ef 8310 	mrs	r3, PRIMASK
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006728:	63bb      	str	r3, [r7, #56]	; 0x38
 800672a:	2301      	movs	r3, #1
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	f383 8810 	msr	PRIMASK, r3
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	438a      	bics	r2, r1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	f383 8810 	msr	PRIMASK, r3
}
 8006750:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2278      	movs	r2, #120	; 0x78
 800675c:	2100      	movs	r1, #0
 800675e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e05f      	b.n	8006824 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2204      	movs	r2, #4
 800676c:	4013      	ands	r3, r2
 800676e:	2b04      	cmp	r3, #4
 8006770:	d146      	bne.n	8006800 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	03d1      	lsls	r1, r2, #15
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4a2c      	ldr	r2, [pc, #176]	; (800682c <UART_CheckIdleState+0x148>)
 800677c:	9200      	str	r2, [sp, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	f000 f858 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006784:	1e03      	subs	r3, r0, #0
 8006786:	d03b      	beq.n	8006800 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006788:	f3ef 8310 	mrs	r3, PRIMASK
 800678c:	60fb      	str	r3, [r7, #12]
  return(result);
 800678e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	2301      	movs	r3, #1
 8006794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f383 8810 	msr	PRIMASK, r3
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4921      	ldr	r1, [pc, #132]	; (8006830 <UART_CheckIdleState+0x14c>)
 80067aa:	400a      	ands	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	61bb      	str	r3, [r7, #24]
  return(result);
 80067c0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
 80067c4:	2301      	movs	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f383 8810 	msr	PRIMASK, r3
}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2101      	movs	r1, #1
 80067dc:	438a      	bics	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2280      	movs	r2, #128	; 0x80
 80067f0:	2120      	movs	r1, #32
 80067f2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2278      	movs	r2, #120	; 0x78
 80067f8:	2100      	movs	r1, #0
 80067fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e011      	b.n	8006824 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2280      	movs	r2, #128	; 0x80
 800680a:	2120      	movs	r1, #32
 800680c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2278      	movs	r2, #120	; 0x78
 800681e:	2100      	movs	r1, #0
 8006820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b010      	add	sp, #64	; 0x40
 800682a:	bd80      	pop	{r7, pc}
 800682c:	01ffffff 	.word	0x01ffffff
 8006830:	fffffedf 	.word	0xfffffedf

08006834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	1dfb      	adds	r3, r7, #7
 8006842:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006844:	e04b      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	3301      	adds	r3, #1
 800684a:	d048      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684c:	f7fc fdba 	bl	80033c4 <HAL_GetTick>
 8006850:	0002      	movs	r2, r0
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	d302      	bcc.n	8006862 <UART_WaitOnFlagUntilTimeout+0x2e>
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e04b      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2204      	movs	r2, #4
 800686e:	4013      	ands	r3, r2
 8006870:	d035      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	2208      	movs	r2, #8
 800687a:	4013      	ands	r3, r2
 800687c:	2b08      	cmp	r3, #8
 800687e:	d111      	bne.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	0018      	movs	r0, r3
 800688c:	f000 f83c 	bl	8006908 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2284      	movs	r2, #132	; 0x84
 8006894:	2108      	movs	r1, #8
 8006896:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2278      	movs	r2, #120	; 0x78
 800689c:	2100      	movs	r1, #0
 800689e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e02c      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69da      	ldr	r2, [r3, #28]
 80068aa:	2380      	movs	r3, #128	; 0x80
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	401a      	ands	r2, r3
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d112      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2280      	movs	r2, #128	; 0x80
 80068be:	0112      	lsls	r2, r2, #4
 80068c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f000 f81f 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2284      	movs	r2, #132	; 0x84
 80068ce:	2120      	movs	r1, #32
 80068d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2278      	movs	r2, #120	; 0x78
 80068d6:	2100      	movs	r1, #0
 80068d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	425a      	negs	r2, r3
 80068ee:	4153      	adcs	r3, r2
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	001a      	movs	r2, r3
 80068f4:	1dfb      	adds	r3, r7, #7
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0a4      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	b004      	add	sp, #16
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08e      	sub	sp, #56	; 0x38
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006910:	f3ef 8310 	mrs	r3, PRIMASK
 8006914:	617b      	str	r3, [r7, #20]
  return(result);
 8006916:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	2301      	movs	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4926      	ldr	r1, [pc, #152]	; (80069cc <UART_EndRxTransfer+0xc4>)
 8006932:	400a      	ands	r2, r1
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f383 8810 	msr	PRIMASK, r3
}
 8006940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006942:	f3ef 8310 	mrs	r3, PRIMASK
 8006946:	623b      	str	r3, [r7, #32]
  return(result);
 8006948:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	2301      	movs	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	f383 8810 	msr	PRIMASK, r3
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2101      	movs	r1, #1
 8006964:	438a      	bics	r2, r1
 8006966:	609a      	str	r2, [r3, #8]
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	f383 8810 	msr	PRIMASK, r3
}
 8006972:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	2b01      	cmp	r3, #1
 800697a:	d118      	bne.n	80069ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697c:	f3ef 8310 	mrs	r3, PRIMASK
 8006980:	60bb      	str	r3, [r7, #8]
  return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006986:	2301      	movs	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f383 8810 	msr	PRIMASK, r3
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2110      	movs	r1, #16
 800699e:	438a      	bics	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f383 8810 	msr	PRIMASK, r3
}
 80069ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	2120      	movs	r1, #32
 80069b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b00e      	add	sp, #56	; 0x38
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	fffffedf 	.word	0xfffffedf

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	2000000c 	.word	0x2000000c

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	2600      	movs	r6, #0
 80069e0:	4d0c      	ldr	r5, [pc, #48]	; (8006a14 <__libc_init_array+0x38>)
 80069e2:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e4:	1b64      	subs	r4, r4, r5
 80069e6:	10a4      	asrs	r4, r4, #2
 80069e8:	42a6      	cmp	r6, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	2600      	movs	r6, #0
 80069ee:	f001 fb8f 	bl	8008110 <_init>
 80069f2:	4d0a      	ldr	r5, [pc, #40]	; (8006a1c <__libc_init_array+0x40>)
 80069f4:	4c0a      	ldr	r4, [pc, #40]	; (8006a20 <__libc_init_array+0x44>)
 80069f6:	1b64      	subs	r4, r4, r5
 80069f8:	10a4      	asrs	r4, r4, #2
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	00b3      	lsls	r3, r6, #2
 8006a02:	58eb      	ldr	r3, [r5, r3]
 8006a04:	4798      	blx	r3
 8006a06:	3601      	adds	r6, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	00b3      	lsls	r3, r6, #2
 8006a0c:	58eb      	ldr	r3, [r5, r3]
 8006a0e:	4798      	blx	r3
 8006a10:	3601      	adds	r6, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08008330 	.word	0x08008330
 8006a18:	08008330 	.word	0x08008330
 8006a1c:	08008330 	.word	0x08008330
 8006a20:	08008334 	.word	0x08008334

08006a24 <memset>:
 8006a24:	0003      	movs	r3, r0
 8006a26:	1882      	adds	r2, r0, r2
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	7019      	strb	r1, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <siprintf>:
 8006a34:	b40e      	push	{r1, r2, r3}
 8006a36:	b500      	push	{lr}
 8006a38:	490b      	ldr	r1, [pc, #44]	; (8006a68 <siprintf+0x34>)
 8006a3a:	b09c      	sub	sp, #112	; 0x70
 8006a3c:	ab1d      	add	r3, sp, #116	; 0x74
 8006a3e:	9002      	str	r0, [sp, #8]
 8006a40:	9006      	str	r0, [sp, #24]
 8006a42:	9107      	str	r1, [sp, #28]
 8006a44:	9104      	str	r1, [sp, #16]
 8006a46:	4809      	ldr	r0, [pc, #36]	; (8006a6c <siprintf+0x38>)
 8006a48:	4909      	ldr	r1, [pc, #36]	; (8006a70 <siprintf+0x3c>)
 8006a4a:	cb04      	ldmia	r3!, {r2}
 8006a4c:	9105      	str	r1, [sp, #20]
 8006a4e:	6800      	ldr	r0, [r0, #0]
 8006a50:	a902      	add	r1, sp, #8
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	f000 f870 	bl	8006b38 <_svfiprintf_r>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9a02      	ldr	r2, [sp, #8]
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	b01c      	add	sp, #112	; 0x70
 8006a60:	bc08      	pop	{r3}
 8006a62:	b003      	add	sp, #12
 8006a64:	4718      	bx	r3
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	7fffffff 	.word	0x7fffffff
 8006a6c:	2000000c 	.word	0x2000000c
 8006a70:	ffff0208 	.word	0xffff0208

08006a74 <__ssputs_r>:
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	688e      	ldr	r6, [r1, #8]
 8006a78:	b085      	sub	sp, #20
 8006a7a:	0007      	movs	r7, r0
 8006a7c:	000c      	movs	r4, r1
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	429e      	cmp	r6, r3
 8006a84:	d83c      	bhi.n	8006b00 <__ssputs_r+0x8c>
 8006a86:	2390      	movs	r3, #144	; 0x90
 8006a88:	898a      	ldrh	r2, [r1, #12]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	421a      	tst	r2, r3
 8006a8e:	d034      	beq.n	8006afa <__ssputs_r+0x86>
 8006a90:	6909      	ldr	r1, [r1, #16]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	6960      	ldr	r0, [r4, #20]
 8006a96:	1a5b      	subs	r3, r3, r1
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	4343      	muls	r3, r0
 8006a9e:	0fdd      	lsrs	r5, r3, #31
 8006aa0:	18ed      	adds	r5, r5, r3
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	9802      	ldr	r0, [sp, #8]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	181b      	adds	r3, r3, r0
 8006aaa:	106d      	asrs	r5, r5, #1
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	d900      	bls.n	8006ab2 <__ssputs_r+0x3e>
 8006ab0:	001d      	movs	r5, r3
 8006ab2:	0553      	lsls	r3, r2, #21
 8006ab4:	d532      	bpl.n	8006b1c <__ssputs_r+0xa8>
 8006ab6:	0029      	movs	r1, r5
 8006ab8:	0038      	movs	r0, r7
 8006aba:	f000 fb53 	bl	8007164 <_malloc_r>
 8006abe:	1e06      	subs	r6, r0, #0
 8006ac0:	d109      	bne.n	8006ad6 <__ssputs_r+0x62>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	2001      	movs	r0, #1
 8006aca:	89a2      	ldrh	r2, [r4, #12]
 8006acc:	4240      	negs	r0, r0
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	b005      	add	sp, #20
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	9a02      	ldr	r2, [sp, #8]
 8006ad8:	6921      	ldr	r1, [r4, #16]
 8006ada:	f000 faba 	bl	8007052 <memcpy>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <__ssputs_r+0xc0>)
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	6126      	str	r6, [r4, #16]
 8006aee:	18f6      	adds	r6, r6, r3
 8006af0:	6026      	str	r6, [r4, #0]
 8006af2:	6165      	str	r5, [r4, #20]
 8006af4:	9e01      	ldr	r6, [sp, #4]
 8006af6:	1aed      	subs	r5, r5, r3
 8006af8:	60a5      	str	r5, [r4, #8]
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	429e      	cmp	r6, r3
 8006afe:	d900      	bls.n	8006b02 <__ssputs_r+0x8e>
 8006b00:	9e01      	ldr	r6, [sp, #4]
 8006b02:	0032      	movs	r2, r6
 8006b04:	9903      	ldr	r1, [sp, #12]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	f000 faac 	bl	8007064 <memmove>
 8006b0c:	68a3      	ldr	r3, [r4, #8]
 8006b0e:	2000      	movs	r0, #0
 8006b10:	1b9b      	subs	r3, r3, r6
 8006b12:	60a3      	str	r3, [r4, #8]
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	199e      	adds	r6, r3, r6
 8006b18:	6026      	str	r6, [r4, #0]
 8006b1a:	e7da      	b.n	8006ad2 <__ssputs_r+0x5e>
 8006b1c:	002a      	movs	r2, r5
 8006b1e:	0038      	movs	r0, r7
 8006b20:	f000 fb96 	bl	8007250 <_realloc_r>
 8006b24:	1e06      	subs	r6, r0, #0
 8006b26:	d1e0      	bne.n	8006aea <__ssputs_r+0x76>
 8006b28:	0038      	movs	r0, r7
 8006b2a:	6921      	ldr	r1, [r4, #16]
 8006b2c:	f000 faae 	bl	800708c <_free_r>
 8006b30:	e7c7      	b.n	8006ac2 <__ssputs_r+0x4e>
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	fffffb7f 	.word	0xfffffb7f

08006b38 <_svfiprintf_r>:
 8006b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3a:	b0a1      	sub	sp, #132	; 0x84
 8006b3c:	9003      	str	r0, [sp, #12]
 8006b3e:	001d      	movs	r5, r3
 8006b40:	898b      	ldrh	r3, [r1, #12]
 8006b42:	000f      	movs	r7, r1
 8006b44:	0016      	movs	r6, r2
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	d511      	bpl.n	8006b6e <_svfiprintf_r+0x36>
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10e      	bne.n	8006b6e <_svfiprintf_r+0x36>
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	f000 fb07 	bl	8007164 <_malloc_r>
 8006b56:	6038      	str	r0, [r7, #0]
 8006b58:	6138      	str	r0, [r7, #16]
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d105      	bne.n	8006b6a <_svfiprintf_r+0x32>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	9a03      	ldr	r2, [sp, #12]
 8006b62:	3801      	subs	r0, #1
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	b021      	add	sp, #132	; 0x84
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	ac08      	add	r4, sp, #32
 8006b72:	6163      	str	r3, [r4, #20]
 8006b74:	3320      	adds	r3, #32
 8006b76:	7663      	strb	r3, [r4, #25]
 8006b78:	3310      	adds	r3, #16
 8006b7a:	76a3      	strb	r3, [r4, #26]
 8006b7c:	9507      	str	r5, [sp, #28]
 8006b7e:	0035      	movs	r5, r6
 8006b80:	782b      	ldrb	r3, [r5, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <_svfiprintf_r+0x52>
 8006b86:	2b25      	cmp	r3, #37	; 0x25
 8006b88:	d147      	bne.n	8006c1a <_svfiprintf_r+0xe2>
 8006b8a:	1bab      	subs	r3, r5, r6
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	42b5      	cmp	r5, r6
 8006b90:	d00c      	beq.n	8006bac <_svfiprintf_r+0x74>
 8006b92:	0032      	movs	r2, r6
 8006b94:	0039      	movs	r1, r7
 8006b96:	9803      	ldr	r0, [sp, #12]
 8006b98:	f7ff ff6c 	bl	8006a74 <__ssputs_r>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d100      	bne.n	8006ba2 <_svfiprintf_r+0x6a>
 8006ba0:	e0ae      	b.n	8006d00 <_svfiprintf_r+0x1c8>
 8006ba2:	6962      	ldr	r2, [r4, #20]
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	4694      	mov	ip, r2
 8006ba8:	4463      	add	r3, ip
 8006baa:	6163      	str	r3, [r4, #20]
 8006bac:	782b      	ldrb	r3, [r5, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d100      	bne.n	8006bb4 <_svfiprintf_r+0x7c>
 8006bb2:	e0a5      	b.n	8006d00 <_svfiprintf_r+0x1c8>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4252      	negs	r2, r2
 8006bba:	6062      	str	r2, [r4, #4]
 8006bbc:	a904      	add	r1, sp, #16
 8006bbe:	3254      	adds	r2, #84	; 0x54
 8006bc0:	1852      	adds	r2, r2, r1
 8006bc2:	1c6e      	adds	r6, r5, #1
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	60e3      	str	r3, [r4, #12]
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	7013      	strb	r3, [r2, #0]
 8006bcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bce:	2205      	movs	r2, #5
 8006bd0:	7831      	ldrb	r1, [r6, #0]
 8006bd2:	4854      	ldr	r0, [pc, #336]	; (8006d24 <_svfiprintf_r+0x1ec>)
 8006bd4:	f000 fa32 	bl	800703c <memchr>
 8006bd8:	1c75      	adds	r5, r6, #1
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d11f      	bne.n	8006c1e <_svfiprintf_r+0xe6>
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	06d3      	lsls	r3, r2, #27
 8006be2:	d504      	bpl.n	8006bee <_svfiprintf_r+0xb6>
 8006be4:	2353      	movs	r3, #83	; 0x53
 8006be6:	a904      	add	r1, sp, #16
 8006be8:	185b      	adds	r3, r3, r1
 8006bea:	2120      	movs	r1, #32
 8006bec:	7019      	strb	r1, [r3, #0]
 8006bee:	0713      	lsls	r3, r2, #28
 8006bf0:	d504      	bpl.n	8006bfc <_svfiprintf_r+0xc4>
 8006bf2:	2353      	movs	r3, #83	; 0x53
 8006bf4:	a904      	add	r1, sp, #16
 8006bf6:	185b      	adds	r3, r3, r1
 8006bf8:	212b      	movs	r1, #43	; 0x2b
 8006bfa:	7019      	strb	r1, [r3, #0]
 8006bfc:	7833      	ldrb	r3, [r6, #0]
 8006bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006c00:	d016      	beq.n	8006c30 <_svfiprintf_r+0xf8>
 8006c02:	0035      	movs	r5, r6
 8006c04:	2100      	movs	r1, #0
 8006c06:	200a      	movs	r0, #10
 8006c08:	68e3      	ldr	r3, [r4, #12]
 8006c0a:	782a      	ldrb	r2, [r5, #0]
 8006c0c:	1c6e      	adds	r6, r5, #1
 8006c0e:	3a30      	subs	r2, #48	; 0x30
 8006c10:	2a09      	cmp	r2, #9
 8006c12:	d94e      	bls.n	8006cb2 <_svfiprintf_r+0x17a>
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d111      	bne.n	8006c3c <_svfiprintf_r+0x104>
 8006c18:	e017      	b.n	8006c4a <_svfiprintf_r+0x112>
 8006c1a:	3501      	adds	r5, #1
 8006c1c:	e7b0      	b.n	8006b80 <_svfiprintf_r+0x48>
 8006c1e:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <_svfiprintf_r+0x1ec>)
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	1ac0      	subs	r0, r0, r3
 8006c24:	2301      	movs	r3, #1
 8006c26:	4083      	lsls	r3, r0
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	002e      	movs	r6, r5
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	e7ce      	b.n	8006bce <_svfiprintf_r+0x96>
 8006c30:	9b07      	ldr	r3, [sp, #28]
 8006c32:	1d19      	adds	r1, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	9107      	str	r1, [sp, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db01      	blt.n	8006c40 <_svfiprintf_r+0x108>
 8006c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c3e:	e004      	b.n	8006c4a <_svfiprintf_r+0x112>
 8006c40:	425b      	negs	r3, r3
 8006c42:	60e3      	str	r3, [r4, #12]
 8006c44:	2302      	movs	r3, #2
 8006c46:	4313      	orrs	r3, r2
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	782b      	ldrb	r3, [r5, #0]
 8006c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c4e:	d10a      	bne.n	8006c66 <_svfiprintf_r+0x12e>
 8006c50:	786b      	ldrb	r3, [r5, #1]
 8006c52:	2b2a      	cmp	r3, #42	; 0x2a
 8006c54:	d135      	bne.n	8006cc2 <_svfiprintf_r+0x18a>
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	3502      	adds	r5, #2
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	9207      	str	r2, [sp, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	db2b      	blt.n	8006cbc <_svfiprintf_r+0x184>
 8006c64:	9309      	str	r3, [sp, #36]	; 0x24
 8006c66:	4e30      	ldr	r6, [pc, #192]	; (8006d28 <_svfiprintf_r+0x1f0>)
 8006c68:	2203      	movs	r2, #3
 8006c6a:	0030      	movs	r0, r6
 8006c6c:	7829      	ldrb	r1, [r5, #0]
 8006c6e:	f000 f9e5 	bl	800703c <memchr>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d006      	beq.n	8006c84 <_svfiprintf_r+0x14c>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	1b80      	subs	r0, r0, r6
 8006c7a:	4083      	lsls	r3, r0
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	3501      	adds	r5, #1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	7829      	ldrb	r1, [r5, #0]
 8006c86:	2206      	movs	r2, #6
 8006c88:	4828      	ldr	r0, [pc, #160]	; (8006d2c <_svfiprintf_r+0x1f4>)
 8006c8a:	1c6e      	adds	r6, r5, #1
 8006c8c:	7621      	strb	r1, [r4, #24]
 8006c8e:	f000 f9d5 	bl	800703c <memchr>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d03c      	beq.n	8006d10 <_svfiprintf_r+0x1d8>
 8006c96:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <_svfiprintf_r+0x1f8>)
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d125      	bne.n	8006ce8 <_svfiprintf_r+0x1b0>
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	9b07      	ldr	r3, [sp, #28]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	4393      	bics	r3, r2
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	6963      	ldr	r3, [r4, #20]
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	189b      	adds	r3, r3, r2
 8006cae:	6163      	str	r3, [r4, #20]
 8006cb0:	e765      	b.n	8006b7e <_svfiprintf_r+0x46>
 8006cb2:	4343      	muls	r3, r0
 8006cb4:	0035      	movs	r5, r6
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	e7a6      	b.n	8006c0a <_svfiprintf_r+0xd2>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	425b      	negs	r3, r3
 8006cc0:	e7d0      	b.n	8006c64 <_svfiprintf_r+0x12c>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	200a      	movs	r0, #10
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	3501      	adds	r5, #1
 8006cca:	6063      	str	r3, [r4, #4]
 8006ccc:	7829      	ldrb	r1, [r5, #0]
 8006cce:	1c6e      	adds	r6, r5, #1
 8006cd0:	3930      	subs	r1, #48	; 0x30
 8006cd2:	2909      	cmp	r1, #9
 8006cd4:	d903      	bls.n	8006cde <_svfiprintf_r+0x1a6>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0c5      	beq.n	8006c66 <_svfiprintf_r+0x12e>
 8006cda:	9209      	str	r2, [sp, #36]	; 0x24
 8006cdc:	e7c3      	b.n	8006c66 <_svfiprintf_r+0x12e>
 8006cde:	4342      	muls	r2, r0
 8006ce0:	0035      	movs	r5, r6
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	1852      	adds	r2, r2, r1
 8006ce6:	e7f1      	b.n	8006ccc <_svfiprintf_r+0x194>
 8006ce8:	ab07      	add	r3, sp, #28
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	003a      	movs	r2, r7
 8006cee:	0021      	movs	r1, r4
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <_svfiprintf_r+0x1fc>)
 8006cf2:	9803      	ldr	r0, [sp, #12]
 8006cf4:	e000      	b.n	8006cf8 <_svfiprintf_r+0x1c0>
 8006cf6:	bf00      	nop
 8006cf8:	9004      	str	r0, [sp, #16]
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	d1d3      	bne.n	8006ca8 <_svfiprintf_r+0x170>
 8006d00:	89bb      	ldrh	r3, [r7, #12]
 8006d02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d04:	065b      	lsls	r3, r3, #25
 8006d06:	d400      	bmi.n	8006d0a <_svfiprintf_r+0x1d2>
 8006d08:	e72d      	b.n	8006b66 <_svfiprintf_r+0x2e>
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	4240      	negs	r0, r0
 8006d0e:	e72a      	b.n	8006b66 <_svfiprintf_r+0x2e>
 8006d10:	ab07      	add	r3, sp, #28
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	003a      	movs	r2, r7
 8006d16:	0021      	movs	r1, r4
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <_svfiprintf_r+0x1fc>)
 8006d1a:	9803      	ldr	r0, [sp, #12]
 8006d1c:	f000 f87c 	bl	8006e18 <_printf_i>
 8006d20:	e7ea      	b.n	8006cf8 <_svfiprintf_r+0x1c0>
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	080082c4 	.word	0x080082c4
 8006d28:	080082ca 	.word	0x080082ca
 8006d2c:	080082ce 	.word	0x080082ce
 8006d30:	00000000 	.word	0x00000000
 8006d34:	08006a75 	.word	0x08006a75

08006d38 <_printf_common>:
 8006d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d3a:	0015      	movs	r5, r2
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	688a      	ldr	r2, [r1, #8]
 8006d40:	690b      	ldr	r3, [r1, #16]
 8006d42:	000c      	movs	r4, r1
 8006d44:	9000      	str	r0, [sp, #0]
 8006d46:	4293      	cmp	r3, r2
 8006d48:	da00      	bge.n	8006d4c <_printf_common+0x14>
 8006d4a:	0013      	movs	r3, r2
 8006d4c:	0022      	movs	r2, r4
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	3243      	adds	r2, #67	; 0x43
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	d001      	beq.n	8006d5c <_printf_common+0x24>
 8006d58:	3301      	adds	r3, #1
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	069b      	lsls	r3, r3, #26
 8006d60:	d502      	bpl.n	8006d68 <_printf_common+0x30>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	3302      	adds	r3, #2
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	0017      	movs	r7, r2
 8006d6e:	401f      	ands	r7, r3
 8006d70:	421a      	tst	r2, r3
 8006d72:	d027      	beq.n	8006dc4 <_printf_common+0x8c>
 8006d74:	0023      	movs	r3, r4
 8006d76:	3343      	adds	r3, #67	; 0x43
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	1e5a      	subs	r2, r3, #1
 8006d7c:	4193      	sbcs	r3, r2
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	0692      	lsls	r2, r2, #26
 8006d82:	d430      	bmi.n	8006de6 <_printf_common+0xae>
 8006d84:	0022      	movs	r2, r4
 8006d86:	9901      	ldr	r1, [sp, #4]
 8006d88:	9800      	ldr	r0, [sp, #0]
 8006d8a:	9e08      	ldr	r6, [sp, #32]
 8006d8c:	3243      	adds	r2, #67	; 0x43
 8006d8e:	47b0      	blx	r6
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d025      	beq.n	8006de0 <_printf_common+0xa8>
 8006d94:	2306      	movs	r3, #6
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	682a      	ldr	r2, [r5, #0]
 8006d9a:	68e1      	ldr	r1, [r4, #12]
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	4003      	ands	r3, r0
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d103      	bne.n	8006dac <_printf_common+0x74>
 8006da4:	1a8d      	subs	r5, r1, r2
 8006da6:	43eb      	mvns	r3, r5
 8006da8:	17db      	asrs	r3, r3, #31
 8006daa:	401d      	ands	r5, r3
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	dd01      	ble.n	8006db8 <_printf_common+0x80>
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	18ed      	adds	r5, r5, r3
 8006db8:	2700      	movs	r7, #0
 8006dba:	42bd      	cmp	r5, r7
 8006dbc:	d120      	bne.n	8006e00 <_printf_common+0xc8>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e010      	b.n	8006de4 <_printf_common+0xac>
 8006dc2:	3701      	adds	r7, #1
 8006dc4:	68e3      	ldr	r3, [r4, #12]
 8006dc6:	682a      	ldr	r2, [r5, #0]
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	ddd2      	ble.n	8006d74 <_printf_common+0x3c>
 8006dce:	0022      	movs	r2, r4
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	9901      	ldr	r1, [sp, #4]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	9e08      	ldr	r6, [sp, #32]
 8006dd8:	3219      	adds	r2, #25
 8006dda:	47b0      	blx	r6
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d1f0      	bne.n	8006dc2 <_printf_common+0x8a>
 8006de0:	2001      	movs	r0, #1
 8006de2:	4240      	negs	r0, r0
 8006de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006de6:	2030      	movs	r0, #48	; 0x30
 8006de8:	18e1      	adds	r1, r4, r3
 8006dea:	3143      	adds	r1, #67	; 0x43
 8006dec:	7008      	strb	r0, [r1, #0]
 8006dee:	0021      	movs	r1, r4
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	3145      	adds	r1, #69	; 0x45
 8006df4:	7809      	ldrb	r1, [r1, #0]
 8006df6:	18a2      	adds	r2, r4, r2
 8006df8:	3243      	adds	r2, #67	; 0x43
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	7011      	strb	r1, [r2, #0]
 8006dfe:	e7c1      	b.n	8006d84 <_printf_common+0x4c>
 8006e00:	0022      	movs	r2, r4
 8006e02:	2301      	movs	r3, #1
 8006e04:	9901      	ldr	r1, [sp, #4]
 8006e06:	9800      	ldr	r0, [sp, #0]
 8006e08:	9e08      	ldr	r6, [sp, #32]
 8006e0a:	321a      	adds	r2, #26
 8006e0c:	47b0      	blx	r6
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa8>
 8006e12:	3701      	adds	r7, #1
 8006e14:	e7d1      	b.n	8006dba <_printf_common+0x82>
	...

08006e18 <_printf_i>:
 8006e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e1a:	b08b      	sub	sp, #44	; 0x2c
 8006e1c:	9206      	str	r2, [sp, #24]
 8006e1e:	000a      	movs	r2, r1
 8006e20:	3243      	adds	r2, #67	; 0x43
 8006e22:	9307      	str	r3, [sp, #28]
 8006e24:	9005      	str	r0, [sp, #20]
 8006e26:	9204      	str	r2, [sp, #16]
 8006e28:	7e0a      	ldrb	r2, [r1, #24]
 8006e2a:	000c      	movs	r4, r1
 8006e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e2e:	2a78      	cmp	r2, #120	; 0x78
 8006e30:	d807      	bhi.n	8006e42 <_printf_i+0x2a>
 8006e32:	2a62      	cmp	r2, #98	; 0x62
 8006e34:	d809      	bhi.n	8006e4a <_printf_i+0x32>
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d100      	bne.n	8006e3c <_printf_i+0x24>
 8006e3a:	e0c1      	b.n	8006fc0 <_printf_i+0x1a8>
 8006e3c:	2a58      	cmp	r2, #88	; 0x58
 8006e3e:	d100      	bne.n	8006e42 <_printf_i+0x2a>
 8006e40:	e08c      	b.n	8006f5c <_printf_i+0x144>
 8006e42:	0026      	movs	r6, r4
 8006e44:	3642      	adds	r6, #66	; 0x42
 8006e46:	7032      	strb	r2, [r6, #0]
 8006e48:	e022      	b.n	8006e90 <_printf_i+0x78>
 8006e4a:	0010      	movs	r0, r2
 8006e4c:	3863      	subs	r0, #99	; 0x63
 8006e4e:	2815      	cmp	r0, #21
 8006e50:	d8f7      	bhi.n	8006e42 <_printf_i+0x2a>
 8006e52:	f7f9 f959 	bl	8000108 <__gnu_thumb1_case_shi>
 8006e56:	0016      	.short	0x0016
 8006e58:	fff6001f 	.word	0xfff6001f
 8006e5c:	fff6fff6 	.word	0xfff6fff6
 8006e60:	001ffff6 	.word	0x001ffff6
 8006e64:	fff6fff6 	.word	0xfff6fff6
 8006e68:	fff6fff6 	.word	0xfff6fff6
 8006e6c:	003600a8 	.word	0x003600a8
 8006e70:	fff6009a 	.word	0xfff6009a
 8006e74:	00b9fff6 	.word	0x00b9fff6
 8006e78:	0036fff6 	.word	0x0036fff6
 8006e7c:	fff6fff6 	.word	0xfff6fff6
 8006e80:	009e      	.short	0x009e
 8006e82:	0026      	movs	r6, r4
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	3642      	adds	r6, #66	; 0x42
 8006e88:	1d11      	adds	r1, r2, #4
 8006e8a:	6019      	str	r1, [r3, #0]
 8006e8c:	6813      	ldr	r3, [r2, #0]
 8006e8e:	7033      	strb	r3, [r6, #0]
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0a7      	b.n	8006fe4 <_printf_i+0x1cc>
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	6819      	ldr	r1, [r3, #0]
 8006e98:	1d0a      	adds	r2, r1, #4
 8006e9a:	0605      	lsls	r5, r0, #24
 8006e9c:	d50b      	bpl.n	8006eb6 <_printf_i+0x9e>
 8006e9e:	680d      	ldr	r5, [r1, #0]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	da03      	bge.n	8006eae <_printf_i+0x96>
 8006ea6:	232d      	movs	r3, #45	; 0x2d
 8006ea8:	9a04      	ldr	r2, [sp, #16]
 8006eaa:	426d      	negs	r5, r5
 8006eac:	7013      	strb	r3, [r2, #0]
 8006eae:	4b61      	ldr	r3, [pc, #388]	; (8007034 <_printf_i+0x21c>)
 8006eb0:	270a      	movs	r7, #10
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	e01b      	b.n	8006eee <_printf_i+0xd6>
 8006eb6:	680d      	ldr	r5, [r1, #0]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	0641      	lsls	r1, r0, #25
 8006ebc:	d5f1      	bpl.n	8006ea2 <_printf_i+0x8a>
 8006ebe:	b22d      	sxth	r5, r5
 8006ec0:	e7ef      	b.n	8006ea2 <_printf_i+0x8a>
 8006ec2:	680d      	ldr	r5, [r1, #0]
 8006ec4:	6819      	ldr	r1, [r3, #0]
 8006ec6:	1d08      	adds	r0, r1, #4
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	062e      	lsls	r6, r5, #24
 8006ecc:	d501      	bpl.n	8006ed2 <_printf_i+0xba>
 8006ece:	680d      	ldr	r5, [r1, #0]
 8006ed0:	e003      	b.n	8006eda <_printf_i+0xc2>
 8006ed2:	066d      	lsls	r5, r5, #25
 8006ed4:	d5fb      	bpl.n	8006ece <_printf_i+0xb6>
 8006ed6:	680d      	ldr	r5, [r1, #0]
 8006ed8:	b2ad      	uxth	r5, r5
 8006eda:	4b56      	ldr	r3, [pc, #344]	; (8007034 <_printf_i+0x21c>)
 8006edc:	2708      	movs	r7, #8
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ee2:	d000      	beq.n	8006ee6 <_printf_i+0xce>
 8006ee4:	3702      	adds	r7, #2
 8006ee6:	0023      	movs	r3, r4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	3343      	adds	r3, #67	; 0x43
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	6863      	ldr	r3, [r4, #4]
 8006ef0:	60a3      	str	r3, [r4, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db03      	blt.n	8006efe <_printf_i+0xe6>
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	6821      	ldr	r1, [r4, #0]
 8006efa:	4391      	bics	r1, r2
 8006efc:	6021      	str	r1, [r4, #0]
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	d102      	bne.n	8006f08 <_printf_i+0xf0>
 8006f02:	9e04      	ldr	r6, [sp, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00c      	beq.n	8006f22 <_printf_i+0x10a>
 8006f08:	9e04      	ldr	r6, [sp, #16]
 8006f0a:	0028      	movs	r0, r5
 8006f0c:	0039      	movs	r1, r7
 8006f0e:	f7f9 f98b 	bl	8000228 <__aeabi_uidivmod>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	3e01      	subs	r6, #1
 8006f16:	5c5b      	ldrb	r3, [r3, r1]
 8006f18:	7033      	strb	r3, [r6, #0]
 8006f1a:	002b      	movs	r3, r5
 8006f1c:	0005      	movs	r5, r0
 8006f1e:	429f      	cmp	r7, r3
 8006f20:	d9f3      	bls.n	8006f0a <_printf_i+0xf2>
 8006f22:	2f08      	cmp	r7, #8
 8006f24:	d109      	bne.n	8006f3a <_printf_i+0x122>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	07db      	lsls	r3, r3, #31
 8006f2a:	d506      	bpl.n	8006f3a <_printf_i+0x122>
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	6922      	ldr	r2, [r4, #16]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	dc02      	bgt.n	8006f3a <_printf_i+0x122>
 8006f34:	2330      	movs	r3, #48	; 0x30
 8006f36:	3e01      	subs	r6, #1
 8006f38:	7033      	strb	r3, [r6, #0]
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	1b9b      	subs	r3, r3, r6
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	9b07      	ldr	r3, [sp, #28]
 8006f42:	0021      	movs	r1, r4
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	9805      	ldr	r0, [sp, #20]
 8006f48:	9b06      	ldr	r3, [sp, #24]
 8006f4a:	aa09      	add	r2, sp, #36	; 0x24
 8006f4c:	f7ff fef4 	bl	8006d38 <_printf_common>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d14c      	bne.n	8006fee <_printf_i+0x1d6>
 8006f54:	2001      	movs	r0, #1
 8006f56:	4240      	negs	r0, r0
 8006f58:	b00b      	add	sp, #44	; 0x2c
 8006f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5c:	3145      	adds	r1, #69	; 0x45
 8006f5e:	700a      	strb	r2, [r1, #0]
 8006f60:	4a34      	ldr	r2, [pc, #208]	; (8007034 <_printf_i+0x21c>)
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	6821      	ldr	r1, [r4, #0]
 8006f68:	ca20      	ldmia	r2!, {r5}
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	0608      	lsls	r0, r1, #24
 8006f6e:	d516      	bpl.n	8006f9e <_printf_i+0x186>
 8006f70:	07cb      	lsls	r3, r1, #31
 8006f72:	d502      	bpl.n	8006f7a <_printf_i+0x162>
 8006f74:	2320      	movs	r3, #32
 8006f76:	4319      	orrs	r1, r3
 8006f78:	6021      	str	r1, [r4, #0]
 8006f7a:	2710      	movs	r7, #16
 8006f7c:	2d00      	cmp	r5, #0
 8006f7e:	d1b2      	bne.n	8006ee6 <_printf_i+0xce>
 8006f80:	2320      	movs	r3, #32
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	439a      	bics	r2, r3
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	e7ad      	b.n	8006ee6 <_printf_i+0xce>
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	6809      	ldr	r1, [r1, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	0022      	movs	r2, r4
 8006f94:	2178      	movs	r1, #120	; 0x78
 8006f96:	3245      	adds	r2, #69	; 0x45
 8006f98:	7011      	strb	r1, [r2, #0]
 8006f9a:	4a27      	ldr	r2, [pc, #156]	; (8007038 <_printf_i+0x220>)
 8006f9c:	e7e1      	b.n	8006f62 <_printf_i+0x14a>
 8006f9e:	0648      	lsls	r0, r1, #25
 8006fa0:	d5e6      	bpl.n	8006f70 <_printf_i+0x158>
 8006fa2:	b2ad      	uxth	r5, r5
 8006fa4:	e7e4      	b.n	8006f70 <_printf_i+0x158>
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	680d      	ldr	r5, [r1, #0]
 8006faa:	1d10      	adds	r0, r2, #4
 8006fac:	6949      	ldr	r1, [r1, #20]
 8006fae:	6018      	str	r0, [r3, #0]
 8006fb0:	6813      	ldr	r3, [r2, #0]
 8006fb2:	062e      	lsls	r6, r5, #24
 8006fb4:	d501      	bpl.n	8006fba <_printf_i+0x1a2>
 8006fb6:	6019      	str	r1, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <_printf_i+0x1a8>
 8006fba:	066d      	lsls	r5, r5, #25
 8006fbc:	d5fb      	bpl.n	8006fb6 <_printf_i+0x19e>
 8006fbe:	8019      	strh	r1, [r3, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9e04      	ldr	r6, [sp, #16]
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	e7bb      	b.n	8006f40 <_printf_i+0x128>
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	1d11      	adds	r1, r2, #4
 8006fcc:	6019      	str	r1, [r3, #0]
 8006fce:	6816      	ldr	r6, [r2, #0]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	0030      	movs	r0, r6
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	f000 f831 	bl	800703c <memchr>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d001      	beq.n	8006fe2 <_printf_i+0x1ca>
 8006fde:	1b80      	subs	r0, r0, r6
 8006fe0:	6060      	str	r0, [r4, #4]
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	7013      	strb	r3, [r2, #0]
 8006fec:	e7a8      	b.n	8006f40 <_printf_i+0x128>
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	0032      	movs	r2, r6
 8006ff2:	9906      	ldr	r1, [sp, #24]
 8006ff4:	9805      	ldr	r0, [sp, #20]
 8006ff6:	9d07      	ldr	r5, [sp, #28]
 8006ff8:	47a8      	blx	r5
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d0aa      	beq.n	8006f54 <_printf_i+0x13c>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	079b      	lsls	r3, r3, #30
 8007002:	d415      	bmi.n	8007030 <_printf_i+0x218>
 8007004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007006:	68e0      	ldr	r0, [r4, #12]
 8007008:	4298      	cmp	r0, r3
 800700a:	daa5      	bge.n	8006f58 <_printf_i+0x140>
 800700c:	0018      	movs	r0, r3
 800700e:	e7a3      	b.n	8006f58 <_printf_i+0x140>
 8007010:	0022      	movs	r2, r4
 8007012:	2301      	movs	r3, #1
 8007014:	9906      	ldr	r1, [sp, #24]
 8007016:	9805      	ldr	r0, [sp, #20]
 8007018:	9e07      	ldr	r6, [sp, #28]
 800701a:	3219      	adds	r2, #25
 800701c:	47b0      	blx	r6
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d098      	beq.n	8006f54 <_printf_i+0x13c>
 8007022:	3501      	adds	r5, #1
 8007024:	68e3      	ldr	r3, [r4, #12]
 8007026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	42ab      	cmp	r3, r5
 800702c:	dcf0      	bgt.n	8007010 <_printf_i+0x1f8>
 800702e:	e7e9      	b.n	8007004 <_printf_i+0x1ec>
 8007030:	2500      	movs	r5, #0
 8007032:	e7f7      	b.n	8007024 <_printf_i+0x20c>
 8007034:	080082d5 	.word	0x080082d5
 8007038:	080082e6 	.word	0x080082e6

0800703c <memchr>:
 800703c:	b2c9      	uxtb	r1, r1
 800703e:	1882      	adds	r2, r0, r2
 8007040:	4290      	cmp	r0, r2
 8007042:	d101      	bne.n	8007048 <memchr+0xc>
 8007044:	2000      	movs	r0, #0
 8007046:	4770      	bx	lr
 8007048:	7803      	ldrb	r3, [r0, #0]
 800704a:	428b      	cmp	r3, r1
 800704c:	d0fb      	beq.n	8007046 <memchr+0xa>
 800704e:	3001      	adds	r0, #1
 8007050:	e7f6      	b.n	8007040 <memchr+0x4>

08007052 <memcpy>:
 8007052:	2300      	movs	r3, #0
 8007054:	b510      	push	{r4, lr}
 8007056:	429a      	cmp	r2, r3
 8007058:	d100      	bne.n	800705c <memcpy+0xa>
 800705a:	bd10      	pop	{r4, pc}
 800705c:	5ccc      	ldrb	r4, [r1, r3]
 800705e:	54c4      	strb	r4, [r0, r3]
 8007060:	3301      	adds	r3, #1
 8007062:	e7f8      	b.n	8007056 <memcpy+0x4>

08007064 <memmove>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4288      	cmp	r0, r1
 8007068:	d902      	bls.n	8007070 <memmove+0xc>
 800706a:	188b      	adds	r3, r1, r2
 800706c:	4298      	cmp	r0, r3
 800706e:	d303      	bcc.n	8007078 <memmove+0x14>
 8007070:	2300      	movs	r3, #0
 8007072:	e007      	b.n	8007084 <memmove+0x20>
 8007074:	5c8b      	ldrb	r3, [r1, r2]
 8007076:	5483      	strb	r3, [r0, r2]
 8007078:	3a01      	subs	r2, #1
 800707a:	d2fb      	bcs.n	8007074 <memmove+0x10>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	5ccc      	ldrb	r4, [r1, r3]
 8007080:	54c4      	strb	r4, [r0, r3]
 8007082:	3301      	adds	r3, #1
 8007084:	429a      	cmp	r2, r3
 8007086:	d1fa      	bne.n	800707e <memmove+0x1a>
 8007088:	e7f8      	b.n	800707c <memmove+0x18>
	...

0800708c <_free_r>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	0005      	movs	r5, r0
 8007090:	2900      	cmp	r1, #0
 8007092:	d010      	beq.n	80070b6 <_free_r+0x2a>
 8007094:	1f0c      	subs	r4, r1, #4
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	da00      	bge.n	800709e <_free_r+0x12>
 800709c:	18e4      	adds	r4, r4, r3
 800709e:	0028      	movs	r0, r5
 80070a0:	f000 f918 	bl	80072d4 <__malloc_lock>
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <_free_r+0x90>)
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <_free_r+0x2c>
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	6014      	str	r4, [r2, #0]
 80070b0:	0028      	movs	r0, r5
 80070b2:	f000 f917 	bl	80072e4 <__malloc_unlock>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	d908      	bls.n	80070ce <_free_r+0x42>
 80070bc:	6821      	ldr	r1, [r4, #0]
 80070be:	1860      	adds	r0, r4, r1
 80070c0:	4283      	cmp	r3, r0
 80070c2:	d1f3      	bne.n	80070ac <_free_r+0x20>
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	1841      	adds	r1, r0, r1
 80070ca:	6021      	str	r1, [r4, #0]
 80070cc:	e7ee      	b.n	80070ac <_free_r+0x20>
 80070ce:	001a      	movs	r2, r3
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <_free_r+0x4e>
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	d9f9      	bls.n	80070ce <_free_r+0x42>
 80070da:	6811      	ldr	r1, [r2, #0]
 80070dc:	1850      	adds	r0, r2, r1
 80070de:	42a0      	cmp	r0, r4
 80070e0:	d10b      	bne.n	80070fa <_free_r+0x6e>
 80070e2:	6820      	ldr	r0, [r4, #0]
 80070e4:	1809      	adds	r1, r1, r0
 80070e6:	1850      	adds	r0, r2, r1
 80070e8:	6011      	str	r1, [r2, #0]
 80070ea:	4283      	cmp	r3, r0
 80070ec:	d1e0      	bne.n	80070b0 <_free_r+0x24>
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	1841      	adds	r1, r0, r1
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	6053      	str	r3, [r2, #4]
 80070f8:	e7da      	b.n	80070b0 <_free_r+0x24>
 80070fa:	42a0      	cmp	r0, r4
 80070fc:	d902      	bls.n	8007104 <_free_r+0x78>
 80070fe:	230c      	movs	r3, #12
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	e7d5      	b.n	80070b0 <_free_r+0x24>
 8007104:	6821      	ldr	r1, [r4, #0]
 8007106:	1860      	adds	r0, r4, r1
 8007108:	4283      	cmp	r3, r0
 800710a:	d103      	bne.n	8007114 <_free_r+0x88>
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	1841      	adds	r1, r0, r1
 8007112:	6021      	str	r1, [r4, #0]
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	6054      	str	r4, [r2, #4]
 8007118:	e7ca      	b.n	80070b0 <_free_r+0x24>
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	200001b0 	.word	0x200001b0

08007120 <sbrk_aligned>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4e0f      	ldr	r6, [pc, #60]	; (8007160 <sbrk_aligned+0x40>)
 8007124:	000d      	movs	r5, r1
 8007126:	6831      	ldr	r1, [r6, #0]
 8007128:	0004      	movs	r4, r0
 800712a:	2900      	cmp	r1, #0
 800712c:	d102      	bne.n	8007134 <sbrk_aligned+0x14>
 800712e:	f000 f8bf 	bl	80072b0 <_sbrk_r>
 8007132:	6030      	str	r0, [r6, #0]
 8007134:	0029      	movs	r1, r5
 8007136:	0020      	movs	r0, r4
 8007138:	f000 f8ba 	bl	80072b0 <_sbrk_r>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d00a      	beq.n	8007156 <sbrk_aligned+0x36>
 8007140:	2303      	movs	r3, #3
 8007142:	1cc5      	adds	r5, r0, #3
 8007144:	439d      	bics	r5, r3
 8007146:	42a8      	cmp	r0, r5
 8007148:	d007      	beq.n	800715a <sbrk_aligned+0x3a>
 800714a:	1a29      	subs	r1, r5, r0
 800714c:	0020      	movs	r0, r4
 800714e:	f000 f8af 	bl	80072b0 <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d101      	bne.n	800715a <sbrk_aligned+0x3a>
 8007156:	2501      	movs	r5, #1
 8007158:	426d      	negs	r5, r5
 800715a:	0028      	movs	r0, r5
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	200001b4 	.word	0x200001b4

08007164 <_malloc_r>:
 8007164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007166:	2203      	movs	r2, #3
 8007168:	1ccb      	adds	r3, r1, #3
 800716a:	4393      	bics	r3, r2
 800716c:	3308      	adds	r3, #8
 800716e:	0006      	movs	r6, r0
 8007170:	001f      	movs	r7, r3
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d232      	bcs.n	80071dc <_malloc_r+0x78>
 8007176:	270c      	movs	r7, #12
 8007178:	42b9      	cmp	r1, r7
 800717a:	d831      	bhi.n	80071e0 <_malloc_r+0x7c>
 800717c:	0030      	movs	r0, r6
 800717e:	f000 f8a9 	bl	80072d4 <__malloc_lock>
 8007182:	4d32      	ldr	r5, [pc, #200]	; (800724c <_malloc_r+0xe8>)
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	001c      	movs	r4, r3
 8007188:	2c00      	cmp	r4, #0
 800718a:	d12e      	bne.n	80071ea <_malloc_r+0x86>
 800718c:	0039      	movs	r1, r7
 800718e:	0030      	movs	r0, r6
 8007190:	f7ff ffc6 	bl	8007120 <sbrk_aligned>
 8007194:	0004      	movs	r4, r0
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d11e      	bne.n	80071d8 <_malloc_r+0x74>
 800719a:	682c      	ldr	r4, [r5, #0]
 800719c:	0025      	movs	r5, r4
 800719e:	2d00      	cmp	r5, #0
 80071a0:	d14a      	bne.n	8007238 <_malloc_r+0xd4>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	0029      	movs	r1, r5
 80071a6:	18e3      	adds	r3, r4, r3
 80071a8:	0030      	movs	r0, r6
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	f000 f880 	bl	80072b0 <_sbrk_r>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	4283      	cmp	r3, r0
 80071b4:	d143      	bne.n	800723e <_malloc_r+0xda>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	3703      	adds	r7, #3
 80071ba:	1aff      	subs	r7, r7, r3
 80071bc:	2303      	movs	r3, #3
 80071be:	439f      	bics	r7, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	2f0c      	cmp	r7, #12
 80071c4:	d200      	bcs.n	80071c8 <_malloc_r+0x64>
 80071c6:	270c      	movs	r7, #12
 80071c8:	0039      	movs	r1, r7
 80071ca:	0030      	movs	r0, r6
 80071cc:	f7ff ffa8 	bl	8007120 <sbrk_aligned>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d034      	beq.n	800723e <_malloc_r+0xda>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	19df      	adds	r7, r3, r7
 80071d8:	6027      	str	r7, [r4, #0]
 80071da:	e013      	b.n	8007204 <_malloc_r+0xa0>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dacb      	bge.n	8007178 <_malloc_r+0x14>
 80071e0:	230c      	movs	r3, #12
 80071e2:	2500      	movs	r5, #0
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	0028      	movs	r0, r5
 80071e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	1bd1      	subs	r1, r2, r7
 80071ee:	d420      	bmi.n	8007232 <_malloc_r+0xce>
 80071f0:	290b      	cmp	r1, #11
 80071f2:	d917      	bls.n	8007224 <_malloc_r+0xc0>
 80071f4:	19e2      	adds	r2, r4, r7
 80071f6:	6027      	str	r7, [r4, #0]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d111      	bne.n	8007220 <_malloc_r+0xbc>
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	6053      	str	r3, [r2, #4]
 8007204:	0030      	movs	r0, r6
 8007206:	0025      	movs	r5, r4
 8007208:	f000 f86c 	bl	80072e4 <__malloc_unlock>
 800720c:	2207      	movs	r2, #7
 800720e:	350b      	adds	r5, #11
 8007210:	1d23      	adds	r3, r4, #4
 8007212:	4395      	bics	r5, r2
 8007214:	1aea      	subs	r2, r5, r3
 8007216:	429d      	cmp	r5, r3
 8007218:	d0e5      	beq.n	80071e6 <_malloc_r+0x82>
 800721a:	1b5b      	subs	r3, r3, r5
 800721c:	50a3      	str	r3, [r4, r2]
 800721e:	e7e2      	b.n	80071e6 <_malloc_r+0x82>
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	e7ec      	b.n	80071fe <_malloc_r+0x9a>
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	42a3      	cmp	r3, r4
 8007228:	d101      	bne.n	800722e <_malloc_r+0xca>
 800722a:	602a      	str	r2, [r5, #0]
 800722c:	e7ea      	b.n	8007204 <_malloc_r+0xa0>
 800722e:	605a      	str	r2, [r3, #4]
 8007230:	e7e8      	b.n	8007204 <_malloc_r+0xa0>
 8007232:	0023      	movs	r3, r4
 8007234:	6864      	ldr	r4, [r4, #4]
 8007236:	e7a7      	b.n	8007188 <_malloc_r+0x24>
 8007238:	002c      	movs	r4, r5
 800723a:	686d      	ldr	r5, [r5, #4]
 800723c:	e7af      	b.n	800719e <_malloc_r+0x3a>
 800723e:	230c      	movs	r3, #12
 8007240:	0030      	movs	r0, r6
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f000 f84e 	bl	80072e4 <__malloc_unlock>
 8007248:	e7cd      	b.n	80071e6 <_malloc_r+0x82>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	200001b0 	.word	0x200001b0

08007250 <_realloc_r>:
 8007250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007252:	0007      	movs	r7, r0
 8007254:	000e      	movs	r6, r1
 8007256:	0014      	movs	r4, r2
 8007258:	2900      	cmp	r1, #0
 800725a:	d105      	bne.n	8007268 <_realloc_r+0x18>
 800725c:	0011      	movs	r1, r2
 800725e:	f7ff ff81 	bl	8007164 <_malloc_r>
 8007262:	0005      	movs	r5, r0
 8007264:	0028      	movs	r0, r5
 8007266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007268:	2a00      	cmp	r2, #0
 800726a:	d103      	bne.n	8007274 <_realloc_r+0x24>
 800726c:	f7ff ff0e 	bl	800708c <_free_r>
 8007270:	0025      	movs	r5, r4
 8007272:	e7f7      	b.n	8007264 <_realloc_r+0x14>
 8007274:	f000 f83e 	bl	80072f4 <_malloc_usable_size_r>
 8007278:	9001      	str	r0, [sp, #4]
 800727a:	4284      	cmp	r4, r0
 800727c:	d803      	bhi.n	8007286 <_realloc_r+0x36>
 800727e:	0035      	movs	r5, r6
 8007280:	0843      	lsrs	r3, r0, #1
 8007282:	42a3      	cmp	r3, r4
 8007284:	d3ee      	bcc.n	8007264 <_realloc_r+0x14>
 8007286:	0021      	movs	r1, r4
 8007288:	0038      	movs	r0, r7
 800728a:	f7ff ff6b 	bl	8007164 <_malloc_r>
 800728e:	1e05      	subs	r5, r0, #0
 8007290:	d0e8      	beq.n	8007264 <_realloc_r+0x14>
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	0022      	movs	r2, r4
 8007296:	429c      	cmp	r4, r3
 8007298:	d900      	bls.n	800729c <_realloc_r+0x4c>
 800729a:	001a      	movs	r2, r3
 800729c:	0031      	movs	r1, r6
 800729e:	0028      	movs	r0, r5
 80072a0:	f7ff fed7 	bl	8007052 <memcpy>
 80072a4:	0031      	movs	r1, r6
 80072a6:	0038      	movs	r0, r7
 80072a8:	f7ff fef0 	bl	800708c <_free_r>
 80072ac:	e7da      	b.n	8007264 <_realloc_r+0x14>
	...

080072b0 <_sbrk_r>:
 80072b0:	2300      	movs	r3, #0
 80072b2:	b570      	push	{r4, r5, r6, lr}
 80072b4:	4d06      	ldr	r5, [pc, #24]	; (80072d0 <_sbrk_r+0x20>)
 80072b6:	0004      	movs	r4, r0
 80072b8:	0008      	movs	r0, r1
 80072ba:	602b      	str	r3, [r5, #0]
 80072bc:	f7fb ffb6 	bl	800322c <_sbrk>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d103      	bne.n	80072cc <_sbrk_r+0x1c>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d000      	beq.n	80072cc <_sbrk_r+0x1c>
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	200001b8 	.word	0x200001b8

080072d4 <__malloc_lock>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	4802      	ldr	r0, [pc, #8]	; (80072e0 <__malloc_lock+0xc>)
 80072d8:	f000 f814 	bl	8007304 <__retarget_lock_acquire_recursive>
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	200001bc 	.word	0x200001bc

080072e4 <__malloc_unlock>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	4802      	ldr	r0, [pc, #8]	; (80072f0 <__malloc_unlock+0xc>)
 80072e8:	f000 f80d 	bl	8007306 <__retarget_lock_release_recursive>
 80072ec:	bd10      	pop	{r4, pc}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	200001bc 	.word	0x200001bc

080072f4 <_malloc_usable_size_r>:
 80072f4:	1f0b      	subs	r3, r1, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	1f18      	subs	r0, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da01      	bge.n	8007302 <_malloc_usable_size_r+0xe>
 80072fe:	580b      	ldr	r3, [r1, r0]
 8007300:	18c0      	adds	r0, r0, r3
 8007302:	4770      	bx	lr

08007304 <__retarget_lock_acquire_recursive>:
 8007304:	4770      	bx	lr

08007306 <__retarget_lock_release_recursive>:
 8007306:	4770      	bx	lr

08007308 <pow>:
 8007308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800730a:	0014      	movs	r4, r2
 800730c:	001d      	movs	r5, r3
 800730e:	9000      	str	r0, [sp, #0]
 8007310:	9101      	str	r1, [sp, #4]
 8007312:	f000 f88d 	bl	8007430 <__ieee754_pow>
 8007316:	0022      	movs	r2, r4
 8007318:	0006      	movs	r6, r0
 800731a:	000f      	movs	r7, r1
 800731c:	002b      	movs	r3, r5
 800731e:	0020      	movs	r0, r4
 8007320:	0029      	movs	r1, r5
 8007322:	f7fa ff05 	bl	8002130 <__aeabi_dcmpun>
 8007326:	2800      	cmp	r0, #0
 8007328:	d13f      	bne.n	80073aa <pow+0xa2>
 800732a:	9800      	ldr	r0, [sp, #0]
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	f7f9 f879 	bl	8000428 <__aeabi_dcmpeq>
 8007336:	2800      	cmp	r0, #0
 8007338:	d019      	beq.n	800736e <pow+0x66>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	0020      	movs	r0, r4
 8007340:	0029      	movs	r1, r5
 8007342:	f7f9 f871 	bl	8000428 <__aeabi_dcmpeq>
 8007346:	2800      	cmp	r0, #0
 8007348:	d146      	bne.n	80073d8 <pow+0xd0>
 800734a:	0020      	movs	r0, r4
 800734c:	0029      	movs	r1, r5
 800734e:	f000 fe63 	bl	8008018 <finite>
 8007352:	2800      	cmp	r0, #0
 8007354:	d029      	beq.n	80073aa <pow+0xa2>
 8007356:	2200      	movs	r2, #0
 8007358:	2300      	movs	r3, #0
 800735a:	0020      	movs	r0, r4
 800735c:	0029      	movs	r1, r5
 800735e:	f7f9 f869 	bl	8000434 <__aeabi_dcmplt>
 8007362:	2800      	cmp	r0, #0
 8007364:	d021      	beq.n	80073aa <pow+0xa2>
 8007366:	f7ff fb33 	bl	80069d0 <__errno>
 800736a:	2322      	movs	r3, #34	; 0x22
 800736c:	e01c      	b.n	80073a8 <pow+0xa0>
 800736e:	0030      	movs	r0, r6
 8007370:	0039      	movs	r1, r7
 8007372:	f000 fe51 	bl	8008018 <finite>
 8007376:	2800      	cmp	r0, #0
 8007378:	d11b      	bne.n	80073b2 <pow+0xaa>
 800737a:	9800      	ldr	r0, [sp, #0]
 800737c:	9901      	ldr	r1, [sp, #4]
 800737e:	f000 fe4b 	bl	8008018 <finite>
 8007382:	2800      	cmp	r0, #0
 8007384:	d015      	beq.n	80073b2 <pow+0xaa>
 8007386:	0020      	movs	r0, r4
 8007388:	0029      	movs	r1, r5
 800738a:	f000 fe45 	bl	8008018 <finite>
 800738e:	2800      	cmp	r0, #0
 8007390:	d00f      	beq.n	80073b2 <pow+0xaa>
 8007392:	0032      	movs	r2, r6
 8007394:	003b      	movs	r3, r7
 8007396:	0030      	movs	r0, r6
 8007398:	0039      	movs	r1, r7
 800739a:	f7fa fec9 	bl	8002130 <__aeabi_dcmpun>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0e1      	beq.n	8007366 <pow+0x5e>
 80073a2:	f7ff fb15 	bl	80069d0 <__errno>
 80073a6:	2321      	movs	r3, #33	; 0x21
 80073a8:	6003      	str	r3, [r0, #0]
 80073aa:	0030      	movs	r0, r6
 80073ac:	0039      	movs	r1, r7
 80073ae:	b003      	add	sp, #12
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	0030      	movs	r0, r6
 80073b8:	0039      	movs	r1, r7
 80073ba:	f7f9 f835 	bl	8000428 <__aeabi_dcmpeq>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d0f3      	beq.n	80073aa <pow+0xa2>
 80073c2:	9800      	ldr	r0, [sp, #0]
 80073c4:	9901      	ldr	r1, [sp, #4]
 80073c6:	f000 fe27 	bl	8008018 <finite>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0ed      	beq.n	80073aa <pow+0xa2>
 80073ce:	0020      	movs	r0, r4
 80073d0:	0029      	movs	r1, r5
 80073d2:	f000 fe21 	bl	8008018 <finite>
 80073d6:	e7c4      	b.n	8007362 <pow+0x5a>
 80073d8:	2600      	movs	r6, #0
 80073da:	4f01      	ldr	r7, [pc, #4]	; (80073e0 <pow+0xd8>)
 80073dc:	e7e5      	b.n	80073aa <pow+0xa2>
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	3ff00000 	.word	0x3ff00000

080073e4 <sqrt>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	0004      	movs	r4, r0
 80073e8:	000d      	movs	r5, r1
 80073ea:	f000 fd2b 	bl	8007e44 <__ieee754_sqrt>
 80073ee:	0022      	movs	r2, r4
 80073f0:	0006      	movs	r6, r0
 80073f2:	000f      	movs	r7, r1
 80073f4:	002b      	movs	r3, r5
 80073f6:	0020      	movs	r0, r4
 80073f8:	0029      	movs	r1, r5
 80073fa:	f7fa fe99 	bl	8002130 <__aeabi_dcmpun>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d113      	bne.n	800742a <sqrt+0x46>
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	0020      	movs	r0, r4
 8007408:	0029      	movs	r1, r5
 800740a:	f7f9 f813 	bl	8000434 <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d00b      	beq.n	800742a <sqrt+0x46>
 8007412:	f7ff fadd 	bl	80069d0 <__errno>
 8007416:	2321      	movs	r3, #33	; 0x21
 8007418:	2200      	movs	r2, #0
 800741a:	6003      	str	r3, [r0, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	0010      	movs	r0, r2
 8007420:	0019      	movs	r1, r3
 8007422:	f7f9 fc85 	bl	8000d30 <__aeabi_ddiv>
 8007426:	0006      	movs	r6, r0
 8007428:	000f      	movs	r7, r1
 800742a:	0030      	movs	r0, r6
 800742c:	0039      	movs	r1, r7
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007430 <__ieee754_pow>:
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	b095      	sub	sp, #84	; 0x54
 8007434:	9202      	str	r2, [sp, #8]
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	9a03      	ldr	r2, [sp, #12]
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	0056      	lsls	r6, r2, #1
 8007442:	001a      	movs	r2, r3
 8007444:	0876      	lsrs	r6, r6, #1
 8007446:	0007      	movs	r7, r0
 8007448:	000d      	movs	r5, r1
 800744a:	4332      	orrs	r2, r6
 800744c:	d119      	bne.n	8007482 <__ieee754_pow+0x52>
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	0309      	lsls	r1, r1, #12
 8007452:	4069      	eors	r1, r5
 8007454:	0002      	movs	r2, r0
 8007456:	000b      	movs	r3, r1
 8007458:	1892      	adds	r2, r2, r2
 800745a:	415b      	adcs	r3, r3
 800745c:	4989      	ldr	r1, [pc, #548]	; (8007684 <__ieee754_pow+0x254>)
 800745e:	428b      	cmp	r3, r1
 8007460:	d806      	bhi.n	8007470 <__ieee754_pow+0x40>
 8007462:	d001      	beq.n	8007468 <__ieee754_pow+0x38>
 8007464:	f000 fcb6 	bl	8007dd4 <__ieee754_pow+0x9a4>
 8007468:	2a00      	cmp	r2, #0
 800746a:	d101      	bne.n	8007470 <__ieee754_pow+0x40>
 800746c:	f000 fcb2 	bl	8007dd4 <__ieee754_pow+0x9a4>
 8007470:	9a02      	ldr	r2, [sp, #8]
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	0038      	movs	r0, r7
 8007476:	0029      	movs	r1, r5
 8007478:	f7f9 f91e 	bl	80006b8 <__aeabi_dadd>
 800747c:	9000      	str	r0, [sp, #0]
 800747e:	9101      	str	r1, [sp, #4]
 8007480:	e0ad      	b.n	80075de <__ieee754_pow+0x1ae>
 8007482:	4a81      	ldr	r2, [pc, #516]	; (8007688 <__ieee754_pow+0x258>)
 8007484:	004c      	lsls	r4, r1, #1
 8007486:	9108      	str	r1, [sp, #32]
 8007488:	9000      	str	r0, [sp, #0]
 800748a:	0864      	lsrs	r4, r4, #1
 800748c:	4294      	cmp	r4, r2
 800748e:	dc08      	bgt.n	80074a2 <__ieee754_pow+0x72>
 8007490:	d101      	bne.n	8007496 <__ieee754_pow+0x66>
 8007492:	2800      	cmp	r0, #0
 8007494:	d1ec      	bne.n	8007470 <__ieee754_pow+0x40>
 8007496:	4a7c      	ldr	r2, [pc, #496]	; (8007688 <__ieee754_pow+0x258>)
 8007498:	4296      	cmp	r6, r2
 800749a:	dc02      	bgt.n	80074a2 <__ieee754_pow+0x72>
 800749c:	d10c      	bne.n	80074b8 <__ieee754_pow+0x88>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <__ieee754_pow+0x88>
 80074a2:	4b7a      	ldr	r3, [pc, #488]	; (800768c <__ieee754_pow+0x25c>)
 80074a4:	18eb      	adds	r3, r5, r3
 80074a6:	433b      	orrs	r3, r7
 80074a8:	d1e2      	bne.n	8007470 <__ieee754_pow+0x40>
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	9803      	ldr	r0, [sp, #12]
 80074ae:	0309      	lsls	r1, r1, #12
 80074b0:	4048      	eors	r0, r1
 80074b2:	0003      	movs	r3, r0
 80074b4:	9a02      	ldr	r2, [sp, #8]
 80074b6:	e7cf      	b.n	8007458 <__ieee754_pow+0x28>
 80074b8:	2200      	movs	r2, #0
 80074ba:	9206      	str	r2, [sp, #24]
 80074bc:	2d00      	cmp	r5, #0
 80074be:	da69      	bge.n	8007594 <__ieee754_pow+0x164>
 80074c0:	4a73      	ldr	r2, [pc, #460]	; (8007690 <__ieee754_pow+0x260>)
 80074c2:	4296      	cmp	r6, r2
 80074c4:	dc64      	bgt.n	8007590 <__ieee754_pow+0x160>
 80074c6:	4a73      	ldr	r2, [pc, #460]	; (8007694 <__ieee754_pow+0x264>)
 80074c8:	4296      	cmp	r6, r2
 80074ca:	dd11      	ble.n	80074f0 <__ieee754_pow+0xc0>
 80074cc:	4972      	ldr	r1, [pc, #456]	; (8007698 <__ieee754_pow+0x268>)
 80074ce:	1532      	asrs	r2, r6, #20
 80074d0:	1852      	adds	r2, r2, r1
 80074d2:	2a14      	cmp	r2, #20
 80074d4:	dd3c      	ble.n	8007550 <__ieee754_pow+0x120>
 80074d6:	2134      	movs	r1, #52	; 0x34
 80074d8:	1a8a      	subs	r2, r1, r2
 80074da:	9902      	ldr	r1, [sp, #8]
 80074dc:	40d1      	lsrs	r1, r2
 80074de:	0008      	movs	r0, r1
 80074e0:	4090      	lsls	r0, r2
 80074e2:	4298      	cmp	r0, r3
 80074e4:	d104      	bne.n	80074f0 <__ieee754_pow+0xc0>
 80074e6:	2201      	movs	r2, #1
 80074e8:	4011      	ands	r1, r2
 80074ea:	1892      	adds	r2, r2, r2
 80074ec:	1a52      	subs	r2, r2, r1
 80074ee:	9206      	str	r2, [sp, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d03c      	beq.n	800756e <__ieee754_pow+0x13e>
 80074f4:	0038      	movs	r0, r7
 80074f6:	0029      	movs	r1, r5
 80074f8:	f000 fd8b 	bl	8008012 <fabs>
 80074fc:	9000      	str	r0, [sp, #0]
 80074fe:	9101      	str	r1, [sp, #4]
 8007500:	2f00      	cmp	r7, #0
 8007502:	d000      	beq.n	8007506 <__ieee754_pow+0xd6>
 8007504:	e094      	b.n	8007630 <__ieee754_pow+0x200>
 8007506:	2c00      	cmp	r4, #0
 8007508:	d005      	beq.n	8007516 <__ieee754_pow+0xe6>
 800750a:	4a64      	ldr	r2, [pc, #400]	; (800769c <__ieee754_pow+0x26c>)
 800750c:	00ab      	lsls	r3, r5, #2
 800750e:	089b      	lsrs	r3, r3, #2
 8007510:	4293      	cmp	r3, r2
 8007512:	d000      	beq.n	8007516 <__ieee754_pow+0xe6>
 8007514:	e08c      	b.n	8007630 <__ieee754_pow+0x200>
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da07      	bge.n	800752c <__ieee754_pow+0xfc>
 800751c:	9a00      	ldr	r2, [sp, #0]
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	2000      	movs	r0, #0
 8007522:	495e      	ldr	r1, [pc, #376]	; (800769c <__ieee754_pow+0x26c>)
 8007524:	f7f9 fc04 	bl	8000d30 <__aeabi_ddiv>
 8007528:	9000      	str	r0, [sp, #0]
 800752a:	9101      	str	r1, [sp, #4]
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da55      	bge.n	80075de <__ieee754_pow+0x1ae>
 8007532:	4b56      	ldr	r3, [pc, #344]	; (800768c <__ieee754_pow+0x25c>)
 8007534:	18e4      	adds	r4, r4, r3
 8007536:	9b06      	ldr	r3, [sp, #24]
 8007538:	431c      	orrs	r4, r3
 800753a:	d000      	beq.n	800753e <__ieee754_pow+0x10e>
 800753c:	e06c      	b.n	8007618 <__ieee754_pow+0x1e8>
 800753e:	9a00      	ldr	r2, [sp, #0]
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	0010      	movs	r0, r2
 8007544:	0019      	movs	r1, r3
 8007546:	f7fa fa61 	bl	8001a0c <__aeabi_dsub>
 800754a:	0002      	movs	r2, r0
 800754c:	000b      	movs	r3, r1
 800754e:	e01c      	b.n	800758a <__ieee754_pow+0x15a>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1cf      	bne.n	80074f4 <__ieee754_pow+0xc4>
 8007554:	3314      	adds	r3, #20
 8007556:	1a9a      	subs	r2, r3, r2
 8007558:	0033      	movs	r3, r6
 800755a:	4113      	asrs	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	4091      	lsls	r1, r2
 8007560:	42b1      	cmp	r1, r6
 8007562:	d104      	bne.n	800756e <__ieee754_pow+0x13e>
 8007564:	2201      	movs	r2, #1
 8007566:	4013      	ands	r3, r2
 8007568:	1892      	adds	r2, r2, r2
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	4b4b      	ldr	r3, [pc, #300]	; (800769c <__ieee754_pow+0x26c>)
 8007570:	429e      	cmp	r6, r3
 8007572:	d138      	bne.n	80075e6 <__ieee754_pow+0x1b6>
 8007574:	0038      	movs	r0, r7
 8007576:	0029      	movs	r1, r5
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	9000      	str	r0, [sp, #0]
 800757c:	9101      	str	r1, [sp, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	da2d      	bge.n	80075de <__ieee754_pow+0x1ae>
 8007582:	003a      	movs	r2, r7
 8007584:	002b      	movs	r3, r5
 8007586:	2000      	movs	r0, #0
 8007588:	4944      	ldr	r1, [pc, #272]	; (800769c <__ieee754_pow+0x26c>)
 800758a:	f7f9 fbd1 	bl	8000d30 <__aeabi_ddiv>
 800758e:	e775      	b.n	800747c <__ieee754_pow+0x4c>
 8007590:	2202      	movs	r2, #2
 8007592:	9206      	str	r2, [sp, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1ad      	bne.n	80074f4 <__ieee754_pow+0xc4>
 8007598:	4b3b      	ldr	r3, [pc, #236]	; (8007688 <__ieee754_pow+0x258>)
 800759a:	429e      	cmp	r6, r3
 800759c:	d1e7      	bne.n	800756e <__ieee754_pow+0x13e>
 800759e:	4b3b      	ldr	r3, [pc, #236]	; (800768c <__ieee754_pow+0x25c>)
 80075a0:	18e3      	adds	r3, r4, r3
 80075a2:	431f      	orrs	r7, r3
 80075a4:	d101      	bne.n	80075aa <__ieee754_pow+0x17a>
 80075a6:	f000 fc15 	bl	8007dd4 <__ieee754_pow+0x9a4>
 80075aa:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <__ieee754_pow+0x264>)
 80075ac:	429c      	cmp	r4, r3
 80075ae:	dd09      	ble.n	80075c4 <__ieee754_pow+0x194>
 80075b0:	9b04      	ldr	r3, [sp, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da01      	bge.n	80075ba <__ieee754_pow+0x18a>
 80075b6:	f000 fc11 	bl	8007ddc <__ieee754_pow+0x9ac>
 80075ba:	9b02      	ldr	r3, [sp, #8]
 80075bc:	9c03      	ldr	r4, [sp, #12]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	9401      	str	r4, [sp, #4]
 80075c2:	e00c      	b.n	80075de <__ieee754_pow+0x1ae>
 80075c4:	9b04      	ldr	r3, [sp, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db01      	blt.n	80075ce <__ieee754_pow+0x19e>
 80075ca:	f000 fc07 	bl	8007ddc <__ieee754_pow+0x9ac>
 80075ce:	2280      	movs	r2, #128	; 0x80
 80075d0:	0612      	lsls	r2, r2, #24
 80075d2:	4694      	mov	ip, r2
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	4463      	add	r3, ip
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	9800      	ldr	r0, [sp, #0]
 80075e0:	9901      	ldr	r1, [sp, #4]
 80075e2:	b015      	add	sp, #84	; 0x54
 80075e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	05db      	lsls	r3, r3, #23
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d106      	bne.n	80075fe <__ieee754_pow+0x1ce>
 80075f0:	003a      	movs	r2, r7
 80075f2:	002b      	movs	r3, r5
 80075f4:	0038      	movs	r0, r7
 80075f6:	0029      	movs	r1, r5
 80075f8:	f7f9 ff9c 	bl	8001534 <__aeabi_dmul>
 80075fc:	e73e      	b.n	800747c <__ieee754_pow+0x4c>
 80075fe:	4b28      	ldr	r3, [pc, #160]	; (80076a0 <__ieee754_pow+0x270>)
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d000      	beq.n	8007608 <__ieee754_pow+0x1d8>
 8007606:	e775      	b.n	80074f4 <__ieee754_pow+0xc4>
 8007608:	2d00      	cmp	r5, #0
 800760a:	da00      	bge.n	800760e <__ieee754_pow+0x1de>
 800760c:	e772      	b.n	80074f4 <__ieee754_pow+0xc4>
 800760e:	0038      	movs	r0, r7
 8007610:	0029      	movs	r1, r5
 8007612:	f000 fc17 	bl	8007e44 <__ieee754_sqrt>
 8007616:	e731      	b.n	800747c <__ieee754_pow+0x4c>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d1df      	bne.n	80075de <__ieee754_pow+0x1ae>
 800761e:	9800      	ldr	r0, [sp, #0]
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	0002      	movs	r2, r0
 8007624:	9801      	ldr	r0, [sp, #4]
 8007626:	0609      	lsls	r1, r1, #24
 8007628:	1843      	adds	r3, r0, r1
 800762a:	9200      	str	r2, [sp, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	e7d6      	b.n	80075de <__ieee754_pow+0x1ae>
 8007630:	0feb      	lsrs	r3, r5, #31
 8007632:	3b01      	subs	r3, #1
 8007634:	930e      	str	r3, [sp, #56]	; 0x38
 8007636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	4313      	orrs	r3, r2
 800763c:	d104      	bne.n	8007648 <__ieee754_pow+0x218>
 800763e:	003a      	movs	r2, r7
 8007640:	002b      	movs	r3, r5
 8007642:	0038      	movs	r0, r7
 8007644:	0029      	movs	r1, r5
 8007646:	e77e      	b.n	8007546 <__ieee754_pow+0x116>
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <__ieee754_pow+0x274>)
 800764a:	429e      	cmp	r6, r3
 800764c:	dc00      	bgt.n	8007650 <__ieee754_pow+0x220>
 800764e:	e0ef      	b.n	8007830 <__ieee754_pow+0x400>
 8007650:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <__ieee754_pow+0x278>)
 8007652:	429e      	cmp	r6, r3
 8007654:	dd09      	ble.n	800766a <__ieee754_pow+0x23a>
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <__ieee754_pow+0x264>)
 8007658:	429c      	cmp	r4, r3
 800765a:	dc0c      	bgt.n	8007676 <__ieee754_pow+0x246>
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da0c      	bge.n	800767c <__ieee754_pow+0x24c>
 8007662:	2000      	movs	r0, #0
 8007664:	f000 fcce 	bl	8008004 <__math_oflow>
 8007668:	e708      	b.n	800747c <__ieee754_pow+0x4c>
 800766a:	4b10      	ldr	r3, [pc, #64]	; (80076ac <__ieee754_pow+0x27c>)
 800766c:	429c      	cmp	r4, r3
 800766e:	ddf5      	ble.n	800765c <__ieee754_pow+0x22c>
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <__ieee754_pow+0x26c>)
 8007672:	429c      	cmp	r4, r3
 8007674:	dd1c      	ble.n	80076b0 <__ieee754_pow+0x280>
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	dcf2      	bgt.n	8007662 <__ieee754_pow+0x232>
 800767c:	2000      	movs	r0, #0
 800767e:	f000 fcba 	bl	8007ff6 <__math_uflow>
 8007682:	e6fb      	b.n	800747c <__ieee754_pow+0x4c>
 8007684:	fff00000 	.word	0xfff00000
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	c0100000 	.word	0xc0100000
 8007690:	433fffff 	.word	0x433fffff
 8007694:	3fefffff 	.word	0x3fefffff
 8007698:	fffffc01 	.word	0xfffffc01
 800769c:	3ff00000 	.word	0x3ff00000
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	41e00000 	.word	0x41e00000
 80076a8:	43f00000 	.word	0x43f00000
 80076ac:	3feffffe 	.word	0x3feffffe
 80076b0:	2200      	movs	r2, #0
 80076b2:	9800      	ldr	r0, [sp, #0]
 80076b4:	9901      	ldr	r1, [sp, #4]
 80076b6:	4b52      	ldr	r3, [pc, #328]	; (8007800 <__ieee754_pow+0x3d0>)
 80076b8:	f7fa f9a8 	bl	8001a0c <__aeabi_dsub>
 80076bc:	22c0      	movs	r2, #192	; 0xc0
 80076be:	4b51      	ldr	r3, [pc, #324]	; (8007804 <__ieee754_pow+0x3d4>)
 80076c0:	05d2      	lsls	r2, r2, #23
 80076c2:	0004      	movs	r4, r0
 80076c4:	000d      	movs	r5, r1
 80076c6:	f7f9 ff35 	bl	8001534 <__aeabi_dmul>
 80076ca:	4a4f      	ldr	r2, [pc, #316]	; (8007808 <__ieee754_pow+0x3d8>)
 80076cc:	9000      	str	r0, [sp, #0]
 80076ce:	9101      	str	r1, [sp, #4]
 80076d0:	4b4e      	ldr	r3, [pc, #312]	; (800780c <__ieee754_pow+0x3dc>)
 80076d2:	0020      	movs	r0, r4
 80076d4:	0029      	movs	r1, r5
 80076d6:	f7f9 ff2d 	bl	8001534 <__aeabi_dmul>
 80076da:	2200      	movs	r2, #0
 80076dc:	9004      	str	r0, [sp, #16]
 80076de:	9105      	str	r1, [sp, #20]
 80076e0:	4b4b      	ldr	r3, [pc, #300]	; (8007810 <__ieee754_pow+0x3e0>)
 80076e2:	0020      	movs	r0, r4
 80076e4:	0029      	movs	r1, r5
 80076e6:	f7f9 ff25 	bl	8001534 <__aeabi_dmul>
 80076ea:	0002      	movs	r2, r0
 80076ec:	000b      	movs	r3, r1
 80076ee:	4849      	ldr	r0, [pc, #292]	; (8007814 <__ieee754_pow+0x3e4>)
 80076f0:	4949      	ldr	r1, [pc, #292]	; (8007818 <__ieee754_pow+0x3e8>)
 80076f2:	f7fa f98b 	bl	8001a0c <__aeabi_dsub>
 80076f6:	0022      	movs	r2, r4
 80076f8:	002b      	movs	r3, r5
 80076fa:	f7f9 ff1b 	bl	8001534 <__aeabi_dmul>
 80076fe:	0002      	movs	r2, r0
 8007700:	000b      	movs	r3, r1
 8007702:	2000      	movs	r0, #0
 8007704:	4945      	ldr	r1, [pc, #276]	; (800781c <__ieee754_pow+0x3ec>)
 8007706:	f7fa f981 	bl	8001a0c <__aeabi_dsub>
 800770a:	0022      	movs	r2, r4
 800770c:	0006      	movs	r6, r0
 800770e:	000f      	movs	r7, r1
 8007710:	002b      	movs	r3, r5
 8007712:	0020      	movs	r0, r4
 8007714:	0029      	movs	r1, r5
 8007716:	f7f9 ff0d 	bl	8001534 <__aeabi_dmul>
 800771a:	0002      	movs	r2, r0
 800771c:	000b      	movs	r3, r1
 800771e:	0030      	movs	r0, r6
 8007720:	0039      	movs	r1, r7
 8007722:	f7f9 ff07 	bl	8001534 <__aeabi_dmul>
 8007726:	4a3e      	ldr	r2, [pc, #248]	; (8007820 <__ieee754_pow+0x3f0>)
 8007728:	4b36      	ldr	r3, [pc, #216]	; (8007804 <__ieee754_pow+0x3d4>)
 800772a:	f7f9 ff03 	bl	8001534 <__aeabi_dmul>
 800772e:	0002      	movs	r2, r0
 8007730:	000b      	movs	r3, r1
 8007732:	9804      	ldr	r0, [sp, #16]
 8007734:	9905      	ldr	r1, [sp, #20]
 8007736:	f7fa f969 	bl	8001a0c <__aeabi_dsub>
 800773a:	0002      	movs	r2, r0
 800773c:	000b      	movs	r3, r1
 800773e:	0004      	movs	r4, r0
 8007740:	000d      	movs	r5, r1
 8007742:	9800      	ldr	r0, [sp, #0]
 8007744:	9901      	ldr	r1, [sp, #4]
 8007746:	f7f8 ffb7 	bl	80006b8 <__aeabi_dadd>
 800774a:	9a00      	ldr	r2, [sp, #0]
 800774c:	9b01      	ldr	r3, [sp, #4]
 800774e:	2000      	movs	r0, #0
 8007750:	000f      	movs	r7, r1
 8007752:	0006      	movs	r6, r0
 8007754:	f7fa f95a 	bl	8001a0c <__aeabi_dsub>
 8007758:	0002      	movs	r2, r0
 800775a:	000b      	movs	r3, r1
 800775c:	0020      	movs	r0, r4
 800775e:	0029      	movs	r1, r5
 8007760:	f7fa f954 	bl	8001a0c <__aeabi_dsub>
 8007764:	9b06      	ldr	r3, [sp, #24]
 8007766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007768:	3b01      	subs	r3, #1
 800776a:	9004      	str	r0, [sp, #16]
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	d000      	beq.n	8007774 <__ieee754_pow+0x344>
 8007772:	e1db      	b.n	8007b2c <__ieee754_pow+0x6fc>
 8007774:	2300      	movs	r3, #0
 8007776:	4c2b      	ldr	r4, [pc, #172]	; (8007824 <__ieee754_pow+0x3f4>)
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	9401      	str	r4, [sp, #4]
 800777c:	9c02      	ldr	r4, [sp, #8]
 800777e:	9d03      	ldr	r5, [sp, #12]
 8007780:	9802      	ldr	r0, [sp, #8]
 8007782:	9903      	ldr	r1, [sp, #12]
 8007784:	2400      	movs	r4, #0
 8007786:	002b      	movs	r3, r5
 8007788:	0022      	movs	r2, r4
 800778a:	f7fa f93f 	bl	8001a0c <__aeabi_dsub>
 800778e:	0032      	movs	r2, r6
 8007790:	003b      	movs	r3, r7
 8007792:	f7f9 fecf 	bl	8001534 <__aeabi_dmul>
 8007796:	9a02      	ldr	r2, [sp, #8]
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	9006      	str	r0, [sp, #24]
 800779c:	9107      	str	r1, [sp, #28]
 800779e:	9804      	ldr	r0, [sp, #16]
 80077a0:	9905      	ldr	r1, [sp, #20]
 80077a2:	f7f9 fec7 	bl	8001534 <__aeabi_dmul>
 80077a6:	0002      	movs	r2, r0
 80077a8:	000b      	movs	r3, r1
 80077aa:	9806      	ldr	r0, [sp, #24]
 80077ac:	9907      	ldr	r1, [sp, #28]
 80077ae:	f7f8 ff83 	bl	80006b8 <__aeabi_dadd>
 80077b2:	0022      	movs	r2, r4
 80077b4:	002b      	movs	r3, r5
 80077b6:	9004      	str	r0, [sp, #16]
 80077b8:	9105      	str	r1, [sp, #20]
 80077ba:	0030      	movs	r0, r6
 80077bc:	0039      	movs	r1, r7
 80077be:	f7f9 feb9 	bl	8001534 <__aeabi_dmul>
 80077c2:	0006      	movs	r6, r0
 80077c4:	000f      	movs	r7, r1
 80077c6:	000b      	movs	r3, r1
 80077c8:	0002      	movs	r2, r0
 80077ca:	9804      	ldr	r0, [sp, #16]
 80077cc:	9905      	ldr	r1, [sp, #20]
 80077ce:	9606      	str	r6, [sp, #24]
 80077d0:	9707      	str	r7, [sp, #28]
 80077d2:	f7f8 ff71 	bl	80006b8 <__aeabi_dadd>
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <__ieee754_pow+0x3f8>)
 80077d8:	0005      	movs	r5, r0
 80077da:	000c      	movs	r4, r1
 80077dc:	9108      	str	r1, [sp, #32]
 80077de:	4299      	cmp	r1, r3
 80077e0:	dc00      	bgt.n	80077e4 <__ieee754_pow+0x3b4>
 80077e2:	e2d6      	b.n	8007d92 <__ieee754_pow+0x962>
 80077e4:	4b11      	ldr	r3, [pc, #68]	; (800782c <__ieee754_pow+0x3fc>)
 80077e6:	18cb      	adds	r3, r1, r3
 80077e8:	4303      	orrs	r3, r0
 80077ea:	d100      	bne.n	80077ee <__ieee754_pow+0x3be>
 80077ec:	e1d8      	b.n	8007ba0 <__ieee754_pow+0x770>
 80077ee:	9800      	ldr	r0, [sp, #0]
 80077f0:	9901      	ldr	r1, [sp, #4]
 80077f2:	2300      	movs	r3, #0
 80077f4:	2200      	movs	r2, #0
 80077f6:	f7f8 fe1d 	bl	8000434 <__aeabi_dcmplt>
 80077fa:	1e43      	subs	r3, r0, #1
 80077fc:	4198      	sbcs	r0, r3
 80077fe:	e731      	b.n	8007664 <__ieee754_pow+0x234>
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	3ff71547 	.word	0x3ff71547
 8007808:	f85ddf44 	.word	0xf85ddf44
 800780c:	3e54ae0b 	.word	0x3e54ae0b
 8007810:	3fd00000 	.word	0x3fd00000
 8007814:	55555555 	.word	0x55555555
 8007818:	3fd55555 	.word	0x3fd55555
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	652b82fe 	.word	0x652b82fe
 8007824:	bff00000 	.word	0xbff00000
 8007828:	408fffff 	.word	0x408fffff
 800782c:	bf700000 	.word	0xbf700000
 8007830:	4bc0      	ldr	r3, [pc, #768]	; (8007b34 <__ieee754_pow+0x704>)
 8007832:	2200      	movs	r2, #0
 8007834:	422b      	tst	r3, r5
 8007836:	d10a      	bne.n	800784e <__ieee754_pow+0x41e>
 8007838:	9800      	ldr	r0, [sp, #0]
 800783a:	9901      	ldr	r1, [sp, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	4bbe      	ldr	r3, [pc, #760]	; (8007b38 <__ieee754_pow+0x708>)
 8007840:	f7f9 fe78 	bl	8001534 <__aeabi_dmul>
 8007844:	2235      	movs	r2, #53	; 0x35
 8007846:	9000      	str	r0, [sp, #0]
 8007848:	9101      	str	r1, [sp, #4]
 800784a:	9c01      	ldr	r4, [sp, #4]
 800784c:	4252      	negs	r2, r2
 800784e:	49bb      	ldr	r1, [pc, #748]	; (8007b3c <__ieee754_pow+0x70c>)
 8007850:	1523      	asrs	r3, r4, #20
 8007852:	185b      	adds	r3, r3, r1
 8007854:	189b      	adds	r3, r3, r2
 8007856:	0324      	lsls	r4, r4, #12
 8007858:	4db9      	ldr	r5, [pc, #740]	; (8007b40 <__ieee754_pow+0x710>)
 800785a:	930d      	str	r3, [sp, #52]	; 0x34
 800785c:	4bb9      	ldr	r3, [pc, #740]	; (8007b44 <__ieee754_pow+0x714>)
 800785e:	0b22      	lsrs	r2, r4, #12
 8007860:	4315      	orrs	r5, r2
 8007862:	2400      	movs	r4, #0
 8007864:	429a      	cmp	r2, r3
 8007866:	dd09      	ble.n	800787c <__ieee754_pow+0x44c>
 8007868:	4bb7      	ldr	r3, [pc, #732]	; (8007b48 <__ieee754_pow+0x718>)
 800786a:	3401      	adds	r4, #1
 800786c:	429a      	cmp	r2, r3
 800786e:	dd05      	ble.n	800787c <__ieee754_pow+0x44c>
 8007870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007872:	191b      	adds	r3, r3, r4
 8007874:	2400      	movs	r4, #0
 8007876:	930d      	str	r3, [sp, #52]	; 0x34
 8007878:	4bb4      	ldr	r3, [pc, #720]	; (8007b4c <__ieee754_pow+0x71c>)
 800787a:	18ed      	adds	r5, r5, r3
 800787c:	00e3      	lsls	r3, r4, #3
 800787e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007880:	4bb3      	ldr	r3, [pc, #716]	; (8007b50 <__ieee754_pow+0x720>)
 8007882:	00e2      	lsls	r2, r4, #3
 8007884:	189b      	adds	r3, r3, r2
 8007886:	9800      	ldr	r0, [sp, #0]
 8007888:	9901      	ldr	r1, [sp, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	0029      	movs	r1, r5
 8007890:	0006      	movs	r6, r0
 8007892:	920a      	str	r2, [sp, #40]	; 0x28
 8007894:	930b      	str	r3, [sp, #44]	; 0x2c
 8007896:	f7fa f8b9 	bl	8001a0c <__aeabi_dsub>
 800789a:	0032      	movs	r2, r6
 800789c:	002b      	movs	r3, r5
 800789e:	9010      	str	r0, [sp, #64]	; 0x40
 80078a0:	9111      	str	r1, [sp, #68]	; 0x44
 80078a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078a6:	f7f8 ff07 	bl	80006b8 <__aeabi_dadd>
 80078aa:	0002      	movs	r2, r0
 80078ac:	000b      	movs	r3, r1
 80078ae:	2000      	movs	r0, #0
 80078b0:	49a3      	ldr	r1, [pc, #652]	; (8007b40 <__ieee754_pow+0x710>)
 80078b2:	f7f9 fa3d 	bl	8000d30 <__aeabi_ddiv>
 80078b6:	0002      	movs	r2, r0
 80078b8:	000b      	movs	r3, r1
 80078ba:	9012      	str	r0, [sp, #72]	; 0x48
 80078bc:	9113      	str	r1, [sp, #76]	; 0x4c
 80078be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078c2:	f7f9 fe37 	bl	8001534 <__aeabi_dmul>
 80078c6:	9008      	str	r0, [sp, #32]
 80078c8:	9109      	str	r1, [sp, #36]	; 0x24
 80078ca:	9a08      	ldr	r2, [sp, #32]
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	9204      	str	r2, [sp, #16]
 80078d2:	9305      	str	r3, [sp, #20]
 80078d4:	2300      	movs	r3, #0
 80078d6:	002f      	movs	r7, r5
 80078d8:	0589      	lsls	r1, r1, #22
 80078da:	106d      	asrs	r5, r5, #1
 80078dc:	430d      	orrs	r5, r1
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	9a04      	ldr	r2, [sp, #16]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	9200      	str	r2, [sp, #0]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	0309      	lsls	r1, r1, #12
 80078ee:	186d      	adds	r5, r5, r1
 80078f0:	04a1      	lsls	r1, r4, #18
 80078f2:	186b      	adds	r3, r5, r1
 80078f4:	9800      	ldr	r0, [sp, #0]
 80078f6:	9901      	ldr	r1, [sp, #4]
 80078f8:	0014      	movs	r4, r2
 80078fa:	001d      	movs	r5, r3
 80078fc:	f7f9 fe1a 	bl	8001534 <__aeabi_dmul>
 8007900:	0002      	movs	r2, r0
 8007902:	000b      	movs	r3, r1
 8007904:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007906:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007908:	f7fa f880 	bl	8001a0c <__aeabi_dsub>
 800790c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	9010      	str	r0, [sp, #64]	; 0x40
 8007912:	9111      	str	r1, [sp, #68]	; 0x44
 8007914:	0020      	movs	r0, r4
 8007916:	0029      	movs	r1, r5
 8007918:	f7fa f878 	bl	8001a0c <__aeabi_dsub>
 800791c:	0002      	movs	r2, r0
 800791e:	000b      	movs	r3, r1
 8007920:	0030      	movs	r0, r6
 8007922:	0039      	movs	r1, r7
 8007924:	f7fa f872 	bl	8001a0c <__aeabi_dsub>
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	f7f9 fe02 	bl	8001534 <__aeabi_dmul>
 8007930:	0002      	movs	r2, r0
 8007932:	000b      	movs	r3, r1
 8007934:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007936:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007938:	f7fa f868 	bl	8001a0c <__aeabi_dsub>
 800793c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800793e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007940:	f7f9 fdf8 	bl	8001534 <__aeabi_dmul>
 8007944:	9a08      	ldr	r2, [sp, #32]
 8007946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007948:	900a      	str	r0, [sp, #40]	; 0x28
 800794a:	910b      	str	r1, [sp, #44]	; 0x2c
 800794c:	0010      	movs	r0, r2
 800794e:	0019      	movs	r1, r3
 8007950:	f7f9 fdf0 	bl	8001534 <__aeabi_dmul>
 8007954:	0006      	movs	r6, r0
 8007956:	000f      	movs	r7, r1
 8007958:	4a7e      	ldr	r2, [pc, #504]	; (8007b54 <__ieee754_pow+0x724>)
 800795a:	4b7f      	ldr	r3, [pc, #508]	; (8007b58 <__ieee754_pow+0x728>)
 800795c:	f7f9 fdea 	bl	8001534 <__aeabi_dmul>
 8007960:	4a7e      	ldr	r2, [pc, #504]	; (8007b5c <__ieee754_pow+0x72c>)
 8007962:	4b7f      	ldr	r3, [pc, #508]	; (8007b60 <__ieee754_pow+0x730>)
 8007964:	f7f8 fea8 	bl	80006b8 <__aeabi_dadd>
 8007968:	0032      	movs	r2, r6
 800796a:	003b      	movs	r3, r7
 800796c:	f7f9 fde2 	bl	8001534 <__aeabi_dmul>
 8007970:	4a7c      	ldr	r2, [pc, #496]	; (8007b64 <__ieee754_pow+0x734>)
 8007972:	4b7d      	ldr	r3, [pc, #500]	; (8007b68 <__ieee754_pow+0x738>)
 8007974:	f7f8 fea0 	bl	80006b8 <__aeabi_dadd>
 8007978:	0032      	movs	r2, r6
 800797a:	003b      	movs	r3, r7
 800797c:	f7f9 fdda 	bl	8001534 <__aeabi_dmul>
 8007980:	4a7a      	ldr	r2, [pc, #488]	; (8007b6c <__ieee754_pow+0x73c>)
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <__ieee754_pow+0x740>)
 8007984:	f7f8 fe98 	bl	80006b8 <__aeabi_dadd>
 8007988:	0032      	movs	r2, r6
 800798a:	003b      	movs	r3, r7
 800798c:	f7f9 fdd2 	bl	8001534 <__aeabi_dmul>
 8007990:	4a78      	ldr	r2, [pc, #480]	; (8007b74 <__ieee754_pow+0x744>)
 8007992:	4b79      	ldr	r3, [pc, #484]	; (8007b78 <__ieee754_pow+0x748>)
 8007994:	f7f8 fe90 	bl	80006b8 <__aeabi_dadd>
 8007998:	0032      	movs	r2, r6
 800799a:	003b      	movs	r3, r7
 800799c:	f7f9 fdca 	bl	8001534 <__aeabi_dmul>
 80079a0:	4a76      	ldr	r2, [pc, #472]	; (8007b7c <__ieee754_pow+0x74c>)
 80079a2:	4b77      	ldr	r3, [pc, #476]	; (8007b80 <__ieee754_pow+0x750>)
 80079a4:	f7f8 fe88 	bl	80006b8 <__aeabi_dadd>
 80079a8:	0032      	movs	r2, r6
 80079aa:	0004      	movs	r4, r0
 80079ac:	000d      	movs	r5, r1
 80079ae:	003b      	movs	r3, r7
 80079b0:	0030      	movs	r0, r6
 80079b2:	0039      	movs	r1, r7
 80079b4:	f7f9 fdbe 	bl	8001534 <__aeabi_dmul>
 80079b8:	0002      	movs	r2, r0
 80079ba:	000b      	movs	r3, r1
 80079bc:	0020      	movs	r0, r4
 80079be:	0029      	movs	r1, r5
 80079c0:	f7f9 fdb8 	bl	8001534 <__aeabi_dmul>
 80079c4:	9a00      	ldr	r2, [sp, #0]
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	0004      	movs	r4, r0
 80079ca:	000d      	movs	r5, r1
 80079cc:	9808      	ldr	r0, [sp, #32]
 80079ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d0:	f7f8 fe72 	bl	80006b8 <__aeabi_dadd>
 80079d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d8:	f7f9 fdac 	bl	8001534 <__aeabi_dmul>
 80079dc:	0022      	movs	r2, r4
 80079de:	002b      	movs	r3, r5
 80079e0:	f7f8 fe6a 	bl	80006b8 <__aeabi_dadd>
 80079e4:	9a00      	ldr	r2, [sp, #0]
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	9010      	str	r0, [sp, #64]	; 0x40
 80079ea:	9111      	str	r1, [sp, #68]	; 0x44
 80079ec:	0010      	movs	r0, r2
 80079ee:	0019      	movs	r1, r3
 80079f0:	f7f9 fda0 	bl	8001534 <__aeabi_dmul>
 80079f4:	2200      	movs	r2, #0
 80079f6:	4b63      	ldr	r3, [pc, #396]	; (8007b84 <__ieee754_pow+0x754>)
 80079f8:	0004      	movs	r4, r0
 80079fa:	000d      	movs	r5, r1
 80079fc:	f7f8 fe5c 	bl	80006b8 <__aeabi_dadd>
 8007a00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a04:	f7f8 fe58 	bl	80006b8 <__aeabi_dadd>
 8007a08:	2600      	movs	r6, #0
 8007a0a:	000f      	movs	r7, r1
 8007a0c:	0032      	movs	r2, r6
 8007a0e:	000b      	movs	r3, r1
 8007a10:	9800      	ldr	r0, [sp, #0]
 8007a12:	9901      	ldr	r1, [sp, #4]
 8007a14:	f7f9 fd8e 	bl	8001534 <__aeabi_dmul>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	9000      	str	r0, [sp, #0]
 8007a1c:	9101      	str	r1, [sp, #4]
 8007a1e:	4b59      	ldr	r3, [pc, #356]	; (8007b84 <__ieee754_pow+0x754>)
 8007a20:	0030      	movs	r0, r6
 8007a22:	0039      	movs	r1, r7
 8007a24:	f7f9 fff2 	bl	8001a0c <__aeabi_dsub>
 8007a28:	0022      	movs	r2, r4
 8007a2a:	002b      	movs	r3, r5
 8007a2c:	f7f9 ffee 	bl	8001a0c <__aeabi_dsub>
 8007a30:	0002      	movs	r2, r0
 8007a32:	000b      	movs	r3, r1
 8007a34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a36:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a38:	f7f9 ffe8 	bl	8001a0c <__aeabi_dsub>
 8007a3c:	9a08      	ldr	r2, [sp, #32]
 8007a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a40:	f7f9 fd78 	bl	8001534 <__aeabi_dmul>
 8007a44:	0032      	movs	r2, r6
 8007a46:	0004      	movs	r4, r0
 8007a48:	000d      	movs	r5, r1
 8007a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a4e:	003b      	movs	r3, r7
 8007a50:	f7f9 fd70 	bl	8001534 <__aeabi_dmul>
 8007a54:	0002      	movs	r2, r0
 8007a56:	000b      	movs	r3, r1
 8007a58:	0020      	movs	r0, r4
 8007a5a:	0029      	movs	r1, r5
 8007a5c:	f7f8 fe2c 	bl	80006b8 <__aeabi_dadd>
 8007a60:	0004      	movs	r4, r0
 8007a62:	000d      	movs	r5, r1
 8007a64:	0002      	movs	r2, r0
 8007a66:	000b      	movs	r3, r1
 8007a68:	9800      	ldr	r0, [sp, #0]
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	f7f8 fe24 	bl	80006b8 <__aeabi_dadd>
 8007a70:	2600      	movs	r6, #0
 8007a72:	22e0      	movs	r2, #224	; 0xe0
 8007a74:	4b44      	ldr	r3, [pc, #272]	; (8007b88 <__ieee754_pow+0x758>)
 8007a76:	0612      	lsls	r2, r2, #24
 8007a78:	0030      	movs	r0, r6
 8007a7a:	000f      	movs	r7, r1
 8007a7c:	f7f9 fd5a 	bl	8001534 <__aeabi_dmul>
 8007a80:	9008      	str	r0, [sp, #32]
 8007a82:	9109      	str	r1, [sp, #36]	; 0x24
 8007a84:	9a00      	ldr	r2, [sp, #0]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	0039      	movs	r1, r7
 8007a8a:	0030      	movs	r0, r6
 8007a8c:	f7f9 ffbe 	bl	8001a0c <__aeabi_dsub>
 8007a90:	0002      	movs	r2, r0
 8007a92:	000b      	movs	r3, r1
 8007a94:	0020      	movs	r0, r4
 8007a96:	0029      	movs	r1, r5
 8007a98:	f7f9 ffb8 	bl	8001a0c <__aeabi_dsub>
 8007a9c:	4a3b      	ldr	r2, [pc, #236]	; (8007b8c <__ieee754_pow+0x75c>)
 8007a9e:	4b3a      	ldr	r3, [pc, #232]	; (8007b88 <__ieee754_pow+0x758>)
 8007aa0:	f7f9 fd48 	bl	8001534 <__aeabi_dmul>
 8007aa4:	4a3a      	ldr	r2, [pc, #232]	; (8007b90 <__ieee754_pow+0x760>)
 8007aa6:	0004      	movs	r4, r0
 8007aa8:	000d      	movs	r5, r1
 8007aaa:	4b3a      	ldr	r3, [pc, #232]	; (8007b94 <__ieee754_pow+0x764>)
 8007aac:	0039      	movs	r1, r7
 8007aae:	0030      	movs	r0, r6
 8007ab0:	f7f9 fd40 	bl	8001534 <__aeabi_dmul>
 8007ab4:	0002      	movs	r2, r0
 8007ab6:	000b      	movs	r3, r1
 8007ab8:	0020      	movs	r0, r4
 8007aba:	0029      	movs	r1, r5
 8007abc:	f7f8 fdfc 	bl	80006b8 <__aeabi_dadd>
 8007ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac2:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <__ieee754_pow+0x768>)
 8007ac4:	189b      	adds	r3, r3, r2
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f7f8 fdf5 	bl	80006b8 <__aeabi_dadd>
 8007ace:	900a      	str	r0, [sp, #40]	; 0x28
 8007ad0:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ad4:	f7fa fb80 	bl	80021d8 <__aeabi_i2d>
 8007ad8:	0004      	movs	r4, r0
 8007ada:	000d      	movs	r5, r1
 8007adc:	9808      	ldr	r0, [sp, #32]
 8007ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ae2:	4b2e      	ldr	r3, [pc, #184]	; (8007b9c <__ieee754_pow+0x76c>)
 8007ae4:	189b      	adds	r3, r3, r2
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	9200      	str	r2, [sp, #0]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af2:	f7f8 fde1 	bl	80006b8 <__aeabi_dadd>
 8007af6:	9a00      	ldr	r2, [sp, #0]
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	f7f8 fddd 	bl	80006b8 <__aeabi_dadd>
 8007afe:	0022      	movs	r2, r4
 8007b00:	002b      	movs	r3, r5
 8007b02:	f7f8 fdd9 	bl	80006b8 <__aeabi_dadd>
 8007b06:	0022      	movs	r2, r4
 8007b08:	002b      	movs	r3, r5
 8007b0a:	0030      	movs	r0, r6
 8007b0c:	000f      	movs	r7, r1
 8007b0e:	f7f9 ff7d 	bl	8001a0c <__aeabi_dsub>
 8007b12:	9a00      	ldr	r2, [sp, #0]
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	f7f9 ff79 	bl	8001a0c <__aeabi_dsub>
 8007b1a:	9a08      	ldr	r2, [sp, #32]
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	f7f9 ff75 	bl	8001a0c <__aeabi_dsub>
 8007b22:	0002      	movs	r2, r0
 8007b24:	000b      	movs	r3, r1
 8007b26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b2a:	e619      	b.n	8007760 <__ieee754_pow+0x330>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4c04      	ldr	r4, [pc, #16]	; (8007b40 <__ieee754_pow+0x710>)
 8007b30:	e622      	b.n	8007778 <__ieee754_pow+0x348>
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	43400000 	.word	0x43400000
 8007b3c:	fffffc01 	.word	0xfffffc01
 8007b40:	3ff00000 	.word	0x3ff00000
 8007b44:	0003988e 	.word	0x0003988e
 8007b48:	000bb679 	.word	0x000bb679
 8007b4c:	fff00000 	.word	0xfff00000
 8007b50:	080082f8 	.word	0x080082f8
 8007b54:	4a454eef 	.word	0x4a454eef
 8007b58:	3fca7e28 	.word	0x3fca7e28
 8007b5c:	93c9db65 	.word	0x93c9db65
 8007b60:	3fcd864a 	.word	0x3fcd864a
 8007b64:	a91d4101 	.word	0xa91d4101
 8007b68:	3fd17460 	.word	0x3fd17460
 8007b6c:	518f264d 	.word	0x518f264d
 8007b70:	3fd55555 	.word	0x3fd55555
 8007b74:	db6fabff 	.word	0xdb6fabff
 8007b78:	3fdb6db6 	.word	0x3fdb6db6
 8007b7c:	33333303 	.word	0x33333303
 8007b80:	3fe33333 	.word	0x3fe33333
 8007b84:	40080000 	.word	0x40080000
 8007b88:	3feec709 	.word	0x3feec709
 8007b8c:	dc3a03fd 	.word	0xdc3a03fd
 8007b90:	145b01f5 	.word	0x145b01f5
 8007b94:	be3e2fe0 	.word	0xbe3e2fe0
 8007b98:	08008318 	.word	0x08008318
 8007b9c:	08008308 	.word	0x08008308
 8007ba0:	4a90      	ldr	r2, [pc, #576]	; (8007de4 <__ieee754_pow+0x9b4>)
 8007ba2:	4b91      	ldr	r3, [pc, #580]	; (8007de8 <__ieee754_pow+0x9b8>)
 8007ba4:	9804      	ldr	r0, [sp, #16]
 8007ba6:	9905      	ldr	r1, [sp, #20]
 8007ba8:	f7f8 fd86 	bl	80006b8 <__aeabi_dadd>
 8007bac:	0032      	movs	r2, r6
 8007bae:	9002      	str	r0, [sp, #8]
 8007bb0:	9103      	str	r1, [sp, #12]
 8007bb2:	003b      	movs	r3, r7
 8007bb4:	0028      	movs	r0, r5
 8007bb6:	0021      	movs	r1, r4
 8007bb8:	f7f9 ff28 	bl	8001a0c <__aeabi_dsub>
 8007bbc:	0002      	movs	r2, r0
 8007bbe:	000b      	movs	r3, r1
 8007bc0:	9802      	ldr	r0, [sp, #8]
 8007bc2:	9903      	ldr	r1, [sp, #12]
 8007bc4:	f7f8 fc4a 	bl	800045c <__aeabi_dcmpgt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d000      	beq.n	8007bce <__ieee754_pow+0x79e>
 8007bcc:	e60f      	b.n	80077ee <__ieee754_pow+0x3be>
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4a86      	ldr	r2, [pc, #536]	; (8007dec <__ieee754_pow+0x9bc>)
 8007bd2:	0063      	lsls	r3, r4, #1
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	9102      	str	r1, [sp, #8]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	dd25      	ble.n	8007c28 <__ieee754_pow+0x7f8>
 8007bdc:	4a84      	ldr	r2, [pc, #528]	; (8007df0 <__ieee754_pow+0x9c0>)
 8007bde:	151b      	asrs	r3, r3, #20
 8007be0:	189b      	adds	r3, r3, r2
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	0352      	lsls	r2, r2, #13
 8007be6:	4694      	mov	ip, r2
 8007be8:	411a      	asrs	r2, r3
 8007bea:	1914      	adds	r4, r2, r4
 8007bec:	4b81      	ldr	r3, [pc, #516]	; (8007df4 <__ieee754_pow+0x9c4>)
 8007bee:	0060      	lsls	r0, r4, #1
 8007bf0:	4d81      	ldr	r5, [pc, #516]	; (8007df8 <__ieee754_pow+0x9c8>)
 8007bf2:	0d40      	lsrs	r0, r0, #21
 8007bf4:	18c0      	adds	r0, r0, r3
 8007bf6:	4105      	asrs	r5, r0
 8007bf8:	0021      	movs	r1, r4
 8007bfa:	43a9      	bics	r1, r5
 8007bfc:	000b      	movs	r3, r1
 8007bfe:	4661      	mov	r1, ip
 8007c00:	0324      	lsls	r4, r4, #12
 8007c02:	0b24      	lsrs	r4, r4, #12
 8007c04:	4321      	orrs	r1, r4
 8007c06:	2414      	movs	r4, #20
 8007c08:	1a20      	subs	r0, r4, r0
 8007c0a:	4101      	asrs	r1, r0
 8007c0c:	9102      	str	r1, [sp, #8]
 8007c0e:	9908      	ldr	r1, [sp, #32]
 8007c10:	2200      	movs	r2, #0
 8007c12:	2900      	cmp	r1, #0
 8007c14:	da02      	bge.n	8007c1c <__ieee754_pow+0x7ec>
 8007c16:	9902      	ldr	r1, [sp, #8]
 8007c18:	4249      	negs	r1, r1
 8007c1a:	9102      	str	r1, [sp, #8]
 8007c1c:	0030      	movs	r0, r6
 8007c1e:	0039      	movs	r1, r7
 8007c20:	f7f9 fef4 	bl	8001a0c <__aeabi_dsub>
 8007c24:	9006      	str	r0, [sp, #24]
 8007c26:	9107      	str	r1, [sp, #28]
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	9806      	ldr	r0, [sp, #24]
 8007c2e:	9907      	ldr	r1, [sp, #28]
 8007c30:	2600      	movs	r6, #0
 8007c32:	f7f8 fd41 	bl	80006b8 <__aeabi_dadd>
 8007c36:	2200      	movs	r2, #0
 8007c38:	0030      	movs	r0, r6
 8007c3a:	4b70      	ldr	r3, [pc, #448]	; (8007dfc <__ieee754_pow+0x9cc>)
 8007c3c:	000f      	movs	r7, r1
 8007c3e:	f7f9 fc79 	bl	8001534 <__aeabi_dmul>
 8007c42:	9a06      	ldr	r2, [sp, #24]
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	9008      	str	r0, [sp, #32]
 8007c48:	9109      	str	r1, [sp, #36]	; 0x24
 8007c4a:	0030      	movs	r0, r6
 8007c4c:	0039      	movs	r1, r7
 8007c4e:	f7f9 fedd 	bl	8001a0c <__aeabi_dsub>
 8007c52:	0002      	movs	r2, r0
 8007c54:	000b      	movs	r3, r1
 8007c56:	9804      	ldr	r0, [sp, #16]
 8007c58:	9905      	ldr	r1, [sp, #20]
 8007c5a:	f7f9 fed7 	bl	8001a0c <__aeabi_dsub>
 8007c5e:	4a68      	ldr	r2, [pc, #416]	; (8007e00 <__ieee754_pow+0x9d0>)
 8007c60:	4b68      	ldr	r3, [pc, #416]	; (8007e04 <__ieee754_pow+0x9d4>)
 8007c62:	f7f9 fc67 	bl	8001534 <__aeabi_dmul>
 8007c66:	4a68      	ldr	r2, [pc, #416]	; (8007e08 <__ieee754_pow+0x9d8>)
 8007c68:	0004      	movs	r4, r0
 8007c6a:	000d      	movs	r5, r1
 8007c6c:	0030      	movs	r0, r6
 8007c6e:	0039      	movs	r1, r7
 8007c70:	4b66      	ldr	r3, [pc, #408]	; (8007e0c <__ieee754_pow+0x9dc>)
 8007c72:	f7f9 fc5f 	bl	8001534 <__aeabi_dmul>
 8007c76:	0002      	movs	r2, r0
 8007c78:	000b      	movs	r3, r1
 8007c7a:	0020      	movs	r0, r4
 8007c7c:	0029      	movs	r1, r5
 8007c7e:	f7f8 fd1b 	bl	80006b8 <__aeabi_dadd>
 8007c82:	0004      	movs	r4, r0
 8007c84:	000d      	movs	r5, r1
 8007c86:	0002      	movs	r2, r0
 8007c88:	000b      	movs	r3, r1
 8007c8a:	9808      	ldr	r0, [sp, #32]
 8007c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8e:	f7f8 fd13 	bl	80006b8 <__aeabi_dadd>
 8007c92:	9a08      	ldr	r2, [sp, #32]
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	0006      	movs	r6, r0
 8007c98:	000f      	movs	r7, r1
 8007c9a:	f7f9 feb7 	bl	8001a0c <__aeabi_dsub>
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	000b      	movs	r3, r1
 8007ca2:	0020      	movs	r0, r4
 8007ca4:	0029      	movs	r1, r5
 8007ca6:	f7f9 feb1 	bl	8001a0c <__aeabi_dsub>
 8007caa:	0032      	movs	r2, r6
 8007cac:	9004      	str	r0, [sp, #16]
 8007cae:	9105      	str	r1, [sp, #20]
 8007cb0:	003b      	movs	r3, r7
 8007cb2:	0030      	movs	r0, r6
 8007cb4:	0039      	movs	r1, r7
 8007cb6:	f7f9 fc3d 	bl	8001534 <__aeabi_dmul>
 8007cba:	0004      	movs	r4, r0
 8007cbc:	000d      	movs	r5, r1
 8007cbe:	4a54      	ldr	r2, [pc, #336]	; (8007e10 <__ieee754_pow+0x9e0>)
 8007cc0:	4b54      	ldr	r3, [pc, #336]	; (8007e14 <__ieee754_pow+0x9e4>)
 8007cc2:	f7f9 fc37 	bl	8001534 <__aeabi_dmul>
 8007cc6:	4a54      	ldr	r2, [pc, #336]	; (8007e18 <__ieee754_pow+0x9e8>)
 8007cc8:	4b54      	ldr	r3, [pc, #336]	; (8007e1c <__ieee754_pow+0x9ec>)
 8007cca:	f7f9 fe9f 	bl	8001a0c <__aeabi_dsub>
 8007cce:	0022      	movs	r2, r4
 8007cd0:	002b      	movs	r3, r5
 8007cd2:	f7f9 fc2f 	bl	8001534 <__aeabi_dmul>
 8007cd6:	4a52      	ldr	r2, [pc, #328]	; (8007e20 <__ieee754_pow+0x9f0>)
 8007cd8:	4b52      	ldr	r3, [pc, #328]	; (8007e24 <__ieee754_pow+0x9f4>)
 8007cda:	f7f8 fced 	bl	80006b8 <__aeabi_dadd>
 8007cde:	0022      	movs	r2, r4
 8007ce0:	002b      	movs	r3, r5
 8007ce2:	f7f9 fc27 	bl	8001534 <__aeabi_dmul>
 8007ce6:	4a50      	ldr	r2, [pc, #320]	; (8007e28 <__ieee754_pow+0x9f8>)
 8007ce8:	4b50      	ldr	r3, [pc, #320]	; (8007e2c <__ieee754_pow+0x9fc>)
 8007cea:	f7f9 fe8f 	bl	8001a0c <__aeabi_dsub>
 8007cee:	0022      	movs	r2, r4
 8007cf0:	002b      	movs	r3, r5
 8007cf2:	f7f9 fc1f 	bl	8001534 <__aeabi_dmul>
 8007cf6:	4a4e      	ldr	r2, [pc, #312]	; (8007e30 <__ieee754_pow+0xa00>)
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <__ieee754_pow+0xa04>)
 8007cfa:	f7f8 fcdd 	bl	80006b8 <__aeabi_dadd>
 8007cfe:	0022      	movs	r2, r4
 8007d00:	002b      	movs	r3, r5
 8007d02:	f7f9 fc17 	bl	8001534 <__aeabi_dmul>
 8007d06:	0002      	movs	r2, r0
 8007d08:	000b      	movs	r3, r1
 8007d0a:	0030      	movs	r0, r6
 8007d0c:	0039      	movs	r1, r7
 8007d0e:	f7f9 fe7d 	bl	8001a0c <__aeabi_dsub>
 8007d12:	0004      	movs	r4, r0
 8007d14:	000d      	movs	r5, r1
 8007d16:	0002      	movs	r2, r0
 8007d18:	000b      	movs	r3, r1
 8007d1a:	0030      	movs	r0, r6
 8007d1c:	0039      	movs	r1, r7
 8007d1e:	f7f9 fc09 	bl	8001534 <__aeabi_dmul>
 8007d22:	2380      	movs	r3, #128	; 0x80
 8007d24:	9006      	str	r0, [sp, #24]
 8007d26:	9107      	str	r1, [sp, #28]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	0020      	movs	r0, r4
 8007d2c:	0029      	movs	r1, r5
 8007d2e:	05db      	lsls	r3, r3, #23
 8007d30:	f7f9 fe6c 	bl	8001a0c <__aeabi_dsub>
 8007d34:	0002      	movs	r2, r0
 8007d36:	000b      	movs	r3, r1
 8007d38:	9806      	ldr	r0, [sp, #24]
 8007d3a:	9907      	ldr	r1, [sp, #28]
 8007d3c:	f7f8 fff8 	bl	8000d30 <__aeabi_ddiv>
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	0004      	movs	r4, r0
 8007d46:	000d      	movs	r5, r1
 8007d48:	0030      	movs	r0, r6
 8007d4a:	0039      	movs	r1, r7
 8007d4c:	f7f9 fbf2 	bl	8001534 <__aeabi_dmul>
 8007d50:	9a04      	ldr	r2, [sp, #16]
 8007d52:	9b05      	ldr	r3, [sp, #20]
 8007d54:	f7f8 fcb0 	bl	80006b8 <__aeabi_dadd>
 8007d58:	0002      	movs	r2, r0
 8007d5a:	000b      	movs	r3, r1
 8007d5c:	0020      	movs	r0, r4
 8007d5e:	0029      	movs	r1, r5
 8007d60:	f7f9 fe54 	bl	8001a0c <__aeabi_dsub>
 8007d64:	0032      	movs	r2, r6
 8007d66:	003b      	movs	r3, r7
 8007d68:	f7f9 fe50 	bl	8001a0c <__aeabi_dsub>
 8007d6c:	0002      	movs	r2, r0
 8007d6e:	000b      	movs	r3, r1
 8007d70:	2000      	movs	r0, #0
 8007d72:	4931      	ldr	r1, [pc, #196]	; (8007e38 <__ieee754_pow+0xa08>)
 8007d74:	f7f9 fe4a 	bl	8001a0c <__aeabi_dsub>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	051b      	lsls	r3, r3, #20
 8007d7c:	185b      	adds	r3, r3, r1
 8007d7e:	151a      	asrs	r2, r3, #20
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dc25      	bgt.n	8007dd0 <__ieee754_pow+0x9a0>
 8007d84:	9a02      	ldr	r2, [sp, #8]
 8007d86:	f000 f94f 	bl	8008028 <scalbn>
 8007d8a:	9a00      	ldr	r2, [sp, #0]
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	f7ff fc33 	bl	80075f8 <__ieee754_pow+0x1c8>
 8007d92:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <__ieee754_pow+0xa0c>)
 8007d94:	004b      	lsls	r3, r1, #1
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	dc00      	bgt.n	8007d9e <__ieee754_pow+0x96e>
 8007d9c:	e717      	b.n	8007bce <__ieee754_pow+0x79e>
 8007d9e:	4b28      	ldr	r3, [pc, #160]	; (8007e40 <__ieee754_pow+0xa10>)
 8007da0:	18cb      	adds	r3, r1, r3
 8007da2:	4303      	orrs	r3, r0
 8007da4:	d008      	beq.n	8007db8 <__ieee754_pow+0x988>
 8007da6:	9800      	ldr	r0, [sp, #0]
 8007da8:	9901      	ldr	r1, [sp, #4]
 8007daa:	2300      	movs	r3, #0
 8007dac:	2200      	movs	r2, #0
 8007dae:	f7f8 fb41 	bl	8000434 <__aeabi_dcmplt>
 8007db2:	1e43      	subs	r3, r0, #1
 8007db4:	4198      	sbcs	r0, r3
 8007db6:	e462      	b.n	800767e <__ieee754_pow+0x24e>
 8007db8:	0032      	movs	r2, r6
 8007dba:	003b      	movs	r3, r7
 8007dbc:	f7f9 fe26 	bl	8001a0c <__aeabi_dsub>
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	f7f8 fb54 	bl	8000470 <__aeabi_dcmpge>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d100      	bne.n	8007dce <__ieee754_pow+0x99e>
 8007dcc:	e6ff      	b.n	8007bce <__ieee754_pow+0x79e>
 8007dce:	e7ea      	b.n	8007da6 <__ieee754_pow+0x976>
 8007dd0:	0019      	movs	r1, r3
 8007dd2:	e7da      	b.n	8007d8a <__ieee754_pow+0x95a>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4c18      	ldr	r4, [pc, #96]	; (8007e38 <__ieee754_pow+0xa08>)
 8007dd8:	f7ff fbf1 	bl	80075be <__ieee754_pow+0x18e>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2400      	movs	r4, #0
 8007de0:	f7ff fbed 	bl	80075be <__ieee754_pow+0x18e>
 8007de4:	652b82fe 	.word	0x652b82fe
 8007de8:	3c971547 	.word	0x3c971547
 8007dec:	3fe00000 	.word	0x3fe00000
 8007df0:	fffffc02 	.word	0xfffffc02
 8007df4:	fffffc01 	.word	0xfffffc01
 8007df8:	000fffff 	.word	0x000fffff
 8007dfc:	3fe62e43 	.word	0x3fe62e43
 8007e00:	fefa39ef 	.word	0xfefa39ef
 8007e04:	3fe62e42 	.word	0x3fe62e42
 8007e08:	0ca86c39 	.word	0x0ca86c39
 8007e0c:	be205c61 	.word	0xbe205c61
 8007e10:	72bea4d0 	.word	0x72bea4d0
 8007e14:	3e663769 	.word	0x3e663769
 8007e18:	c5d26bf1 	.word	0xc5d26bf1
 8007e1c:	3ebbbd41 	.word	0x3ebbbd41
 8007e20:	af25de2c 	.word	0xaf25de2c
 8007e24:	3f11566a 	.word	0x3f11566a
 8007e28:	16bebd93 	.word	0x16bebd93
 8007e2c:	3f66c16c 	.word	0x3f66c16c
 8007e30:	5555553e 	.word	0x5555553e
 8007e34:	3fc55555 	.word	0x3fc55555
 8007e38:	3ff00000 	.word	0x3ff00000
 8007e3c:	4090cbff 	.word	0x4090cbff
 8007e40:	3f6f3400 	.word	0x3f6f3400

08007e44 <__ieee754_sqrt>:
 8007e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e46:	000b      	movs	r3, r1
 8007e48:	000c      	movs	r4, r1
 8007e4a:	4956      	ldr	r1, [pc, #344]	; (8007fa4 <__ieee754_sqrt+0x160>)
 8007e4c:	0005      	movs	r5, r0
 8007e4e:	0002      	movs	r2, r0
 8007e50:	0008      	movs	r0, r1
 8007e52:	b085      	sub	sp, #20
 8007e54:	4020      	ands	r0, r4
 8007e56:	4288      	cmp	r0, r1
 8007e58:	d10f      	bne.n	8007e7a <__ieee754_sqrt+0x36>
 8007e5a:	0028      	movs	r0, r5
 8007e5c:	0021      	movs	r1, r4
 8007e5e:	f7f9 fb69 	bl	8001534 <__aeabi_dmul>
 8007e62:	0002      	movs	r2, r0
 8007e64:	000b      	movs	r3, r1
 8007e66:	0028      	movs	r0, r5
 8007e68:	0021      	movs	r1, r4
 8007e6a:	f7f8 fc25 	bl	80006b8 <__aeabi_dadd>
 8007e6e:	0005      	movs	r5, r0
 8007e70:	000c      	movs	r4, r1
 8007e72:	0028      	movs	r0, r5
 8007e74:	0021      	movs	r1, r4
 8007e76:	b005      	add	sp, #20
 8007e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	dc10      	bgt.n	8007ea0 <__ieee754_sqrt+0x5c>
 8007e7e:	0061      	lsls	r1, r4, #1
 8007e80:	0849      	lsrs	r1, r1, #1
 8007e82:	4329      	orrs	r1, r5
 8007e84:	d0f5      	beq.n	8007e72 <__ieee754_sqrt+0x2e>
 8007e86:	2100      	movs	r1, #0
 8007e88:	428c      	cmp	r4, r1
 8007e8a:	d100      	bne.n	8007e8e <__ieee754_sqrt+0x4a>
 8007e8c:	e080      	b.n	8007f90 <__ieee754_sqrt+0x14c>
 8007e8e:	0028      	movs	r0, r5
 8007e90:	0021      	movs	r1, r4
 8007e92:	f7f9 fdbb 	bl	8001a0c <__aeabi_dsub>
 8007e96:	0002      	movs	r2, r0
 8007e98:	000b      	movs	r3, r1
 8007e9a:	f7f8 ff49 	bl	8000d30 <__aeabi_ddiv>
 8007e9e:	e7e6      	b.n	8007e6e <__ieee754_sqrt+0x2a>
 8007ea0:	1521      	asrs	r1, r4, #20
 8007ea2:	d075      	beq.n	8007f90 <__ieee754_sqrt+0x14c>
 8007ea4:	4840      	ldr	r0, [pc, #256]	; (8007fa8 <__ieee754_sqrt+0x164>)
 8007ea6:	031b      	lsls	r3, r3, #12
 8007ea8:	180c      	adds	r4, r1, r0
 8007eaa:	2080      	movs	r0, #128	; 0x80
 8007eac:	0b1b      	lsrs	r3, r3, #12
 8007eae:	0340      	lsls	r0, r0, #13
 8007eb0:	4303      	orrs	r3, r0
 8007eb2:	07c9      	lsls	r1, r1, #31
 8007eb4:	d403      	bmi.n	8007ebe <__ieee754_sqrt+0x7a>
 8007eb6:	0fd1      	lsrs	r1, r2, #31
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	185b      	adds	r3, r3, r1
 8007ebc:	0052      	lsls	r2, r2, #1
 8007ebe:	1061      	asrs	r1, r4, #1
 8007ec0:	2400      	movs	r4, #0
 8007ec2:	9103      	str	r1, [sp, #12]
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	0fd1      	lsrs	r1, r2, #31
 8007ec8:	185b      	adds	r3, r3, r1
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	2516      	movs	r5, #22
 8007ece:	0020      	movs	r0, r4
 8007ed0:	0052      	lsls	r2, r2, #1
 8007ed2:	0389      	lsls	r1, r1, #14
 8007ed4:	1846      	adds	r6, r0, r1
 8007ed6:	429e      	cmp	r6, r3
 8007ed8:	dc02      	bgt.n	8007ee0 <__ieee754_sqrt+0x9c>
 8007eda:	1870      	adds	r0, r6, r1
 8007edc:	1b9b      	subs	r3, r3, r6
 8007ede:	1864      	adds	r4, r4, r1
 8007ee0:	0fd6      	lsrs	r6, r2, #31
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	3d01      	subs	r5, #1
 8007ee6:	18f3      	adds	r3, r6, r3
 8007ee8:	0052      	lsls	r2, r2, #1
 8007eea:	0849      	lsrs	r1, r1, #1
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d1f1      	bne.n	8007ed4 <__ieee754_sqrt+0x90>
 8007ef0:	2620      	movs	r6, #32
 8007ef2:	2780      	movs	r7, #128	; 0x80
 8007ef4:	0029      	movs	r1, r5
 8007ef6:	9601      	str	r6, [sp, #4]
 8007ef8:	063f      	lsls	r7, r7, #24
 8007efa:	197e      	adds	r6, r7, r5
 8007efc:	46b4      	mov	ip, r6
 8007efe:	4283      	cmp	r3, r0
 8007f00:	dc02      	bgt.n	8007f08 <__ieee754_sqrt+0xc4>
 8007f02:	d114      	bne.n	8007f2e <__ieee754_sqrt+0xea>
 8007f04:	4296      	cmp	r6, r2
 8007f06:	d812      	bhi.n	8007f2e <__ieee754_sqrt+0xea>
 8007f08:	4665      	mov	r5, ip
 8007f0a:	4666      	mov	r6, ip
 8007f0c:	19ed      	adds	r5, r5, r7
 8007f0e:	9002      	str	r0, [sp, #8]
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	da03      	bge.n	8007f1c <__ieee754_sqrt+0xd8>
 8007f14:	43ee      	mvns	r6, r5
 8007f16:	0ff6      	lsrs	r6, r6, #31
 8007f18:	1986      	adds	r6, r0, r6
 8007f1a:	9602      	str	r6, [sp, #8]
 8007f1c:	1a1b      	subs	r3, r3, r0
 8007f1e:	4562      	cmp	r2, ip
 8007f20:	4180      	sbcs	r0, r0
 8007f22:	4240      	negs	r0, r0
 8007f24:	1a1b      	subs	r3, r3, r0
 8007f26:	4660      	mov	r0, ip
 8007f28:	1a12      	subs	r2, r2, r0
 8007f2a:	9802      	ldr	r0, [sp, #8]
 8007f2c:	19c9      	adds	r1, r1, r7
 8007f2e:	0fd6      	lsrs	r6, r2, #31
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	199b      	adds	r3, r3, r6
 8007f34:	9e01      	ldr	r6, [sp, #4]
 8007f36:	0052      	lsls	r2, r2, #1
 8007f38:	3e01      	subs	r6, #1
 8007f3a:	087f      	lsrs	r7, r7, #1
 8007f3c:	9601      	str	r6, [sp, #4]
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	d1db      	bne.n	8007efa <__ieee754_sqrt+0xb6>
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d003      	beq.n	8007f4e <__ieee754_sqrt+0x10a>
 8007f46:	1c4b      	adds	r3, r1, #1
 8007f48:	d127      	bne.n	8007f9a <__ieee754_sqrt+0x156>
 8007f4a:	0031      	movs	r1, r6
 8007f4c:	3401      	adds	r4, #1
 8007f4e:	4b17      	ldr	r3, [pc, #92]	; (8007fac <__ieee754_sqrt+0x168>)
 8007f50:	1060      	asrs	r0, r4, #1
 8007f52:	18c0      	adds	r0, r0, r3
 8007f54:	0849      	lsrs	r1, r1, #1
 8007f56:	07e3      	lsls	r3, r4, #31
 8007f58:	d502      	bpl.n	8007f60 <__ieee754_sqrt+0x11c>
 8007f5a:	2380      	movs	r3, #128	; 0x80
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	4319      	orrs	r1, r3
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	000d      	movs	r5, r1
 8007f64:	051c      	lsls	r4, r3, #20
 8007f66:	1823      	adds	r3, r4, r0
 8007f68:	001c      	movs	r4, r3
 8007f6a:	e782      	b.n	8007e72 <__ieee754_sqrt+0x2e>
 8007f6c:	0ad3      	lsrs	r3, r2, #11
 8007f6e:	3815      	subs	r0, #21
 8007f70:	0552      	lsls	r2, r2, #21
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0fa      	beq.n	8007f6c <__ieee754_sqrt+0x128>
 8007f76:	2480      	movs	r4, #128	; 0x80
 8007f78:	0364      	lsls	r4, r4, #13
 8007f7a:	4223      	tst	r3, r4
 8007f7c:	d00a      	beq.n	8007f94 <__ieee754_sqrt+0x150>
 8007f7e:	2420      	movs	r4, #32
 8007f80:	0016      	movs	r6, r2
 8007f82:	1a64      	subs	r4, r4, r1
 8007f84:	40e6      	lsrs	r6, r4
 8007f86:	1e4d      	subs	r5, r1, #1
 8007f88:	408a      	lsls	r2, r1
 8007f8a:	4333      	orrs	r3, r6
 8007f8c:	1b41      	subs	r1, r0, r5
 8007f8e:	e789      	b.n	8007ea4 <__ieee754_sqrt+0x60>
 8007f90:	2000      	movs	r0, #0
 8007f92:	e7ee      	b.n	8007f72 <__ieee754_sqrt+0x12e>
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	3101      	adds	r1, #1
 8007f98:	e7ef      	b.n	8007f7a <__ieee754_sqrt+0x136>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	3101      	adds	r1, #1
 8007f9e:	4399      	bics	r1, r3
 8007fa0:	e7d5      	b.n	8007f4e <__ieee754_sqrt+0x10a>
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	7ff00000 	.word	0x7ff00000
 8007fa8:	fffffc01 	.word	0xfffffc01
 8007fac:	3fe00000 	.word	0x3fe00000

08007fb0 <with_errno>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	000d      	movs	r5, r1
 8007fb4:	0016      	movs	r6, r2
 8007fb6:	0004      	movs	r4, r0
 8007fb8:	f7fe fd0a 	bl	80069d0 <__errno>
 8007fbc:	0029      	movs	r1, r5
 8007fbe:	6006      	str	r6, [r0, #0]
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}

08007fc4 <xflow>:
 8007fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fc6:	0015      	movs	r5, r2
 8007fc8:	001c      	movs	r4, r3
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d010      	beq.n	8007ff0 <xflow+0x2c>
 8007fce:	2380      	movs	r3, #128	; 0x80
 8007fd0:	0010      	movs	r0, r2
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	18e1      	adds	r1, r4, r3
 8007fd6:	9000      	str	r0, [sp, #0]
 8007fd8:	9101      	str	r1, [sp, #4]
 8007fda:	9a00      	ldr	r2, [sp, #0]
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	0028      	movs	r0, r5
 8007fe0:	0021      	movs	r1, r4
 8007fe2:	f7f9 faa7 	bl	8001534 <__aeabi_dmul>
 8007fe6:	2222      	movs	r2, #34	; 0x22
 8007fe8:	f7ff ffe2 	bl	8007fb0 <with_errno>
 8007fec:	b003      	add	sp, #12
 8007fee:	bd30      	pop	{r4, r5, pc}
 8007ff0:	0010      	movs	r0, r2
 8007ff2:	0019      	movs	r1, r3
 8007ff4:	e7ef      	b.n	8007fd6 <xflow+0x12>

08007ff6 <__math_uflow>:
 8007ff6:	2380      	movs	r3, #128	; 0x80
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	055b      	lsls	r3, r3, #21
 8007ffe:	f7ff ffe1 	bl	8007fc4 <xflow>
 8008002:	bd10      	pop	{r4, pc}

08008004 <__math_oflow>:
 8008004:	23e0      	movs	r3, #224	; 0xe0
 8008006:	b510      	push	{r4, lr}
 8008008:	2200      	movs	r2, #0
 800800a:	05db      	lsls	r3, r3, #23
 800800c:	f7ff ffda 	bl	8007fc4 <xflow>
 8008010:	bd10      	pop	{r4, pc}

08008012 <fabs>:
 8008012:	004b      	lsls	r3, r1, #1
 8008014:	0859      	lsrs	r1, r3, #1
 8008016:	4770      	bx	lr

08008018 <finite>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <finite+0xc>)
 800801a:	0048      	lsls	r0, r1, #1
 800801c:	0840      	lsrs	r0, r0, #1
 800801e:	18c0      	adds	r0, r0, r3
 8008020:	0fc0      	lsrs	r0, r0, #31
 8008022:	4770      	bx	lr
 8008024:	80100000 	.word	0x80100000

08008028 <scalbn>:
 8008028:	004b      	lsls	r3, r1, #1
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	0d5b      	lsrs	r3, r3, #21
 800802e:	0014      	movs	r4, r2
 8008030:	000a      	movs	r2, r1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10d      	bne.n	8008052 <scalbn+0x2a>
 8008036:	004b      	lsls	r3, r1, #1
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	4303      	orrs	r3, r0
 800803c:	d010      	beq.n	8008060 <scalbn+0x38>
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <scalbn+0xb4>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f9 fa77 	bl	8001534 <__aeabi_dmul>
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <scalbn+0xb8>)
 8008048:	429c      	cmp	r4, r3
 800804a:	da0a      	bge.n	8008062 <scalbn+0x3a>
 800804c:	4a25      	ldr	r2, [pc, #148]	; (80080e4 <scalbn+0xbc>)
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <scalbn+0xc0>)
 8008050:	e019      	b.n	8008086 <scalbn+0x5e>
 8008052:	4d26      	ldr	r5, [pc, #152]	; (80080ec <scalbn+0xc4>)
 8008054:	42ab      	cmp	r3, r5
 8008056:	d108      	bne.n	800806a <scalbn+0x42>
 8008058:	0002      	movs	r2, r0
 800805a:	000b      	movs	r3, r1
 800805c:	f7f8 fb2c 	bl	80006b8 <__aeabi_dadd>
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	000a      	movs	r2, r1
 8008064:	004b      	lsls	r3, r1, #1
 8008066:	0d5b      	lsrs	r3, r3, #21
 8008068:	3b36      	subs	r3, #54	; 0x36
 800806a:	4d21      	ldr	r5, [pc, #132]	; (80080f0 <scalbn+0xc8>)
 800806c:	18e3      	adds	r3, r4, r3
 800806e:	42ab      	cmp	r3, r5
 8008070:	dd0c      	ble.n	800808c <scalbn+0x64>
 8008072:	4c20      	ldr	r4, [pc, #128]	; (80080f4 <scalbn+0xcc>)
 8008074:	4d20      	ldr	r5, [pc, #128]	; (80080f8 <scalbn+0xd0>)
 8008076:	2900      	cmp	r1, #0
 8008078:	da01      	bge.n	800807e <scalbn+0x56>
 800807a:	4c1e      	ldr	r4, [pc, #120]	; (80080f4 <scalbn+0xcc>)
 800807c:	4d1f      	ldr	r5, [pc, #124]	; (80080fc <scalbn+0xd4>)
 800807e:	0020      	movs	r0, r4
 8008080:	0029      	movs	r1, r5
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <scalbn+0xcc>)
 8008084:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <scalbn+0xd0>)
 8008086:	f7f9 fa55 	bl	8001534 <__aeabi_dmul>
 800808a:	e7e9      	b.n	8008060 <scalbn+0x38>
 800808c:	2b00      	cmp	r3, #0
 800808e:	dd05      	ble.n	800809c <scalbn+0x74>
 8008090:	4c1b      	ldr	r4, [pc, #108]	; (8008100 <scalbn+0xd8>)
 8008092:	051b      	lsls	r3, r3, #20
 8008094:	4022      	ands	r2, r4
 8008096:	431a      	orrs	r2, r3
 8008098:	0011      	movs	r1, r2
 800809a:	e7e1      	b.n	8008060 <scalbn+0x38>
 800809c:	001d      	movs	r5, r3
 800809e:	3535      	adds	r5, #53	; 0x35
 80080a0:	da13      	bge.n	80080ca <scalbn+0xa2>
 80080a2:	4a18      	ldr	r2, [pc, #96]	; (8008104 <scalbn+0xdc>)
 80080a4:	0fcb      	lsrs	r3, r1, #31
 80080a6:	4294      	cmp	r4, r2
 80080a8:	dd08      	ble.n	80080bc <scalbn+0x94>
 80080aa:	4812      	ldr	r0, [pc, #72]	; (80080f4 <scalbn+0xcc>)
 80080ac:	4912      	ldr	r1, [pc, #72]	; (80080f8 <scalbn+0xd0>)
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <scalbn+0x8e>
 80080b2:	4810      	ldr	r0, [pc, #64]	; (80080f4 <scalbn+0xcc>)
 80080b4:	4911      	ldr	r1, [pc, #68]	; (80080fc <scalbn+0xd4>)
 80080b6:	4a0f      	ldr	r2, [pc, #60]	; (80080f4 <scalbn+0xcc>)
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <scalbn+0xd0>)
 80080ba:	e7e4      	b.n	8008086 <scalbn+0x5e>
 80080bc:	4809      	ldr	r0, [pc, #36]	; (80080e4 <scalbn+0xbc>)
 80080be:	490a      	ldr	r1, [pc, #40]	; (80080e8 <scalbn+0xc0>)
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0c3      	beq.n	800804c <scalbn+0x24>
 80080c4:	4807      	ldr	r0, [pc, #28]	; (80080e4 <scalbn+0xbc>)
 80080c6:	4910      	ldr	r1, [pc, #64]	; (8008108 <scalbn+0xe0>)
 80080c8:	e7c0      	b.n	800804c <scalbn+0x24>
 80080ca:	4c0d      	ldr	r4, [pc, #52]	; (8008100 <scalbn+0xd8>)
 80080cc:	3336      	adds	r3, #54	; 0x36
 80080ce:	4022      	ands	r2, r4
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	4313      	orrs	r3, r2
 80080d4:	0019      	movs	r1, r3
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <scalbn+0xe4>)
 80080da:	e7d4      	b.n	8008086 <scalbn+0x5e>
 80080dc:	43500000 	.word	0x43500000
 80080e0:	ffff3cb0 	.word	0xffff3cb0
 80080e4:	c2f8f359 	.word	0xc2f8f359
 80080e8:	01a56e1f 	.word	0x01a56e1f
 80080ec:	000007ff 	.word	0x000007ff
 80080f0:	000007fe 	.word	0x000007fe
 80080f4:	8800759c 	.word	0x8800759c
 80080f8:	7e37e43c 	.word	0x7e37e43c
 80080fc:	fe37e43c 	.word	0xfe37e43c
 8008100:	800fffff 	.word	0x800fffff
 8008104:	0000c350 	.word	0x0000c350
 8008108:	81a56e1f 	.word	0x81a56e1f
 800810c:	3c900000 	.word	0x3c900000

08008110 <_init>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr

0800811c <_fini>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr
