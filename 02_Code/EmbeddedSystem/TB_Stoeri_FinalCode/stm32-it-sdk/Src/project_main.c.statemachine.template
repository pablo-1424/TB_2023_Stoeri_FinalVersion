/* ==========================================================
 * project_main.c - 
 * Project : Disk91 SDK
 * ----------------------------------------------------------
 * Created on: 6 sept. 2018
 *     Author: Paul Pinault aka Disk91
 * ----------------------------------------------------------
 * Copyright (C) 2018 Disk91
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU LESSER General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * ----------------------------------------------------------
 * 
 * Add a such file in the main Src directory for executing
 * you own workload.
 *
 * ==========================================================
 */
#include <it_sdk/config.h>
#include <it_sdk/itsdk.h>
#include <it_sdk/time/time.h>
#include <it_sdk/logger/logger.h>
#include <it_sdk/sched/scheduler.h>
#include <it_sdk/statemachine/statemachine.h>
#include <it_sdk/eeprom/eeprom.h>



#define ST_INIT 0
#define ST_SETUP 1
#define ST_SLEEP 2


void updateTiming() {
	log_debug("In update timing\r\n");
}

uint8_t stInit(void * p, uint8_t cState, uint16_t cLoop, uint32_t tLoop) {
	log_debug("In Init %d,%d\r\n",cLoop,tLoop);

	uint16_t t = adc_getTemperature();
	log_debug("Temp : %d\r\n",t);
	return ST_SETUP;
}

uint8_t stSetup(void * p, uint8_t cState, uint16_t cLoop, uint32_t tLoop) {
	log_debug("In Setup %d,%d\r\n",cLoop,tLoop);

	return ST_SLEEP;
}

uint8_t led = GPIO_PIN_SET;
uint8_t stSleep(void * p, uint8_t cState, uint16_t cLoop, uint32_t tLoop) {
	log_debug("In Sleep %d,%d\r\n",cLoop,tLoop);
	led = (led==GPIO_PIN_SET)?GPIO_PIN_RESET:GPIO_PIN_SET;
	gpio_change(__BANK_A, __LP_GPIO_7,led);

	log_info("time is %d\r\n",(uint32_t)itsdk_time_get_ms());
	return ST_SLEEP;
}



machine_t machine = {
    ST_INIT,				// currentState
    LOOP_INIT_VALUE, 		// loopCounter
    STATE_UNKNOWN,			// lastState
    TOTAL_LOOP_INIT_VALUE,	// totalLoop
    &updateTiming,			// Update age each time the machine is running - on each cycles.
    {
      //       UID        RESET       PROCE     P0      Name:XXXXXXX
        { ST_INIT,        NULL,      &stInit,    NULL,   	"Init"   },
        { ST_SETUP, 	  NULL,	   &stSetup,   	 NULL,   	"Setup"  },
        { ST_SLEEP, 	  NULL,     &stSleep,    NULL,   	"Sleep"  },
        { STATE_LAST,	  NULL,         NULL,    NULL,      "Error"  }

    }
};



void task() {
	statem(&machine);
}


void project_setup() {
	log_info("Booting \r\n");
	itsdk_delayMs(2000);
	itdt_sched_registerSched(2000,ITSDK_SCHED_CONF_IMMEDIATE, &task);
}

void project_loop() {


}

